#! /usr/bin/env bash

##############################################################################
# @file  test_basisproject.sh
# @brief Test basisproject command-line tool.
#
# Copyright (c) 2011 University of Pennsylvania. All rights reserved.
# See https://www.rad.upenn.edu/sbia/software/license.html or COPYING file.
#
# Contact: SBIA Group <sbia-software at uphs.upenn.edu>
##############################################################################

@BASIS_BASH_UTILITIES@

# ============================================================================
# constants
# ============================================================================

basis_dir='@TESTING_BASIS_DIR@'
ressources_dir='@TESTING_DIR@/ressources/test_basisproject'
source_dir='@TESTING_OUTPUT_DIR@/test_basisproject-source'
binary_dir='@TESTING_OUTPUT_DIR@/test_basisproject-build'

get_executable_path basisproject_path 'basis::basisproject.sh'
[ -z "${basisproject_path}" ] && { echo "FAILED to get path of basisproject command!"; exit 1; }

# ============================================================================
# options
# ============================================================================

FLAGS "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

# ============================================================================
# helpers
# ============================================================================

##############################################################################
# @brief Run command with arguments and exit on failure.
run ()
{
    if [ ${FLAGS_verbose} -gt 0 ]; then
        echo "\$> $@"
    fi
    "$@"
    local errcode=$?
    if [ ${errcode} -ne 0 ] ; then
        echo
        echo "Failed to run command $@" 1>&2
        echo
        echo "FAILED"
        exit ${errcode}
    fi
    return 0
}

##############################################################################
# @brief Run command with arguments where error is expected.
runerr ()
{
    if [ ${FLAGS_verbose} -gt 0 ]; then
        echo "\$> $@"
    fi
    "$@"
    local errcode=$?
    if [ ${errcode} -eq 0 ] ; then
        echo
        echo "Command $@ was unexpectedly successful" 1>&2
        echo
        echo "FAILED"
        exit 1
    fi
    return 0
}

##############################################################################
# @brief Copy file from ressources directory to project source tree.
#
# @param [in] file   File path relative to top directory of ressources tree.
# @param [in] prefix Path prefix relative to project source tree. Defaults
#                    to the root of the project source tree itself.
# @param [in] name   Name of file in project source tree. Defaults to the
#                    name of the file given by @p file.
#
# @returns Nothing.
copy ()
{
    local file=$1
    local prefix=${2:-'.'}
    local name=${3:-"$(basename "$file")"}
    run cp "${ressources_dir}/${file}" "${source_dir}/${prefix}/$(dirname "$file")/${name}"
}

##############################################################################
# @brief Creates a project using the basisproject command-line tool.
create ()
{
    echo "Creating test project..."
    [ -d "${source_dir}" ] && run rm -rf "${source_dir}"
    run "${basisproject_path}" --name 'TestProject' --description "A test project." --root "${source_dir}" "$@"
    echo "Creating test project... - done"
}

##############################################################################
# @brief Update project.
update ()
{
    echo "Updating test project..."
    run "${basisproject_path}" --root "${source_dir}" "$@"
    echo "Updating test project... - done"
}

##############################################################################
# @brief Update project with errors.
update_error ()
{
    echo "Updating test project (errors expected)..."
    runerr "${basisproject_path}" --root "${source_dir}" "$@"
    echo "Updating test project... - done"
}

##############################################################################
# @brief Tries to build a project created by basisproject.
build ()
{
    local cwd="$(pwd)"
    readonly cwd

    echo "Configuring test project..."
    [ -d "${binary_dir}" ] && run rm -rf "${binary_dir}"
    run mkdir -p "${binary_dir}"
    run cd "${binary_dir}"
    run cmake "-DBASIS_DIR=${basis_dir}" "${source_dir}"
    echo "Configuring test project... - done"
    echo "Building test project..."
    run make
    echo "Building test project... - done"

    run cd "${cwd}"
}

##############################################################################
# @brief Cleanup source and binary tree.
cleanup ()
{
    [ -d "${source_dir}" ] && run rm -rf "${source_dir}"
    [ -d "${binary_dir}" ] && run rm -rf "${binary_dir}"
}

# ============================================================================
# tests
# ============================================================================

# ----------------------------------------------------------------------------
# positive tests
# ----------------------------------------------------------------------------

##############################################################################
# @brief Test creation of project based on minimal configuration.
test_minimal_empty_project ()
{
    echo "------------------------------------------------------------------------------"
    echo "test_minimal_empty_project:"
    echo
    create --minimal
    build
    echo
    echo "SUCCESS"
}

##############################################################################
# @brief Test creation of project based on standard configuration.
test_standard_empty_project ()
{
    echo "------------------------------------------------------------------------------"
    echo "test_standard_empty_project:"
    echo
    create --standard
    build
    echo
    echo "SUCCESS"
}

##############################################################################
# @brief Test creation of project based on full configuration.
test_full_empty_project ()
{
    echo "------------------------------------------------------------------------------"
    echo "test_full_empty_project:"
    echo
    create --full
    build
    echo
    echo "SUCCESS"
}

##############################################################################
# @brief Update minimal to standard empty project.
test_minimal_to_standard_empty_project ()
{
    echo "------------------------------------------------------------------------------"
    echo "test_minimal_to_standard_empty_project:"
    echo
    create --minimal
    update --standard
    build
    echo
    echo "SUCCESS"
}

##############################################################################
# @brief Update minimal to full empty project.
test_minimal_to_full_empty_project ()
{
    echo "------------------------------------------------------------------------------"
    echo "test_minimal_to_full_empty_project:"
    echo
    create --minimal
    update --full
    build
    echo
    echo "SUCCESS"
}

##############################################################################
# @brief Update full to minimal empty project.
test_full_to_minimal_empty_project ()
{
    echo "------------------------------------------------------------------------------"
    echo "test_full_to_minimal_empty_project:"
    echo
    create --full
    update_error --minimal # fails because CTestConfig.cmake was modified during creation
    update --minimal --force
    build
    echo
    echo "SUCCESS"
}

##############################################################################
# @brief Test configuration of used languages.
test_configuration_of_language_support ()
{
    local line

    echo "------------------------------------------------------------------------------"
    echo "test_configuration_of_language_support:"
    echo
    create --minimal --language CXX
    line="$(grep 'LANGUAGES' "${source_dir}/CMakeLists.txt")"
    if [[ "${line}" != '  LANGUAGES   CXX #AddLanguageHere' ]]; then
        echo
        echo "FAILED"
        exit 1
    fi
    update --language python --language Perl
    line="$(grep 'LANGUAGES' "${source_dir}/CMakeLists.txt")"
    if [[ "${line}" != '  LANGUAGES   CXX python Perl #AddLanguageHere' ]]; then
        echo
        echo "FAILED"
        exit 1
    fi
    echo
    echo "SUCCESS"
}

# ----------------------------------------------------------------------------
# negative tests
# ----------------------------------------------------------------------------

##############################################################################
# @brief Test error when required arguments are missing.
test_required_arguments ()
{
    echo "------------------------------------------------------------------------------"
    echo "test_required_arguments:"
    echo
    runerr "${basisproject_path}"
    runerr "${basisproject_path}" --name 'TestProject'
    runerr "${basisproject_path}" --description 'Name is missing'
    echo
    echo "SUCCESS"
}

# ============================================================================
# main
# ============================================================================

[ ${FLAGS_verbose} -gt 0 ] && { echo "testee: ${basisproject_path}"; echo; }

# positive tests
test_minimal_empty_project
test_standard_empty_project
test_full_empty_project
test_minimal_to_standard_empty_project
test_minimal_to_full_empty_project
test_full_to_minimal_empty_project
test_configuration_of_language_support

# negative tests
test_required_arguments

# clean up
cleanup
