/**
 * @file  test_stdaux.cxx
 * @brief Test stdaux.cxx module.
 *
 * Copyright (c) 2011, University of Pennsylvania. All rights reserved.<br />
 * See http://www.rad.upenn.edu/sbia/software/license.html or COPYING file.
 *
 * Contact: SBIA Group <sbia-software at uphs.upenn.edu>
 */

#include <sbia/basis/test.h>   // unit testing framework
#include "stdaux.h"            // testee

#include <sbia/basis/except.h> // SubprocessException
#include <vector>
#include <string>
#include <stdio.h>             // remove(), freopen()
#include <fstream>


using namespace sbia;
using namespace std;


// ---------------------------------------------------------------------------
// Test exception when execute_process() is not used as intended.
TEST(StdAux, ExecuteProcessInvalidUse)
{
    vector<string> argv;
    EXPECT_THROW(basis::execute_process(""), basis::SubprocessException);
    EXPECT_THROW(basis::execute_process(argv), basis::SubprocessException);
}

// ---------------------------------------------------------------------------
// Test execution of executable target.
TEST(StdAux, ExecuteTarget)
{
    vector<string> args;
    int status;
    std::ostringstream output;
    EXPECT_NO_THROW(status = basis::execute_process("basis.dummy_command"));
    EXPECT_EQ(0, status) << "exit code of basis.dummy_command is 0";
    EXPECT_NO_THROW(status = basis::execute_process("basis.dummy_command --greet", true, &output));
    EXPECT_EQ(0, status) << "exit code of basis.dummy_command --greet is 0";
    output.flush();
    EXPECT_STREQ("Hello, BASIS!\n", output.str().c_str());
    args.clear();
    output.str("");
    args.push_back("basis.dummy_command");
    args.push_back("--greet");
    EXPECT_NO_THROW(status = basis::execute_process(args, true, &output));
    output.flush();
    EXPECT_EQ(0, status) << "exit code of basis.dummy_command --warn is 0";
    EXPECT_STREQ("Hello, BASIS!\n", output.str().c_str());
}

// ---------------------------------------------------------------------------
// Test redirection of STDOUT and STDERR
TEST(StdAux, Redirection)
{
    int status;
#if WINDOWS
    FAIL() << "Test not implemented for Windows yet!";
#else
    std::ifstream log;
    char buf[1024];
    FILE* original_stdout = stdout;
    FILE* original_stderr = stderr;
    ASSERT_EQ(stdout, freopen("test_stdaux.stdout", "w", stdout));
    ASSERT_EQ(stderr, freopen("test_stdaux.stderr", "w", stderr));
    EXPECT_NO_THROW(status = basis::execute_process("basis.dummy_command --greet --warn", true));
    EXPECT_EQ(0, status);
    fclose(stdout);
    stdout = original_stdout;
    fclose(stderr);
    stderr = original_stderr;
    log.open("test_stdaux.stdout");
    EXPECT_TRUE(log);
    log.getline(buf, 1024);
    log.close();
    EXPECT_STREQ("", buf);
    remove("test_stdaux.stdout");
    log.open("test_stdaux.stderr");
    EXPECT_TRUE(log);
    log.getline(buf, 1024);
    log.close();
    EXPECT_STREQ("WARNING: Cannot greet in other languages!", buf);
    remove("test_stdaux.stderr");
#endif
}

// ---------------------------------------------------------------------------
// Test execution of some non-target command.
TEST(StdAux, ExecuteCommand)
{
#if WINDOWS
    const string args = "dir C:\\";
#else
    const string args = "ls /";
#endif
    int status = 0;
    std::ostringstream output;
    ASSERT_NO_THROW(status = basis::execute_process(args, true, &output));
    EXPECT_EQ(0, status) << "exit code of dir or ls is 0";
    EXPECT_STRNE("", output.str().c_str()) << "output of dir or ls is not empty";
}
