##############################################################################
# @file  test_ExecutableTargetInfo.pl
# @brief Test ExecutableTargetInfo.pm module.
#
# Copyright (c) 2011, University of Pennsylvania. All rights reserved.<br />
# See http://www.rad.upenn.edu/sbia/software/license.html or COPYING file.
#
# Contact: SBIA Group <sbia-software at uphs.upenn.edu>
##############################################################################


use Test::More tests => 20;


@BASIS_PERL_UTILITIES@

# ============================================================================
# tests
# ============================================================================

# ----------------------------------------------------------------------------
# Test Basis::get_target_uid().

is (Basis::get_target_uid ('basisproject'), 'basisproject',
    'target of other project unmodified');
is (Basis::get_target_uid ('unknown'), 'unknown',
    'unknown target unmodified');
is (Basis::get_target_uid ('basis.basisproject'), 'sbia.basis.basisproject',
    'global namespace prepended');
is (Basis::get_target_uid ('sbia.basis.basisproject'), 'sbia.basis.basisproject',
    'UID remains unchanged');
is (Basis::get_target_uid ('hammer.hammer'), 'hammer.hammer',
    'UID remains unchanged');
is (Basis::get_target_uid ('.hello'), '.hello',
    'global namespace remains unchanged');
is (Basis::get_target_uid (undef), undef,
    'invalid argument results in undef as return value');
is (Basis::get_target_uid (''), undef,
    'invalid argument results in undef as return value');

# ----------------------------------------------------------------------------
# Test Basis::is_known_target().

ok (!Basis::is_known_target ('basisproject'),
    'basisproject not part of UtilitiesTest');
ok (Basis::is_known_target ('basis.basisproject'),
    'basis.basisproject is a known target');
ok (!Basis::is_known_target (undef),
    'undefined argument is unknown target');
ok (!Basis::is_known_target (''),
    'empty target string is unknown target');
ok (!Basis::is_known_target ('hammer.hammer'),
    'some unknown target');

# ----------------------------------------------------------------------------
# Test Basis::get_executable_name().

# name of this executable
like (Basis::get_executable_name (),
    qr/^test_ExecutableTargetInfo\.pl?$/,
    "name of this executable");
# name of executable built by some target
like (Basis::get_executable_name ('basis.basisproject'),
    qr/^basisproject(\.cmd)?$/,
    "name of basis.basisproject executable");

# ----------------------------------------------------------------------------
# Test Basis::get_executable_directory().

# directory of this executable
like (Basis::get_executable_directory (),
    qr/\/Testing\/Temporary\/test_utilities\/build\/Testing\/bin/,
    "directory of this executable");
# directory of executable built by some target
like (Basis::get_executable_directory ('basis.basisproject'),
    qr/^\/.*\/bin(\/basis)?$/,
    "directory of basis.basisproject executable");

# ----------------------------------------------------------------------------
# Test Basis::get_executable_path().

# path of this executable
is (Basis::get_executable_path (),
    Basis::get_executable_directory () . '/' . Basis::get_executable_name (),
    "path of this executable");
# path of executable built by some target
my $target = 'basis.basisproject';
is (Basis::get_executable_path ($target),
    Basis::get_executable_directory ($target) . '/' . Basis::get_executable_name ($target),
    "path of $target executable");
# path of some system command
if ($^O =~ m/MSWin32/) {
    $target   = 'regedit';
    $expected = 'C:\\Windows\\regedit.exe';
} else {
    $target = 'ls';
    $expected = '/bin/ls';
}
is (Basis::get_executable_path ($target), $expected);
