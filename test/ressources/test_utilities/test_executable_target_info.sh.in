#! /usr/bin/env bash

##############################################################################
# @file  test_executable_target_info.sh
# @brief Test executable_target_info.sh module.
#
# Copyright (c) 2011 University of Pennsylvania. All rights reserved.
# See https://www.rad.upenn.edu/sbia/software/license.html or COPYING file.
#
# Contact: SBIA Group <sbia-software at uphs.upenn.edu>
##############################################################################

@BASIS_BASH_UTILITIES@

# ============================================================================
# tests
# ============================================================================

##############################################################################
# @brief Sanitize string.
#
# This function failed before due to the GNU version of tr using -c instead of -C.
test_sanitize ()
{
    local sane
    _executabletargetinfo_sanitize sane 'basis::basisproject.sh'
    assertEquals ':: and . replaced by _' 'basis__basisproject_sh' "${sane}"
    _executabletargetinfo_sanitize sane 'basis@basisproject.sh'
    assertEquals '@ and . replaced by _' 'basis_basisproject_sh' "${sane}"
}

##############################################################################
# @brief Test get_target_uid().
test_get_target_uid ()
{
    local uid
    # without namespace
    get_target_uid uid 'basisproject.sh'
    assertTrue 'return value is 0' "[ $? -eq 0 ]"
    assertEquals 'namespace prepended to known target' 'testutilities::basisproject.sh' "${uid}"
    get_target_uid uid 'unknown'
    assertTrue 'return value is 0' "[ $? -eq 0 ]"
    assertEquals 'namespace prepended to unknown target' 'testutilities::unknown' "${uid}"
    # with namespace
    get_target_uid uid 'basis::basisproject.sh'
    assertTrue 'return value is 0' "[ $? -eq 0 ]"
    assertEquals 'UID remains unchanged' 'basis::basisproject.sh' "${uid}"
    get_target_uid uid 'hammer::hammer'
    assertTrue 'return value is 0' "[ $? -eq 0 ]"
    assertEquals 'UID remains unchanged' 'hammer::hammer' "${uid}"
    # global namespace
    get_target_uid uid '::hello'
    assertTrue 'return value is 0' "[ $? -eq 0 ]"
    assertEquals 'global namespace remains unchanged' '::hello' "${uid}"
    # empty string
    get_target_uid uid ''
    assertTrue 'return value is 0' "[ $? -eq 0 ]"
    assertEquals 'empty string remains unchanged' '' "${uid}"
}

##############################################################################
# @brief Test is_known_target().
test_is_known_target ()
{
    assertFalse 'basisproject.sh not part of TestUtilities' "is_known_target 'basisproject.sh'"
    assertTrue  'basis::basisproject.sh is known target'    "is_known_target 'basis::basisproject.sh'"
    assertFalse 'empty target string is unknown target'     "is_known_target ''"
    assertFalse 'empty target string is unknown target'     "is_known_target"
    assertFalse 'some unknown target'                       "is_known_target 'hammer::hammer'"
}

##############################################################################
# @brief Test get_executable_name().
test_get_executable_name ()
{
    local name
    # name of this executable
    get_executable_name name
    assertTrue 'return value is 0' "[ $? -eq 0 ]"
    assertEquals 'name of this executable' 'test_executable_target_info.sh' "${name}"
    # name of executable built by other target
    get_executable_name name 'basis::basisproject.sh'
    assertTrue 'return value is 0' "[ $? -eq 0 ]"
    assertEquals 'name of other executable' 'basisproject' "${name}"
}

##############################################################################
# @brief Test get_executable_directory().
test_get_executable_directory ()
{
    local dir
    # directory of this executable
    get_executable_directory dir
    assertTrue 'return value is 0' "[ $? -eq 0 ]"
    assertEquals 'directory of this executable' 'bin' "${dir##*\/}"
    # directory of executable built by other target
    get_executable_directory dir 'basis::basisproject.sh'
    assertTrue 'return value is 0' "[ $? -eq 0 ]"
    assertEquals 'directory of other executable' 'bin' "${dir##*\/}"
}

##############################################################################
# @brief Test get_executable_path().
test_get_executable_path ()
{
    local path
    # path of this executable
    get_executable_path      path
    assertTrue 'return value is 0' "[ $? -eq 0 ]"
    get_executable_name      name
    assertTrue 'return value is 0' "[ $? -eq 0 ]"
    get_executable_directory dir
    assertTrue 'return value is 0' "[ $? -eq 0 ]"
    assertEquals 'path of this executable' "${dir}/${name}" "${path}"
    # path of executable built by other target
    local target='basis::basisproject.sh'
    get_executable_path      path "${target}"
    assertTrue 'return value is 0' "[ $? -eq 0 ]"
    get_executable_name      name "${target}"
    assertTrue 'return value is 0' "[ $? -eq 0 ]"
    get_executable_directory dir  "${target}"
    assertTrue 'return value is 0' "[ $? -eq 0 ]"
    assertEquals 'path of this executable' "${dir}/${name}" "${path}"
    # wrong number of arguments
    get_executable_path
    assertTrue 'return value is not 0' "[ $? -ne 0 ]"
}

# ============================================================================
# main
# ============================================================================

source "${__@NAMESPACE_UPPER@_DIR}/@BASIS_LIBRARY_DIR@/shunit2.sh"
