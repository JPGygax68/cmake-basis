#! /usr/bin/env python

##############################################################################
# @file  test_executabletargetinfo.py
# @brief Test executable target related functions of BASIS utilities.
#
# Copyright (c) 2011-2012 University of Pennsylvania. <br />
# Copyright (c) 2013-2014 Andreas Schuh.              <br />
# All rights reserved.                                <br />
#
# See http://opensource.andreasschuh.com/cmake-basis/download.html#software-license
# or COPYING file for license information.
#
# Contact: Andreas Schuh <andreas.schuh.84@gmail.com>,
#          report issues at https://github.com/schuhschuh/cmake-basis/issues
##############################################################################

import unittest
import re
import os
import sys

from utilitiestest import basis


# ============================================================================
# tests
# ============================================================================

class TestExecutableTargetInfo(unittest.TestCase):
    
    # ------------------------------------------------------------------------
    def test_targetuid(self):
        self.assertEquals (
                basis.targetuid ('basisproject'),
                'basisproject')
        self.assertEquals (
                basis.targetuid ('unknown'),
                'unknown')
        self.assertEquals (
                basis.targetuid ('basis.basisproject'),
                'basis.basisproject')
        self.assertEquals (
                basis.targetuid ('hammer.hammer'),
                'hammer.hammer')
        self.assertEquals (basis.targetuid ('.hello'), '.hello')
        self.assertEquals (basis.targetuid (None), None)
        self.assertEquals (basis.targetuid (''), None)
    
    # ------------------------------------------------------------------------
    def test_istarget(self):
        self.assertFalse (basis.istarget ('basisproject'))
        self.assertTrue  (basis.istarget ('basis.basisproject'))
        self.assertFalse (basis.istarget (None))
        self.assertFalse (basis.istarget (''))
        self.assertFalse (basis.istarget ('hammer.hammer'))
    
    # ------------------------------------------------------------------------
    def test_exename(self):
        # name of this executable
        self.assertTrue (re.match (
                    r"test_executabletargetinfo_py(\.cmd)?",
                    basis.exename ()))
        # name of executable built by some target
        self.assertTrue (re.match (
                    r"basisproject(\.cmd)?",
                    basis.exename ('basis.basisproject'))) 
    
    # ------------------------------------------------------------------------
    def test_exedir(self):
        # directory of this executable
        print "Executable directory: " + basis.exedir ()
        self.assertTrue (re.search (
                    r"[/\\]Testing[/\\]Temporary[/\\]test_utilities[/\\]build[/\\]Testing[/\\]bin",
                    basis.exedir ()))
        # directory of executable built by some target
        self.assertTrue (re.match (
                    r"([a-zA-Z]:)?[/\\].*[/\\]bin([/\\]basis)?",
                    basis.exedir ('basis.basisproject')))
    
    # ------------------------------------------------------------------------
    def test_exepath(self):
        # path of this executable
        self.assertEquals (basis.exepath (),
                os.path.join (basis.exedir (), basis.exename ()))
        # path of executable built by some target
        target = 'basis.basisproject'
        self.assertEquals (basis.exepath (target),
                os.path.join (basis.exedir (target), basis.exename (target)))
        # path of some system command
        if (os.name != 'posix'):
            target   = 'regedit'
            expected = 'c:\\windows\\regedit.exe'
        else:
            target = 'ls'
            expected = '/bin/ls'
        self.assertEquals(basis.exepath (target).lower(), expected)

# ============================================================================
# main
# ============================================================================

if __name__ == '__main__':
    unittest.main()
