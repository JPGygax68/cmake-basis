
  Section of Biomedical Image Analysis
  Department of Radiology
  University of Pennsylvania
  3600 Market Street, Suite 380
  Philadelphia, PA 19104

  Web:   https://www.rad.upenn.edu/sbia/
  Email: sbia-software at uphs.upenn.edu

  Copyright (c) 2011 University of Pennsylvania. All rights reserved.
  See https://www.rad.upenn.edu/sbia/software/license.html or COPYING file.



INTRODUCTION
============

  This document describes the common procedure to build and install any
  software developed at and distributed by SBIA. In particular, software built
  on top of BASIS, a meta-project which defines the Build system And Software
  Implementation Standard established in the fall of 2011.
  Please refer to the documentation of BASIS for details on this standard.

  If you obtained a binary distribution package for a supported platform,
  please follow the installation instructions corresponding to your operating
  system. The build step can be omitted in this case.

  In case of problems to build, install, or use the software, please contact
  the SBIA Group at the University of Pennsylvania, PA.

  In the following, $ at the beginning of a line indicates the command prompt of
  the used shell. Hence, the command followed after the $ has to be entered in a
  terminal. The instructions given in this guide are based on BASH, in particular.


  Attention: When this document has been modified, the corresponding publicly
             available web page has to be modified accordingly! This web page
             is referenced by each project and can be found at [1].



OBTAINING A COPY OF THE SOFTWARE
================================

  Visit https://www.rad.upenn.edu/sbia/software/index.html for an overview of
  publicly available software distribution packages.

  A download link for a specific software package can be requested at:

    https://www.rad.upenn.edu/sbia/software/request.php

  The file names of the distribution packages follow the convention
  "<package>-<version>-<arch>.<ext>", where <package> is the name of the
  package in lowercase letters, and <version> is the package version in the
  format "<major>.<minor>.<patch>". The <arch> file name part specifies the
  operating system and hardware architecture, i.e.,

    linux-x86     ->  Linux, 32-bit
    linux-x86_64  ->  Linux, 64-bit
    darwin-i386   ->  Darwin x86 Intel
    darwin-ppc    ->  Darwin Power PC
    win32         ->  Windows, 32-bit
    win64         ->  Windows, 64-bit

  In case of a source distribution package the value of <arch> is "source".
  The file name extension <ext> is "tar.gz" for a compressed tarball,
  "deb" for a Debian package, and "rpm" for a RPM package.



INSTALLING A BINARY DISTRIBUTION PACKAGE
========================================

  Debian Package
  --------------

    This package can be installed on Debian Linux and its derivatives such as
    Ubuntu Linux using, for example, the Advanced Package Tool (APT).

    To install the software package, run

      $ sudo apt-get install <package>-<version>-<arch>.deb

    in a terminal or use the package manager of your choice.


  RPM Package
  -----------

    This package can be installed on Red Hat Linux and its derivatives such as
    CentOS Linux and openSUSE Linux using, for example, the Yellowdog Updater,
    Modified (YUM).

    To install the software package, run

      $ sudo yum install <package>-<version>-<arch>.deb

    in a terminal or use the RPM package manager of your choice.


  Mac OS
  ------

    Bundles for Mac OS might be available for some software packages,
    but this is not supported by default. Please refer to the INSTALL file which
    is located in the root directory of the respective software package.


  Windows
  -------

    Currently, Microsoft Windows is not supported as operating system.
    The software development at SBIA is based on Linux, in particular
    CentOS, and most software packages are therefore dependent on a
    UNIX-based operating system. Thus, building and executing SBIA software
    under Windows will most likely require an installation of Cygwin
    (http://www.cygwin.com/) and the build of the software from sources
    as described below.

    As an alternative, consider the use of a Live Linux Distribution,
    a dual boot installation of Linux or an installation of a Linux operating
    system in a virtual machine using virtualization tools such as VirtualBox
    (http://www.virtualbox.org/) or proprietary virtualization solutions
    available for your host operating system.



BUILDING THE SOFWARE FROM SOURCES
=================================

  Build Dependencies
  ------------------

  The build of the software packages developed at SBIA is based on CMake,
  a cross-platform, open-source build tool. This tool can be used to configure
  the build system for various build tools which perform the actual build.
  Because of the focus on Linux-based development at SBIA, build instructions
  are based on GNU Make and the GNU Compiler Collection.

  - GNU Compiler Collection

    Web:      http://gcc.gnu.org/
    Download: http://gcc.gnu.org/install/

    Ubuntu:   g++

  - GNU Make

    Web:      http://www.gnu.org/
    Download: http://www.gnu.org/software/software.html

    Ubuntu:   (pre-installed)

  - CMake 2.8.4 or greater

    Web:      http://www.cmake.org/
    Download: http://www.cmake.org/cmake/resources/software.html

    Ubuntu:   cmake, cmake-curses-gui

    If your operating system such as certain Linux distributions do not
    support CMake 2.8.4 or greater yet, you need to download a more recent
    CMake version from the download page noted above and install it manually.

  - BASIS

    Web:      n/a
    Download: n/a

    The Build system And Software Implementation Standard (BASIS) among other
    features defines the project directory structure and provides CMake
    implementations to ease and standardize the build and installation.


  Build and Installation Instructions
  -----------------------------------

  In the following, we assume you obtained a copy of the source package as
  compressed tarball (*.tar.gz). The name and version part of the package file
  is referred to as BASH variable

    $ pkg=<package>-<version>

  1. Extract the source tree

     At first, extract the downloaded source package, e.g.,

       $ tar xzf $pkg-source.tar.gz ~

     This will extract the sources to a new diretory in your home directory
     named "<package>-<version>-source".

  2. Configure the build tree

     Create a directory for the build tree of the package and change to it, e.g.,

       $ mkdir ~/$pkg-build
       $ cd ~/$pkg-build

     Note that an in-source build, i.e., building the software within the
     source tree is not supported to force a clear separation of source and
     build tree.

     To configure the build tree, run CMake's graphical tool ccmake

       $ ccmake ~/$pkg-source

     Put "c" to trigger the configuration step of CMake. Warnings can be
     ignored by pressing "e". Once all CMake variables are configured
     properly, which might require the repeated execution of CMake's configure
     step, press "g". This will generate the configuration files for the
     selected build tool (i.e., GNU Make Makefiles in our case) and exit CMake.

     The common CMake variables which configure the build and installation are:

     - BUILD_DOCUMENTATION   Whether build and installation instructions for the
                             documentation should be added. If FALSe, the
                             documentation in the doc/ directory is skipped.
                             Otherwise, the documentation can be build by building
                             the "doc" target.
     - BUILD_EXAMPLE         Whether the examples should be built (if required)
                             and/or installed.
     - BUILD_TESTING         Whether the testing tree should be built and system
                             tests, i.e., tests that execute the installed programs
                             and compare the outputs to the expected results should
                             be installed.
     - CMAKE_BUILD_TYPE      Specify the build configuration to build. If not
                             set, the "Release" configuration will be build.
                             Valid values are "Release", "Debug", and "Coverage".
     - INSTALL_LINKS         Whether (symbolic) links should be created (see Step 5).
     - INSTALL_PREFIX        Prefix used for package installation (see Step 5).
     - INSTALL_SINFIX        Whether to use suffix/infix for installation (see Step 5).

     Note that INSTALL_PREFIX is initialized by the value of CMAKE_INSTALL_PREFIX,
     the default used by CMake to specify the installation prefix. Then, the
     value of CMAKE_INSTALL_PREFIX is forced to be identical to INSTALL_PREFIX,
     effectively renaming CMAKE_INSTALL_PREFIX to INSTALL_PREFIX.

     The advanced CMake settings are:

     - INSTAlL_APIDOC_DIR    Installation directory of the API documentation
                             relative to the INSTALL_PREFIX.

     Please refer to the package specific build instructions given in the
     INSTALL file which is located in the root directory of the source tree
     or the 'doc' directory of the installation for details on the package specific
     CMake variables.

     Note: The ccmake tool also provides a brief description to each variable
           in the status bar.

  3. Build the software

     To build the package executables, run GNU Make in the root directory
     of the configured build tree, i.e.,

       $ make

  4. Build the documentation (optional)

     In order to build the documentation, the BUILD_DOCUMENTATION variable
     has to be set to TRUE. If not done before, this option can be enabled by
     using the command:

       $ cmake -D BUILD_DOCUMENTATION=TRUE ~/$pkg-build

     The documentation is build by building the "doc" target, i.e.,

       $ make doc

     The advanced INSTALL_DOC_API_DIR CMake variable can be set to an absolute
     path or a path relative to the INSTALL_PREFIX directory in order to modify
     the installation directory for the API documentation which is generated
     from the in-source comments. This can be useful, for example, to install
     the documentation in the document directory of a web server.

     If you have access to the SVN repository of the project, a changelog can
     be generated from the SVN history by building the "changelog" target, i.e.,

       $ make changelog

     Note that this target is only available when the required svn2cl command
     is installed on your system.

  5. Install the package (optional)

     First, make sure that the CMake variables INSTALL_PREFIX and
     INSTALL_SINFIX are set properly by running CMake as follows:

       $ cmake -D "INSTALL_PREFIX=<prefix>" -D "INSTALL_SINFIX=ON|OFF" ~/$pkg-build

     This can be omitted if these variables were set already during the
     configuration of the build tree or if the default values should be used.
     On Linux, INSTALL_PREFIX is by default set to "/usr/local". Note that the
     following strings can be used in the specification of this variable which
     will be substituted by the corresponding package specific values.

     - @PROJECT_NAME@            The case-sensitive name of the software package.
     - @PROJECT_NAME_UPPER@      The name of the package in uppercase only.
     - @PROJECT_NAME_LOWER@      The name of the package in lowercase only.
     - @PROJECT_VERSION@         The package version.
     - @PROJECT_VERSION_MAJOR@   The major number of the package version.
     - @PROJECT_VERSION_MINOR@   The minor number of the package version.
     - @PROJECT_VERSION_PATCH@   The patch number of the package version.

     After the package was configured successfully, the executables and
     auxiliary files can be installed using the command

       $ make install

     in the root directory of the build tree. This will copy the installation
     files into the directories specified during the configuration of the build
     tree (see build step 2).
 
     The package files are installed in the following locations:

     - <prefix>/bin/<sinfix>/              Main executable files.
     - <prefix>/etc/<sinfix>/              Package configuration files.
     - <prefix>/include/sbia/<package>/    Include files, where <prefix>/include/
                                           is the directory that needs to be
                                           in the search path for include files.
     - <prefix>/lib/<sinfix>/              Libraries and auxiliary executables.
     - <prefix>/share/doc/<sinfix>         Package documentation files.
     - <prefix>/share/<sinfix>/example/    Files required to run example as
                                           described in the User Manual.
     - <prefix>/share/<sinfix>/man/man.1   Man pages of main executables.
     - <prefix>/share/<sinfix>/man/man.3   Man pages of library functions.

     where <prefix> is the value of INSTALL_PREFIX and <sinfix> is an empty
     string if INSTALL_SINFIX is OFF and the package name in lowercase
     otherwise (the default). If more than one version of a software
     package shall be installed, include the package version in the <prefix>
     by setting INSTALL_PREFIX to "/usr/local/@PROJECT_NAME_LOWER@-@PROJECT_VERSION@",
     for example.

     Additionally, if INSTALL_SINFIX and INSTALL_LINKS are ON (the default),
     the following (symbolic) links are created on UNIX-based systems:

     - <prefix>/bin/<exec>               -> <prefix>/bin/<sinfix>/<exec>
     - <prefix>/share/man/man.1/<exec>.1 -> <prefix>/share/<sinfix>/man/man.1/<exec>.1
     - <prefix>/share/man/man.3/<func>.3 -> <prefix>/share/<sinfix>/man/man.3/<func>.3

     Consider also the package specific installation instructions given in
     the INSTALL file of the respective package.

     After the successful installation, the build tree can be deleted. Note,
     however, that the Makefile-based deinstallation of the package requires
     the build tree to be present. To save disk space, the intermediate
     object files and built executables should still be deleted by

       $ make clean


  Makefile-based Deinstallation
  -----------------------------

  In order to undo the installation of the package files built from the sources,
  run the following command in the root directory of the build tree which was
  used to install the package

    $ cd ~/$pkg-build
    $ make uninstall

  Attention: With the current implementation, this command will simply
             delete all the files which were installed during the *last*
             build of the install target ("make install"). Directories will
             not be removed even when empty afterwards.



REFERENCES
==========

  [1] https://www.rad.upenn.edu/sbia/software/installation.html
