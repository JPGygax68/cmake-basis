
  Section of Biomedical Image Analysis
  Department of Radiology
  University of Pennsylvania
  3600 Market Street, Suite 380
  Philadelphia, PA 19104

  Web:   https://www.rad.upenn.edu/sbia/
  Email: sbia-software -at- uphs.upenn.edu



INTRODUCTION
============

  This document describes the directory structure of projects following the
  Build And Software Implementation Standard (BASIS). This directory structure
  was based on the Filesystem Hierarchy Standard of Linux
  (http://www.linuxfoundation.org/en/FHS). The configuration of the installation
  was further designed such that it is possible to account for the differences
  in both UNIX-based and Windows systems as well as the installation of multiple
  versions of each package. Furthermore, the directory structure by default
  integrates software developed at SBIA not only seamlessly into the target
  system but also the various separately managed software packages with each
  other. The latter is in particular employed by the superproject concept, also
  referred to as super-build. The superproject concept is described in the
  document Superprojects And Subprojects.

  In this document, names of CMake variables defined by the BASIS CMake modules
  are given, which are used within the BASIS modules to refer to the particular
  directories of a software project. These variables should be used either
  directly or indirectly where possible such that a change of the actual
  directory names does not require a modification of the software itself.



LEGEND
======

  In the remainder, <project> is a placeholder for the project name in lowercase
  letters only and <Project> is the case-sensitive project name.
  
  Further, <version> is a placeholder for the project version string
  "<major>.<minor>.<patch>", where <major> is the major version number, <minor>
  the minor version number, and <patch> the patch number.

  The root directory of a particular project source tree is denoted by <source>,
  while the root directory of the project binary tree is referred to as <build>.
  Note that each software project consists of more than one project components
  (not identical to, but related with software package components).
  Each component can be downloaded, configured, build, and installed separately.
  See design-components file and section Source Tree for details.

  The root directory of a development branch such as in particular the trunk
  (cf. section Repository Organization), is considered relative to the base URL of the
  project repository and denoted by <tag>, while the base URL is referred to as <url>.



REPOSITORY ORGANIZATION
=======================

  The URL of the project repository is "https://sbia-svn/projects/<project>".
  The top-level directories "trunk", "branches", and "tags" of the project named
  <project> are located here. No other directories may be located next to these
  three top-level directories.

  - trunk/                      The current development version of the project.
                                Most development is done in this master branch.

  - branches/<name>/            Separate branches named <name> are developed in
                                subdirectories under the branches directory.
                                One reason for branching is, for example, to
                                develop new features separate from the main
                                development branch, i.e., the trunk, and merging
                                the desired changes back to the trunk once the
                                new feature is implemented and tested.

  - branches/release/           This particular branch is used prior to releasing
                                a new version of the project. This branch is
                                commonly referred to as release candidate.

  - tags/<project>-<version>/   Tagged release version of the project.
                                The reason for including the project name in the
                                name of the tagged branch is, that revision
                                control systems often use the last URL part as
                                name for the directory to which the URL's content
                                is checked out or exported if no name for this
                                directory is specified explicitly.

                                In case of Subversion, the following command
                                will export the released software to a new
                                directory underneath the current working
                                directory named <project>-<version>/.

                                  $ svn export <url>/tags/<project>-<version>

  See the How to Branch and Release document for details on how to create new
  branches and the process of releasing a new version of a software project.

  Underneath the trunk and the release branches, a version of the entire source
  tree has to be found. Other branches underneath the branches/ directory may
  only contain a subset of the trunk such as, for example, only the source code
  of the software but not the example or tests (see Source Tree).



SOURCE TREE
===========

  The directory structure of the source tree, i.e., the directories and files
  which are managed in a revision controlled repository, is summarized in what
  follows. Other than the build and intallation tree, which are created and
  populated from the source tree, is the source tree even because of this the
  beating heart of a software project. The directories and files in the source
  tree can be classified into the following categories: software, build
  configuration, documentation, and testing. The example which is part of a
  software project is considered to be part of both documentation and testing.
  Furthermore, any files essential to the execution of the software are
  considered to be part of the software. Examples are a pre-computed lookup
  table and a medical image atlas.
 
  The testing at SBIA can further be divided into two subcategories: system
  testing and unit testing. It is important to note the difference of system
  tests and unit tests. Most often, only system tests will be performed due to
  the research character of the projects. These tests are usually implemented in
  a scripting language such as BASH, Python, or Perl. System tests simply run
  the built executables with different test input data and compare the output to
  the expected results. Therefore, system tests can also be performed on a
  target system using the installed software where both the software and system
  tests are distributed as separate binary distribution packages. Unit tests,
  on the other side, are not supposed to be installed and may not even be
  distributed to reduce the size of the distribution packages. Each unit test
  only tests a single software module such as a C++ class. The size of the 
  additional data required for unit tests shall be reasonably small. Entire
  medical image data sets should only be required for system tests.

  As the testing as well as the example in the field of medical imaging often
  requires a huge amount of image data, these datasets are stored and managed
  outside the source tree. Please refer to the How to Manage Data Outside the
  Source Tree document for details on this topic.


  Filesystem Hierarchy
  --------------------

  Below, the filesystem hierarchy of the source tree of a software project is
  delineated. On the left side the names of the CMake variables defined by
  BASIS are given, while on the right side the actual names of the directories
  are listed.

  - PROJECT_SOURCE_DIR              - <source>/
      + PROJECT_CODE_DIR                + src/
      + PROJECT_CONFIG_DIR              + config/
      + PROJECT_DOC_DIR                 + doc/
      + PROJECT_ETC_DIR                 + etc/
      + PROJECT_EXAMPLE_DIR             + example/
      + PROJECT_TESTING_DIR             + test/
          + TESTING_INPUT_DIR               + data/
          + TESTING_EXPECTED_DIR            + expected/
          + TESTING_SYSTEM_DIR              + system/
          + TESTING_UNIT_DIR                + unit/


  Description
  -----------

  - PROJECT_SOURCE_DIR     Root directory of source tree.
  - PROJECT_CONFIG_DIR     BASIS configuration files.
  - PROJECT_CODE_DIR       All source code files.
  - PROJECT_ETC_DIR        Software configuration files including
                           auxiliary data such as medical atlases.
  - PROJECT_EXAMPLE_DIR    Example application of software.
  - PROJECT_DOC_DIR        Software documentation.
  - PROJECT_TESTING_DIR    Implementation of tests and test data.
  - TESTING_INPUT_DIR      Test input data.
  - TESTING_EXPECTED_DIR   Testing baseline data, for example, images
                           of representative slices which are compared
                           to same slices of test output.
  - TESTING_SYSTEM_DIR     Source code of system tests.
  - TESTING_UNIT_DIR       Source code of unit tests.


  Common Files
  ------------

  - CMakeLists.txt         Build configuration files.
  - CTestConfig.cmake      Dashboard configuration file.
  - CTestCustom.cmake.in   Test configuration file.
  - AUTHORS                Lists names of people who actively contributed to the
                           the software package. The contributions of other
                           kind shall be acknowledged in the readme file.
  - LICENSE                Licensing information.
  - README                 Root documentation file (readme file).
  - INSTALL                Build and installation instructions.



BUILD TREE
==========

  Even though CMake supports in-source tree builds, BASIS permits this and
  requires that the build tree is outside the source tree. Only the files in
  the source tree are considered of importance.

  In the following, only the directories which do not reflect the source
  tree are considered as these directories are created and populated by
  CMake itself.


  Filesystem Hierarchy
  --------------------

  - PROJECT_BINARY_DIR              - <build>/
      + RUNTIME_OUTPUT_DIRECTORY        + bin/
      + LIBRARY_OUTPUT_DIRECTORY        + bin/
      + ARCHIVE_OUTPUT_DIRECTORY        + lib/
      + TESTING_RUNTIME_DIR             + Testing/bin/
      + TESTING_OUTPUT_DIR              + Testing/Temporary/output


  Description
  -----------

  - RUNTIME_OUTPUT_DIRECTORY   All executables and shared libraries (Windows).
  - LIBRARY_OUTPUT_DIRECTORY   Shared libraries (UNIX).
  - ARCHIVE_OUTPUT_DIRECTORY   Static libraries and import libraries (Windows).
  - TESTING_RUNTIME_DIR        Directory of test executables.
  - TESTING_OUTPUT_DIR         Directory used for test results.



INSTALL TREE
============

  When installing the software package by building either the install target,
  extracting a binary distribution package, or running an installer of a binary
  distribution package, the following directory strucure is used.


  Options
  -------

  - INSTALL_PREFIX   Installation directories prefix (<prefix>).
                     Defaults to "/usr/local" on UNIX-based systems
                     and "C:\Program Files\SBIA" on Windows.

                     Note that this variable is initialized by the value
                     of CMAKE_INSTALL_PREFIX, the default variable used
                     by CMake. Once it is initialized, the value of CMake's
                     CMAKE_INSTALL_PREFIX variable is forced to always
                     reflect the value of this variable.

  - INSTALL_SINFIX   Installation directories suffix or infix, respectively
                     (<sinfix>). Defaults to "@PROJECT_NAME_LOWER@".

  In order to install different versions of a software, choose an installation
  prefix that includes the package name and software version, for example,
  "/usr/local/@PROJECT_NAME_LOWER@-@PROJECT_VERSION@". In this case,
  INSTALL_SINFIX should be set to an empty string.


  Filesystem Hierarchy
  --------------------

  Based on above options, the installation directories are set as follows:

  - INSTALL_PREFIX                 - <prefix>/
      + INSTALL_RUNTIME_DIR            + bin/<sinfix>/
      + INSTALL_LIBEXEC_DIR            + lib/<sinfix>/
      + INSTALL_LIBRARY_DIR            + lib/<sinfix>/
      + INSTALL_ARCHIVE_DIR            + lib/<sinfix>/
      + INSTALL_INCLUDE_DIR            + include/sbia/<project>/
      + INSTALL_ETC_DIR                + etc/<sinfix>/
      + INSTALL_SHARE_DIR              + share/
          + INSTALL_CONFIG_DIR             + cmake/
          + INSTALL_DOC_DIR                + doc/<sinfix>
          + INSTALL_EXAMPLE_DIR            + example/<sinfix>/
          + INSTALL_MAN_DIR                + man/<sinfix>/

  Note that the include directory by intention always ends in "sbia/<project>",
  such that header files of a project have to be included as follows:

    #include <sbia/<project>/some-header.h>

  Hence, the include directory which is added to the search path has to be set
  to <prefix>/include/. 


  Description
  -----------

  - INSTALL_RUNTIME_DIR   Main executables and shared libraries on Windows.
  - INSTALL_LIBEXEC_DIR   Utility executables which are called by other
                          executables only.
  - INSTALL_LIBRARY_DIR   Shared libraries on UNIX and module libraries.
  - INSTALL_ARCHIVE_DIR   Static and import libraries on Windows.
  - INSTALL_INCLUDE_DIR   Public header files of libraries.
  - INSTALL_ETC_DIR       Software configuration files such as medical atlases
                          and pre-computed lookup tables.
  - INSTALL_DOC_DIR       Readme file, licensing information, authors file,
                          and other documentation files including the user
                          manual are installed here.
  - INSTALL_EXAMPLE_DIR   All data required to follow example as described
                          in User Manual.
  - INSTALL_MAN_DIR       Man pages are installed to this directory.
      + man1/             Man pages of main executables.
      + man3/             Man pages of libraries.
  - INSTALL_CONFIG_DIR    CMake configuration files, i.e., <Project>Config.cmake
                          et al. files are installed here.
  - INSTALL_SHARE_DIR     Other shared package files.


  Links
  -----

  On UNIX-based systems, the following symbolic links are created when the option
  INSTALL_LINKS is set to TRUE. Note that the link creation will fail if a
  file or directory with the links' name already exists.  This is desired and
  will simply be reported to the user. If a symbolic name of the same name
  already exists, it is replaced however.

  - If INSTALL_RUNTIME_DIR != "<prefix>/bin" create symbolic links
    "<prefix>/bin/<exec>" -> "INSTALL_RUNTIME_DIR/<exec>".

  - If INSTALL_MAN_DIR != "<prefix>/share/man" create symbolic links
    "<prefix>/share/man/man?/<name>.?" -> "INSTALL_MAN_DIR/man?/<name>.?".

