.. meta::
    :description: This article details the project modularization implemented by
                  BASIS, a build system and software implementation standard.

======================
Project Modularization
======================

Project modularization is a technique that aims to maximize 
code reusability, allowing components to be split up as
independent modules that can be shared with other projects,
while only building and packaging the components that are
really needed.

**Top Level Project**

A top level project is a project that is split into separate 
independent subprojects, and each of those subprojects are 
referred to as modules. A top level project will often have 
no source files of its own, simply serving as a lightweight 
container for its modules.

**Module**

A module is a completely independent BASIS project with its
own dependencies that resides in the ``modules/`` of a
Top Level Project. Each module will often be a separate 
repository from the top level project that is designed 
to be shared with other projects.

.. seealso:: See :ref:`HowToModularizeAProject` for usage instructions and :doc:`template` for a reference implementation.

Filesystem Layout
=================

By default each module is placed in its own ``modules/<module_name>`` 
subdirectory, but this can be configured in ``config/Settings.cmake`` by 
modifying the ``PROJECT_MODULES_DIR`` variable. More details can be found in 
the :doc:`/standard/fhs`.

The Top Level project often excludes the ``src/`` subdirectory,
and instead includes the ``modules/`` directory where the 
project's modules reside.

Dependency Requirements
=======================

There are several features and limitations when one top level or subproject uses code from another.

 - Modules may depend on each other. 
 - Each module of a top level project may depend on other modules of the same project, or external projects and packages. 
 - Only one level of submodules are allowed in a top level project
 - An external project can also be another top-level project with its own modules.

.. _ModuleCMakeVariables:

Module CMake Variables
======================

CMake variables can be modified with the ``ccmake`` command. :doc:`/howto/cmake-options` describes other important CMake options.

.. The tabularcolumns directive is required to help with formatting the table properly
   in case of LaTeX (PDF) output.

.. tabularcolumns:: |p{3cm}|p{12.5cm}|

=========================   =============================================================================================
    CMake Variable                           Description
=========================   =============================================================================================
``MODULE_<module>``         Builds the module named ``<module>`` when set to ``ON`` and excludes it when ``OFF``.
                            It is automatically set to ``ON`` if it is required by another module that is ``ON``.
``BUILD_ALL_MODULES``       Global switch enabling the build of all modules. Overrides all ``MODULE_<module>`` variables.
``PROJECT_IS_MODULE``       Specifies if the current project is a module of another project.
=========================   =============================================================================================

It is recommended that customized defaults for these variables be set in :ref:`config/Settings.cmake <Settings>`.

Implementation
==============

The modularization is mainly implemented with the following heirarchy presented 
in the same manner as a stack trace with the top function being the last function
called:


    - :apidoc:`ProjectTools.cmake`     - :apidoc:`basis_project_modules()`
    - :apidoc:`ProjectTools.cmake`     - :apidoc:`basis_project_impl()`
    - :apidoc:`BasisProject.cmake`     - script file that is executed directly
    - ``CMakeLists.txt``               - root file of any CMake project

The script then takes the following steps:

1. The :apidoc:`basis_project_modules()` function searches the subdirectories in the 
   ``modules/`` directory for the presence of the :apidoc:`BasisProject.cmake` file. 
2. It then loads this file, to retrieve the meta-data of each module such as its name 
   and dependencies from :apidoc:`BasisProject.cmake`. 
3. It then adds for each module a ``MODULE_<module>`` option to the build configuration in an order
   that obeys the dependencies defined in :apidoc:`BasisProject.cmake`. 
    - When this option is set to ``OFF``, the module is excluded from both the project 
      build and any package generated by CPack_. 
    - Otherwise, if it is set to ``ON``, the module is build as part of the top-level project.
    - If one module requires another, the required module will automatically be set to ``ON``.
    - All ``MODULE_<module>`` options are superceded by the ``BUILD_ALL_MODULES`` when it is set to ``ON``.

Besides adding these options, the :apidoc:`basis_project_modules()`
function ensures that the modules are configured with the right dependencies
so that the generated build files will compile them correctly. 

It also helps the :apidoc:`basis_find_package()` function find the other modules' package 
configuration files, which are either generated from the default
:apidoc:`Config.cmake.in <BASISConfig.cmake>` file or a corresponding file found
in the ``config/`` directory of each module.

The other BASIS CMake functions may also change their actual behaviour
depending on the ``PROJECT_IS_MODULE`` variable, which specifies whether the
project that is currently being configured is a module of another project
(i.e., ``PROJECT_IS_MODULE`` is ``TRUE``) or a top-level project
(i.e., ``PROJECT_IS_MODULE`` is ``FALSE``).

Origin
------

The modularization concepts and part of the CMake implementation
are from the `ITK 4`_ project. See the Wiki of this project for 
details on `ITK 4 Modularization`_.

.. todo::

   Add reference to documentation of superbuild approach, which is yet not
   implemented as part of BASIS

.. 
.. 
.. Future Work
.. ===========
.. 
.. **TODO: super-build is not yet implemented as part of BASIS!**
.. 
.. modules are separate from the superproject/subproject relationship
.. used in a superbuild approach
.. .
.. 
.. Once the CMake BASIS package is installed it can be used to build other
.. BASIS projects. Alternatively, if the package is not found, each BASIS project
.. which is built on top of BASIS and implements the super-build feature,
.. retrieves and builds a local copy using CMake's :apidoc:`ExternalProject.cmake`
.. module This super-build methodology, which is becoming popular in
.. the CMake community could be utilized by BASIS to not only ease the
.. development and maintenance of separately managed software projects, but also
.. enable the fusion of these more or less independently developed software
.. packages into so-called superprojects. In this context, the separately managed
.. software packages are considered components of the superproject.
.. 
.. Besides the super-build of BASIS projects, BASIS helps create a tighter 
.. coupling between software components. The top-level project (i.e., the 
.. superproject) could contain other BASIS projects as modules, and these
.. modules define the dependencies to other modules of the project. When the
.. superproject is configured, a subset of these modules can be selected and only
.. these will be build and installed. This type of modularization closely follows
.. the [modularization approach of the ITK 4 project][10].


.. _ITK 4: http://www.itk.org/Wiki/ITK_Release_4
.. _ITK 4 Modularization: http://www.vtk.org/Wiki/ITK_Release_4/Modularization
.. _CPack: http://www.cmake.org/cmake/help/v2.8.8/cpack.html
