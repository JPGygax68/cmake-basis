/**
 * @file  ProjectTemplate.dox
 * @brief Documentation of software project template.
 *
 * Copyright (c) 2011 University of Pennsylvania. All rights reserved.<br />
 * See http://www.rad.upenn.edu/sbia/software/license.html or COPYING file.
 *
 * Contact: SBIA Group <sbia-software at uphs.upenn.edu>
 */

/**
@page ProjectTemplate Software Project Template

@section ProjectTemplateIntro Introduction

The starting point for every project is to setup a directory structure
which helps to organize the project files. Moreover, in order to
configure the build system using CMake, CMakeLists.txt files have to
be added to the project with proper CMake code to add build targets
with the corresponding build flags to the build system. In order to
unify the structure of projects following common practices and further
to simply take off the burder from the developer on setting up a
basic project, BASIS provides a so-called (Software) Project Template.
Please refer to the @ref FilesystemHierarchyStandard for a definition
of the common project directory structure. This directory structure is
part of the standard and thus required by BASIS. The project template
therefore follows this standard regarding the directory structure.
The further purpose of the software project template is to provide
template files concerned with the configuration of the build, testing,
installation, and packaging. In the following, the prupose of each
template file is summarized.

@subsection RequiredProjectTemplateFiles Required Project Files

The following files have to be part of any project which follows the
@ref FilesystemHierarchyStandard.
These are thus the minimal set of project files which need to be selected
when instantiating a new software project. Besides these files, a project
will have either a <tt>src/</tt> directory or a <tt>modules/</tt> directory,
or both of them. See below for a description of these directories.

<table>
  <tr>
    <th style="text-align: left">Relative Path</th>
    <th style="text-align: left">Description</th>
  </tr>
  <tr>
    <td style="vertical-align: top; padding-right: 1em">
      <b><tt>README.txt</tt></b>
    </td>
    <td>
      This is the main (root) documentation file. Every user is
      supposed to first read this file, which in turn will refer
      them to the more extensive documentation. This file in
      particular introduces the software package shortly, including a
      summary of the package files. Moreover, it refers to the
      <tt>INSTALL.txt</tt> and <tt>COPYING.txt</tt> files for details on
      the build and installation and software license, respectively.
      Furthermore, references to scientific articles related to the
      software package shall be included in this file.
    </td>
  </tr>
  <tr>
    <td style="vertical-align: top; padding-right: 1em">
      <b><tt>AUTHORS.txt</tt></b>
    </td>
    <td>
      Names the authors of the software package. Moreover, people who
      notably contributed to the software directly shall be named
      here as well, even if they did not actually edit any project
      file. Others, who mostly contributed indirectly should be
      named in the <tt>README.txt</tt> file instead.
    </td>
  </tr>
  <tr>
    <td style="vertical-align: top; padding-right: 1em">
      <b><tt>COPYING.txt</tt></b>
    </td>
    <td>
      Contains copyright and license information. If some files
      of the project were copied from other sources, the copyright
      and license of these files shall be included in this file
      as well. It is important to clearly state which copyright
      and license text corresponds to which project file.
    </td>
  </tr>
  <tr>
    <td style="vertical-align: top; padding-right: 1em">
      <b><tt>INSTALL.txt</tt></b>
    </td>
    <td>
      Contains build and installation instructions. As the build
      of all projects which follow BASIS is very similar, this
      file shall only describe additional steps/CMake variables
      which are not described in the <tt>INSTALL-basis.txt</tt> document.
      The <tt>INSTALL-basis.txt</tt> file is part of the BASIS
      installation, and an HTML version is available at
      http://www.rad.upenn.edu/sbia/software/installation.html
    </td>
  </tr>
  <tr>
    <td style="vertical-align: top; padding-right: 1em">
      <b><tt>BasisProject.cmake</tt></b>
    </td>
    <td>
      This file contains the meta-data of the project such as
      the project name, its brief description which is used for
      the packaging, and the dependencies. Note that additional
      dependencies may be given by the CMake code in the
      config/Depends.cmake file, if such file is present.
      This file mainly consists of a call to the basis_project()
      command. If the project is a module of another project,
      this file is read by the top-level project to be able to
      identify its modules and the dependencies among them.
    </td>
  </tr>
  <tr>
    <td style="vertical-align: top; padding-right: 1em">
      <b><tt>CMakeLists.txt</tt></b>
    </td>
    <td>
      The root CMake configuration file. Do not edit this file.
    </td>
  </tr>
</table>

@subsection CommonProjectTemplateFiles Common Project Files

<table>
  <tr>
    <th style="text-align: left">Relative Path</th>
    <th style="text-align: left">Description</th>
  </tr>
  <tr>
    <td style="vertical-align: top; padding-right: 1em">
      <b><tt>CTestConfig.cmake</tt></b>
    </td>
    <td>
      The CTest configuration file. This file in particular
      specifies the URL of the CDash dashboard of the project
      where test results should be submitted to.
    </td>
  </tr>
  <tr>
    <td style="vertical-align: top; padding-right: 1em">
      <b><tt>config/Settings.cmake</tt></b>
    </td>
    <td>
      This is the main CMake script file used to configure the build
      system, and BASIS in particular. Any CMake code required to configure
      the build system, such as adding common compiler flags, or adding
      common definitions which have not yet been added by the generic code
      used by BASIS to utilize a found dependency should go into this file.
    </td>
  </tr>
  <tr>
    <td style="vertical-align: top; padding-right: 1em">
      <b><tt>config/ScriptConfig.cmake.in</tt></b>
    </td>
    <td>
      Please see the documentation on the @ref BuildOfScriptTargets for details
      on how this @ref ScriptConfig "script configuration" file is used.
    </td>
  </tr>
  <tr>
    <td style="vertical-align: top; padding-right: 1em">
      <b><tt>data/CMakeLists.txt</tt></b>
    </td>
    <td>
      This CMake configuration file contains code to simply install every file
      and directory from the source tree into the @c INSTALL_DATA_DIR directory
      of the installation tree.
    </td>
  </tr>
  <tr>
    <td style="vertical-align: top; padding-right: 1em">
      <b><tt>doc/CMakeLists.txt</tt></b>
    </td>
    <td>
      This CMake configuration file adds rules to build the documentation
      form, for example, the in-source comments using Doxygen. Moreover,
      for every documentation file, such as the user manual, the
      basis_add_doc() command has to be added to this file.
    </td>
  </tr>
  <tr>
    <td style="vertical-align: top; padding-right: 1em">
      <b><tt>example/CMakeLists.txt</tt></b>
    </td>
    <td>
      This CMake configuration file contains by default code to install every
      file and directory from the source tree into the @c INSTALL_EXAMPLE_DIR
      directory of the installation tree. It may be modified to configure
      and/or build certain files of the example if applicable or required.
    </td>
  </tr>
  <tr>
    <td style="vertical-align: top; padding-right: 1em">
      <b><tt>src/CMakeLists.txt</tt></b>
    </td>
    <td>
      The definition of all software build targets shall be added to this
      file, using the commands basis_add_library() to add a shared, static,
      or module library, which can also be a module written in a scripting
      language, and basis_add_executable() to add an executable target,
      which can be either a binary or a script file. If appropriate,
      the source code files may be further organized in subdirectories
      of the <tt>src/</tt> directory, in which case either separate
      <tt>CMakeLists.txt</tt> files can be used for each subdirectory,
      or yet all targets are added to the <tt>src/CMakeLists.txt</tt>
      file using relative paths which include the subdirectory in which
      the source files are found. In general, if the number of source
      code files is low, i.e., close to or below 20, no subdirectory
      structure is required.
    </td>
  </tr>
  <tr>
    <td style="vertical-align: top; padding-right: 1em">
      <b><tt>test/CMakeLists.txt</tt></b>
    </td>
    <td>
      Tests are added to this build configuration file using the
      basis_add_test() command. The test input files are usually put
      in a subdirectory named <tt>test/input/</tt>, while the baseline
      data of the expected test output is stored inside a subdirectory
      named <tt>test/baseline/</tt>. Generally, however, the
      @ref FilesystemHierarchyStandard of BASIS does not dictate how
      the test sources, input, and baseline data are organized inside
      the <tt>test/</tt> directory.
    </td>
  </tr>
  <tr>
    <td style="vertical-align: top; padding-right: 1em">
      <b><tt>modules/</tt></b>
    </td>
    <td>
      If the project files are organized into conceptual cohesive groups,
      similar to the modularization goal of the ITK 4, this directory
      contains these conceptual modules of the project. The files of each
      module reside in a subdirectory named after the module. Note that each
      module itself is a project derived from this project template.
    <td>
  </tr>
</table>

@subsection AdvancedProjectTemplateFiles Advanced Project Files

The customization of the following files is usually not required, and hence,
in most cases, most of these files need not to be part of a project.

<table>
  <tr>
    <th style="text-align: left">Relative Path</th>
    <th style="text-align: left">Description</th>
  </tr>
  <tr>
    <td style="vertical-align: top; padding-right: 1em">
      <b><tt>config/Components.cmake</tt></b>
    </td>
    <td>
      Contains CMake code to configure the components used by
      component-based installers. Currently, component-based installers
      are not very well supported by BASIS, and hence this file
      is mostly unused and is yet subject to change.
    </td>
  </tr>
  <tr>
    <td style="vertical-align: top; padding-right: 1em">
      <b><tt>config/Config.cmake.in</tt></b>
    </td>
    <td>
      This is the template of the package configuration file.
      When the project is configured/installed using CMake,
      a configured version of this file is copied to the build
      or installation tree, respectively, where the information
      about the package configuration is substituted as appropriate
      for the actual build/installation of the package. For example,
      the configured file contains the absolute path to the
      installed public header files such that other packages can
      easily add this path to their include search path.
      The <a href="http://www.cmake.org/cmake/help/cmake-2-8-docs.html#command:find_package">find_package()</a>
      command of CMake, in particular, will look for this file and
      automatically import the CMake settings when this software
      package was found. For many projects, the default package
      configuration file of BASIS which is used if this file
      is missing in the project's <tt>config/</tt> directory,
      is sufficient and thus this file is often not required.
    </td>
  </tr>
  <tr>
    <td style="vertical-align: top; padding-right: 1em">
      <b><tt>config/ConfigSettings.cmake</tt></b>
    </td>
    <td>
      This file sets CMake variables for use in the
      <tt>config/Config.cmake.in</tt> file. As the package configuration
      for the final installation differs from the one of the build tree,
      this file has to contain CMake code to set the variables used in the
      <tt>config/Config.cmake.in</tt> file differently depending on whether
      the variables are being set for use within the build tree or the
      installation tree. This file only needs to be present if the project
      uses a custom <tt>config/Config.cmake.in</tt> file, which in turn
      contains CMake variables whose value differs between build tree and
      installation.
    </td>
  </tr>
  <tr>
    <td style="vertical-align: top; padding-right: 1em">
      <b><tt>config/ConfigUse.cmake.in</tt></b>
    </td>
    <td>
      This file is provided for convenience of the user of the
      software package. It contains CMake code which uses the
      variables set by the package configuration file (i.e.,
      the file generated from the file <tt>config/Config.cmake.in</tt>)
      in order to configure the build system of packages which
      use this software packages properly such that they can
      make use of this software. For example, the package
      configuration sets a variable <tt>&lt;Pkg&gt;_INCLUDE_DIRS</tt>
      to a list of include directories which have to be added
      to the include search path. Then, this file would contain
      CMake instructions such as the line
      <tt>include_directories(${&lt;Pkg&gt;_INCLUDE_DIRS})</tt>
      to actually add these directories to the search path for
      header files.
    </td>
  </tr>
  <tr>
    <td style="vertical-align: top; padding-right: 1em">
      <b><tt>config/ConfigVersion.cmake.in</tt></b>
    </td>
    <td>
      This file accompanies the package configuration file
      generated from the <tt>config/Config.cmake.in</tt> file. It is used
      by CMake's
      <a href="http://www.cmake.org/cmake/help/cmake-2-8-docs.html#command:find_package">find_package()</a>
      command to identify versions of this software package which
      are compatible with the version requested by the dependent project.
      This file needs almost never be customized by a project
      and thus should not be included in a project's source tree.
    </td>
  </tr>
  <tr>
    <td style="vertical-align: top; padding-right: 1em">
      <b><tt>config/Depends.cmake</tt></b>
    </td>
    <td>
      If the generic code used by BASIS is not sufficient to resolve the
      dependencies on external packages properly, add this file to your
      project. It can contain CMake code to find and make use of external
      software packages.
    </td>
  </tr>
  <tr>
    <td style="vertical-align: top; padding-right: 1em">
      <b><tt>config/Package.cmake</tt></b>
    </td>
    <td>
      Configures CPack, the package generator of CMake.
      The packaging of software using CPack is currently not completely
      supported by BASIS. This template file is yet subject to change.
    </td>
  </tr>
  <tr>
    <td style="vertical-align: top; padding-right: 1em">
      <b><tt>CTestCustom.cmake.in</tt></b>
    </td>
    <td>
      This file defines CTest variables which
      <a href="http://www.vtk.org/Wiki/CMake_Testing_With_CTest#Customizing_CTest">customize CTest</a>.
    </td>
  </tr>
</table>
*/
