/**
 * @file  HowToCreateOrModifyAProject.dox
 * @brief How to create or modify a BASIS project.
 *
 * Copyright (c) 2012, University of Pennsylvania. All rights reserved.<br />
 * See http://www.rad.upenn.edu/sbia/software/license.html or COPYING file.
 *
 * Contact: SBIA Group <sbia-software at uphs.upenn.edu>
 */

/**
@page HowToCreateOrModifyAProject How to Create/Modify a Project

@section HowToCreateOrModifyAProjectIntro Introduction

This how-to guide introduces the <tt>basisproject</tt> command-line tool which
is installed as part of BASIS. This tool, also simply referred to as "project tool",
is used to create a new project based on BASIS or to modify a project already
previously created using this tool. The creation of a new project based on BASIS
is occasionally also referred to as instantiating the BASIS project template.

For a detailed description and overview of the available command options,
please refer to the output of the following commands:

@code
basisproject --help
@endcode

@section HowToCreateAProject How to Create a New Project

The fastest way to create a new project is to call the project tool with the name
of the new project and a brief project description as arguments.

@code
basisproject --name MyProject --description "This is a brief description of the project."
@endcode

This will create a subdirectory called "MyProject" under the current working directory
and populate it with the standard project directory structure and BASIS configuration.
No CMake commands to resolve dependencies to other software packages will be added.
These can be added later either manually or as described @HowToModifyAProject "below".
However, if you know already that your project will depend, for example, on
<a href="http://www.itk.org">ITK</a> and optionally make use of
<a href="http://www.vtk.org">VTK</a> if available, you can specify these dependencies
when creating the project using the <tt>--use</tt> or <tt>--useopt</tt> option, respectivley.

@code
basisproject --name MyProject --description "This is the brief description of the project named MyProject." --use ITK --useopt VTK
@endcode

The <tt>basisproject</tt> tool will in turn modify the <tt>BasisProject.cmake</tt>
file to add the named packages to the corresponding lists of dependencies.
Note that in order for the project tool to be able to find the correct place
where to insert the new dependencies, the <tt>#&amp;&lt;dependency&gt;</tt> et al.
placeholders have to be present.

@section HowToModifyAProject How to Modify an Existing Project

The project tool allows a detailed selection of the features included in the project
template for a particular BASIS project. Which of these features are needed will
often not be known during the creation of the project, but change during the work on
the project. Therefore, an existing BASIS project which was created as
@ref HowToCreateAProject "described" can be modified using the project tool
to add or remove certain project features and to conveniently add CMake commands to
resolve further dependencies on other software packages. How this is done is
described in the following.

@subsection HowToModifyAProjectNotes General Notes

The two project attributes which cannot be modified using the project tool are the
project name and its description. These attributes need to be modified manually by
editing the project files. Be aware that changing the project name may require the
modification of several project files including source files. Furthermore, the
project name is used to identify the project within the lab and possibly even externally.
Therefore, it should be fixed as early as possible. In order to change the project
description, simply edit the root <tt>BasisProject.cmake</tt> file which you can find
in the top directory of the source tree. Specifically, the argument for the
<tt>DESCRIPTION</tt> option of the basis_project() function.

Hence, in order to modify a project which was previously created using
the project tool, the options <tt>--name</tt> and <tt>--description</tt>
cannot be used. Instead, use the <tt>--root</tt> option to specify the
root source directory of the project you want to modify.

@subsection HowToAddFeaturesToProject Adding Features

By features, we refer here to the set of directories and contained CMake/BASIS
configuration files for which template files exist in the BASIS project template.
For a list of available project features, please have a look at the help output of
the project tool. You can either select a pre-configured project template consisting
of a certain set of directories and configuration files and optionally modify these
sets by removing features from them and/or adding other features, or you can simply
remove and/or add selected features only from/to the current set of directories and
configuration files which were previously added to the project, for example, during
its first creation.

For example, if you created a project using the standard project template
(i.e., by supplying no particular option or the option <tt>--standard</tt> during
the project creation), but your software requires auxiliary data such as a
pre-computed lookup table or a medical image atlas, you can add the <tt>data/</tt>
directory in which these auxiliary files should be kept in the source tree using
the command

@code
basisproject --root <source> --data
@endcode

As another example, if you want to extend the default script configuration file
which is used to configure the build of scripts written in Python, Perl, BASH,
or any other scripting language (even though not currently supported by BASIS
will it likely still be able to "build" these), use the command

@code
basisproject --root <source> --config-script
@endcode

@subsection HowToRemoveFeaturesFromProject Removing Features

In order to remove the <tt>conf/Settings.cmake</tt> file and the <tt>example/</tt>
directory tree, run the command

@code
basisproject --root <source> --noconfig-settings --noexample
@endcode

If any of the project files which were initially added during the project creation
differ from the original template file, the removal of such files will fail with
an error message. If you are certain that the changes are not important and still
want to remove those files from the project, use the <tt>--force</tt> option.
Moreover, if a directory is not empty, it will only be removed if the <tt>--force</tt>
option is given. Note that if the directory contains a <tt>.svn</tt> or
<tt>.git</tt> subdirectory, it is non-empty and hence this option is required.
Before, you should be certain which directories would be removed and if their content
is no longer needed. Thus, run any command first without the <tt>--force</tt> option,
and only if it failed, consider to add this option.

@subsection HowToAddDependencies Adding Dependencies

A dependency is either a program required by your software at runtime or an external
software package such as the nifticlib or ITK. The project tool can be used to add
the names of packages your project depends on to the lists of dependencies which are
given as arguments to the basis_project() command. For each named package in this
list, the basis_find_package() command is called to look for a corresponding
package installation. In order to understand how CMake searches for external software
packages, please read the
<a href="http://www.cmake.org/cmake/help/cmake-2-8-docs.html#command:find_package">documentation of CMake's find_package()</a>.

The BASIS package provides so-called Find modules (e.g., <tt>FindMATLAB.cmake</tt> or
<tt>FindNiftiCLib.cmake</tt>) for external software packages which are commonly used
at SBIA and not (yet) part of CMake. If you have problems resolving the dependency
on an external software package required by your software due to a missing corresponding
Find module, please contact the manager of the BASIS project and state your interest
in a support by BASIS for this particular software package.

As an example on how to add another dependency to an existing BASIS project,
consider the following scenario. We created a project without any dependency and now
notice that we would like to make use of ITK in our implementation.
Thus, in order to add CMake code to the build configuration to resolve the dependency
on ITK, which also includes the so-called Use file of ITK (<tt>UseITK.cmake</tt>)
to import its build configuration, run the command

@code
basisproject --root <source> --use ITK
@endcode

If your project can optionally make use of the features of a certain external software
package, but will also built and run without this package being installed, you can use
the <tt>--useopt</tt> option to exploit CMake code which tries to find the software package,
but will not cause CMake to fail if the package was not found. In this case, you will
need to consider the <tt>&lt;Package&gt;_FOUND</tt> variable in order to decide whether to
make use of the software package or not. Note that the package name (<tt>&lt;Package&gt;</tt>)
is case sensitive and that the case must match the one of the first argument of
basis_find_package().

For example, let's assume your software can optionally make use of CUDA.
Therefore, as CMake includes already a <tt>FindCUDA.cmake</tt> module, we can run the
following command in order to have CMake look for an installation of the CUDA libraries.

@code
basisproject --root <source> --useopt CUDA
@endcode

If this search was successful, the CMake variable <tt>CUDA_FOUND</tt> will be TRUE,
and FALSE otherwise.

Another example of a dependency on an external package is the compilation of
MATLAB source files using the MATLAB Compiler (MCC). In this case, you need to
add a dependency on the MATLAB package. Please note that it is important to capitalize
the package name and not to use Matlab as this would refer to the
<tt>FindMatlab.cmake</tt> module included with CMake. The <tt>FindMATLAB.cmake</tt>
module which we are using is included with BASIS. It improves the way CMake looks for
a MATLAB installation and furthermore looks for executables required by BASIS,
such as in particular <tt>matlab</tt>, <tt>mcc</tt>, and <tt>mex</tt>.
Use the following command to add a dependency on MATLAB:

@code
basisproject --root <source> --use MATLAB
@endcode

@subsection HowToRemoveDependencies Removing Dependencies

The project tool does at the moment not support the removal of previously added
dependencies. Therefore, please edit the <tt>BasisProject.cmake</tt> file manually
and simply remove all CMake code referring to the particular package you do no
longer require or use.

*/
