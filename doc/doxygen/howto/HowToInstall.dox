/**
 * @file  HowToInstall.dox
 * @brief How to build and install software which is based on BASIS.
 *
 * Copyright (c) 2011, 2012 University of Pennsylvania. All rights reserved.<br />
 * See http://www.rad.upenn.edu/sbia/software/license.html or COPYING file.
 *
 * Contact: SBIA Group <sbia-software at uphs.upenn.edu>
 */

/**
@page HowToInstall How to Build and Install a Package

@section HowToInstallIntro Introduction

This document describes the common procedure to build and install any
software developed at and distributed by SBIA. In particular, software built
on top of BASIS, a meta-project which defines the Build system And Software
Implementation Standard established in the fall of 2011.
See the @ref Introduction for details on this meta-project.

If you obtained a binary distribution package for a supported platform,
please follow the installation instructions corresponding to your operating
system. The build step can be omitted in this case.

In case of problems to build, install, or use the software, please contact
the SBIA Group at the University of Pennsylvania, PA.

@note The commands given in this guide have to be entered in a terminal, in particular,
      the <a href="http://www.gnu.org/software/bash/">Bourne Again Shell (BASH)</a>.
      If you are not using the BASH, see the documentation of your particular shell
      for information on how to perform these actions using this shell instead.

@section ObtainingTheSoftware Obtaining a Copy of The Software

Visit the <a href="http://www.rad.upenn.edu/sbia/software/index.html">SBIA homepage</a>
for an overview of publicly available software distribution packages. For each of these
packages, download links of the available distribution packages can be requested by
submitting <a href="http://www.rad.upenn.edu/sbia/software/request.php">this form</a>
with a valid email address. An email with the respective download links will be
sent to you automatically. If you do not receive an email within 24 hours, please
contact the SBIA Group at &lt;sbia-software at uphs.upenn.edu&gt;.

The file names of the distribution packages follow the convention
"<package>-<version>-<arch>.<ext>", where &lt;package&gt; is the name of the
package in lowercase letters, and &lt;version&gt; is the package version in the
format "<major>.<minor>.<patch>". The &lt;arch&gt; file name part specifies the
operating system and hardware architecture, i.e.,

<table>
  <tr>
    <th> @c &lt;arch&gt; </th>
    <th> Description </th>
  </tr>
  <tr>
    @tp @b linux-x86 @endtp
    <td>Linux, 32-bit</td>
  </tr>
  <tr>
    @tp @b linux-x86_64 @endtp
    <td>Linux, 64-bit</td>
  </tr>
  <tr>
    @tp @b darwin-i386 @endtp
    <td>Darwin x86 Intel</td>
  </tr>
  <tr>
    @tp @b darwin-ppc @endtp
    <td>Darwin Power PC</td>
  </tr>
  <tr>
    @tp @b win32 @endtp
    <td>Windows, 32-bit</td>
  </tr>
  <tr>
    @tp @b win64 @endtp
    <td>Windows, 64-bit</td>
  </tr>
  <tr>
    @tp @b source @endtp
    <td>Source files</td>
  </tr>
</table>

The file name extension &lt;ext&gt; is "tar.gz" for a compressed tarball,
"deb" for a Debian package, and "rpm" for a RPM package.

@section InstallingBinaryPackage Installing a Binary Distribution Package

@subsection InstallingDebianPackage Debian Package

This package can be installed on <a href="http://www.debian.org/">Debian</a>
and its derivatives such as <a href="http://www.ubuntu.com/">Ubuntu</a>
using, for example, the
<a href="http://en.wikipedia.org/wiki/Advanced_Packaging_Tool">Advanced Package Tool (APT)</a>.

To install the software package, run
@code
sudo apt-get install <package>-<version>-<arch>.deb
@endcode
in a terminal or use the package manager of your choice.

@subsection InstallingRPMPackage RPM Package

This package can be installed on <a href="http://www.redhat.com/products/enterprise-linux/">
Red Hat Enterprise Linux</a> and its derivatives such as <a href="http://www.centos.org/">
CentOS</a> and <a href="http://www.opensuse.org/en/">openSUSE</a> using,
for example, the
<a href="http://en.wikipedia.org/wiki/Yellowdog_Updater,_Modified">Yellowdog Updater, Modified (YUM)</a>.

To install the software package, run
@code
sudo yum install <package>-<version>-<arch>.deb
@endcode
in a terminal or use the RPM package manager of your choice.

@subsection InstallingMacOSBundle Mac OS

Bundles for <a href="http://www.apple.com/macosx/">Mac OS</a> might be available
for some software packages, but this is not supported by default. Please refer to
the INSTALL file which is located in the root directory of the respective software package.

@subsection InstallingWindows Windows

Currently, <a href="http://windows.microsoft.com/en-US/windows/home">Microsoft Windows</a>
is not supported as operating system. The software development at SBIA is based on Linux,
in particular <a href="http://www.centos.org/">CentOS</a>, and most software packages are
therefore dependent on a UNIX-based operating system. Thus, building and executing SBIA
software under Windows will most likely require an installation of
<a href="http://www.cygwin.com/">Cygwin</a> and the build of the software from
sources as described below. Some packages, on the other side, can be build on
Windows as well, using, for example, <a href="http://www.microsoft.com/visualstudio/en-us">
Microsoft Visual Studio</a> as build tool. The Visual Studio project files have
to be generated using CMake (see @ref HowToBuildTheSoftware).

As an alternative, consider the use of a Live Linux Distribution,
a dual boot installation of Linux or an installation of a Linux operating
system in a virtual machine using virtualization tools such as
<a href="http://www.virtualbox.org">VirtualBox</a> or proprietary virtualization
solutions available for your host operating system.

@section HowToBuildTheSoftware Building the Software From Sources

@subsection BasisBuildDependencies Build Dependencies

The build of the software packages developed at SBIA is based on
<a href="http://www.cmake.org/">CMake</a>,
a cross-platform, open-source build tool. This tool can be used to configure
the build system for various build tools which perform the actual build.
Because of the focus on Linux-based development at SBIA, build instructions
are based on <a href="http://www.gnu.org/">GNU Make</a> and the
<a href="http://gcc.gnu.org/">GNU Compiler Collection</a>.

<table>
  <tr>
    <th>Package</th>
    <th>Description</th>
  </tr>
  <tr>
    @tp <b>GNU Compiler Collection</b> @endtp
    <td>
      <table border=0>
        <tr>
          <td style="border:0;margin:0;padding:0">Web Site:</td>
          <td style="border:0;margin:0;padding:0">http://gcc.gnu.org/</td>
        </tr>
        <tr>
          <td style="border:0;margin:0;padding:0">Download:</td>
          <td style="border:0;margin:0;padding:0">http://gcc.gnu.org/install/</td>
        </tr>
        <tr>
          <td style="border:0;margin:0;padding:0">Ubuntu:</td>
          <td style="border:0;margin:0;padding:0">g++</td>
        </tr>
      </table>
    </td>
  </tr>
  <tr>
    @tp <b>GNU Make</b> @endtp
    <td>
      <table border=0>
        <tr>
          <td style="border:0;margin:0;padding:0">Web Site:</td>
          <td style="border:0;margin:0;padding:0">http://www.gnu.org/</td>
        </tr>
        <tr>
          <td style="border:0;margin:0;padding:0">Download:</td>
          <td style="border:0;margin:0;padding:0">http://www.gnu.org/software/software.html</td>
        </tr>
        <tr>
          <td style="border:0;margin:0;padding:0">Ubuntu:</td>
          <td style="border:0;margin:0;padding:0">(pre-installed)</td>
        </tr>
      </table>
    </td>
  </tr>
  <tr>
    @tp <b>CMake 2.8.4 or greater</b> @endtp
    <td>
      <table border=0>
        <tr>
          <td style="border:0;margin:0;padding:0">Web Site:</td>
          <td style="border:0;margin:0;padding:0">http://www.cmake.org/</td>
        </tr>
        <tr>
          <td style="border:0;margin:0;padding:0">Download:</td>
          <td style="border:0;margin:0;padding:0">http://www.cmake.org/cmake/resources/software.html</td>
        </tr>
        <tr>
          <td style="border:0;margin:0;padding:0">Ubuntu:</td>
          <td style="border:0;margin:0;padding:0">cmake, cmake-curses-gui</td>
        </tr>
      </table>
      <p>If your operating system such as certain Linux distributions do not
      support CMake 2.8.4 or greater yet, you need to download a more recent
      CMake version from the download page noted above and install it manually.
      Often this is easiest accomplished by using the CMake version supported
      by your platform itself to configure the build system for the more
      recent CMake version. In order to not conflict with the CMake installation
      of your particular Linux distribution, it is recommended to install your
      own build of CMake in a different directory or to at least remove the
      pre-installed CMake installation prior to installing the new version.</p>
    </td>
  </tr>
  <tr>
    @tp <b>BASIS</b> @endtp
    <td>
      <table border=0>
        <tr>
          <td style="border:0;margin:0;padding:0">Web Site:</td>
          <td style="border:0;margin:0;padding:0">http://www.rad.upenn.edu/sbia/software/doxygen/basis/trunk/html/</td>
        </tr>
        <tr>
          <td style="border:0;margin:0;padding:0">Download:</td>
          <td style="border:0;margin:0;padding:0">http://www.rad.upenn.edu/sbia/software/distributions/basis-current-source.tar.gz</td>
        </tr>
      </table>
      <p>The Build system And Software Implementation Standard (BASIS) among other
      features defines the project directory structure and provides CMake
      implementations to ease and standardize the build and installation.
      Refer to the INSTALL document of the software package you want to build
      and install for information on which particular BASIS version is required
      by this package.</p>
    </td>
  </tr>
</table>

@subsection BuildAndInstallation Build and Installation Instructions

In the following, we assume you obtained a copy of the source package as
compressed tarball (*.tar.gz). The name and version part of the package file
is referred to as BASH variable
@code
pkg=<package>-<version>
@endcode

@subsubsection ExtractSources 1. Extract the source tree

At first, extract the downloaded source package, e.g.,

@code
tar xzf $pkg-source.tar.gz ~
@endcode

This will extract the sources to a new diretory in your home directory
named "<package>-<version>-source".

@subsubsection ConfigureBuildTree 2. Configure the build tree

Create a directory for the build tree of the package and change to it, e.g.,
@code
mkdir ~/$pkg-build
cd ~/$pkg-build
@endcode

@note An in-source build, i.e., building the software within the source tree
      is not supported to force a clear separation of source and build tree.

To configure the build tree, run CMake's graphical tool @c ccmake
@code
ccmake ~/$pkg-source
@endcode

Press "c" to trigger the configuration step of CMake. Warnings can be ignored by
pressing "e". Once all CMake variables are configured properly, which might require
the repeated execution of CMake's configure step, press "g". This will generate the
configuration files for the selected build tool (i.e., GNU Make Makefiles in our case)
and exit CMake.

The common CMake variables which configure the build and installation are:

<table>
  <tr>
    <th>Option/Variable</th>
    <th>Descripion</th>
  </tr>
  <tr>
    @tp @b BASIS_DIR @endtp
    <td>
      Directory where the BASISConfig.cmake file is located.
    </td>
  </tr>
  <tr>
    @tp @b BUILD_DOCUMENTATION @endtp
    <td>
      Whether build and installation instructions for the documentation should
      be added. If OFF, the build configuration of the doc/ directory is skipped.
      Otherwise, the "doc" target is added which is used to build the documentation.
    </td>
  </tr>
  <tr>
    @tp @b BUILD_EXAMPLE @endtp
    <td>
      Whether the examples should be built (if required) and/or installed.
    </td>
  </tr>
  <tr>
    @tp @b BUILD_TESTING @endtp
    <td>
      Whether the testing tree should be built and system tests, i.e., tests
      that execute the installed programs and compare the outputs to the expected
      results should be installed (if done so by the software package).
    </td>
  </tr>
  <tr>
    @tp @b CMAKE_BUILD_TYPE @endtp
    <td>
      Specify the build configuration to build. If not set, the "Release"
      configuration will be build. Valid values are "Release", "Debug",
      "RelWithDebInfo", and "MinSizeRel".
    </td>
  </tr>
  <tr>
    @tp @b INSTALL_PREFIX @endtp
    <td>
      Prefix used for package installation (see step 5).
    </td>
  </tr>
  <tr>
    @tp @b INSTALL_SINFIX @endtp
    <td>
      Whether to use suffix/infix for installation (see step 5).
    </td>
  </tr>
  <tr>
    @tp <b>USE_&lt;Pkg&gt;</b> @endtp
    <td>
      If the software you are building has declared optional dependencies,
      i.e., software packages which it makes use of if available, for each
      such optional package a USE_&lt;Pkg&gt; option is added by BASIS if this
      package was found on your system. It can be set to OFF in order to disable
      the use of this optional dependency by this software.
    </td>
  </tr>
</table>

Note that INSTALL_PREFIX is initialized by the value of CMAKE_INSTALL_PREFIX,
the default used by CMake to specify the installation prefix. Then, the
value of CMAKE_INSTALL_PREFIX is forced to be identical to INSTALL_PREFIX,
effectively renaming CMAKE_INSTALL_PREFIX to INSTALL_PREFIX.

The advanced CMake settings are:

<table>
  <tr>
    <th>Option/Variable</th>
    <th>Descripion</th>
  </tr>
  <tr>
    @tp @b BASIS_ALL_DOC @endtp
    <td>
      Request the build of all documentation targets as part of the @c ALL target
      if @c BUILD_DOCUMENTATION is @c ON.
    </td>
  </tr>
  <tr>
    @tp @b BASIS_COMPILE_SCRIPTS @endtp
    <td>
      Enable compilation of Python modules. If this option is enabled, only the
      compiled .pyc files are installed.
    </td>
  </tr>
  <tr>
    @tp @b BASIS_DEBUG @endtp
    <td>
      Enable debugging messages during build configuration.
    </td>
  </tr>
  <tr>
    @tp @b BASIS_INSTALL_SINFIX @endtp
    <td>
      The sinfix to use for the installation if INSTALL_SINFIX
      is set to ON. Otherwise, this values is ignored.
    </td>
  </tr>
  <tr>
    @tp @b BASIS_MCC_FLAGS @endtp
    <td>
      Additional flags for MATLAB Compiler.
    </td>
  </tr>
  <tr>
    @tp @b BASIS_MCC_MATLAB_MODE @endtp
    <td>
      Whether to call the MATLAB Compiler in MATLAB mode. If ON, the MATLAB Compiler
      is called from within a MATLAB interpreter session, which results in the
      immediate release of the MATLAB Compiler license once the compilation is done.
      Otherwise, the license is reserved for a fixed amount of time (e.g. 30 min).
    </td>
  </tr>
  <tr>
    @tp @b BASIS_MCC_RETRY_ATTEMPTS @endtp
    <td>
      Number of times the compilation of MATLAB Compiler target is repeated in case
      of a license checkout error.
    </td>
  </tr>
  <tr>
    @tp @b BASIS_MCC_RETRY_DELAY @endtp
    <td>
      Delay in seconds between retries to build MATLAB Compiler targets after a
      license checkout error has occurred.
    </td>
  </tr>
  <tr>
    @tp @b BASIS_MCC_TIMEOUT @endtp
    <td>
      Timeout in seconds for the build of a MATLAB Compiler target. If the build
      of the target could not be finished within the specified time, the build is
      interrupted.
    </td>
  </tr>
  <tr>
    @tp @b BASIS_MEX_FLAGS @endtp
    <td>
      Additional flags for the MEX script.
    </td>
  </tr>
  <tr>
    @tp @b BASIS_MEX_TIMEOUT @endtp
    <td>
      Timeout in seconds for the build of MEX-files.
    </td>
  </tr>
  <tr>
    @tp @b BASIS_VERBOSE @endtp
    <td>
      Enable verbose messages during build configuration.
    </td>
  </tr>
  <tr>
    @tp @b BUILD_CHANGELOG @endtp
    <td>
      Request build of ChangeLog as part of the ALL target. Note that the ChangeLog
      is generated either from the Subversion history if the source tree is a SVN
      working copy, or from the Git history if it is a Git repository. Otherwise,
      the ChangeLog cannot be generated and this option is disabled again by BASIS.
      In case of Subversion, be aware that the generation of the ChangeLog takes
      several minutes and may require the input of user credentials for access to the
      Subversion repository. It is recommended to leave this option disabled and to
      build the "changelog" target separate from the rest of the software package
      instead (see step 4 below).
    </td>
  </tr>
  <tr>
    @tp @b INSTALL_APIDOC_DIR @endtp
    <td>
      Installation directory of the API documentation relative to the INSTALL_PREFIX.
    </td>
  </tr>
  <tr>
    @tp @b INSTALL_LINKS @endtp
    <td>
      Whether (symbolic) links should be created (see step 5).
    </td>
  </tr>
</table>

Please refer also to the package specific build instructions given in the
INSTALL file of the corresponding package which is located in the root directory
of the source tree or the 'doc' directory of the installation. In this document,
additional project specific CMake variables and options may be listed.

@note The @c ccmake tool also provides a brief description to each variable in the status bar.

@subsubsection BuildSoftware 3. Build the software

To build the package executables and libraries, run GNU Make in the root
directory of the configured build tree, i.e.,
@code
make
@endcode

@subsubsection BuildDocumentation 4. Build the documentation (optional)

In order to build the documentation, the BUILD_DOCUMENTATION variable
has to be set to ON. If not done before, this option can be enabled by
using the command:
@code
cmake -D BUILD_DOCUMENTATION=ON ~/$pkg-build
@endcode

Each software package provides different documentation. In general, however,
each software has a manual, which by default is being build by the "manual"
target, i.e.,
@code
make manual
@endcode
Often, the software manual is, however, included as PDF document in which case
it does not need to be build. The PDF file will simply be copied (and renamed)
during the installation.

If the software provides a software library for use in your software, the
API documentation can be build using the "apidoc" target, i.e.,
@code
make apidoc
@endcode
The advanced INSTALL_APIDOC_DIR CMake variable can be set to an absolute
path or a path relative to the INSTALL_PREFIX directory in order to modify
the installation directory for the API documentation which is generated
from the in-source comments. This can be useful, for example, to install
the documentation in the document directory of a web server.

Some software packages further generate a project web site from text files
marked up using a lightweight markup language such as reStructuredText.
This web site can be build using the "site" target, i.e.,
@code
make site
@endcode

For maintainers of the software, a developer's guide may be provided which
might be build by the "guide" target if not included as PDF document, i.e.,
@code
make guide
@endcode

If the source tree is a Subversion working copy and you have access to the
Subversion repository of the project or if the project source tree is a Git
repository, a ChangeLog file can be generated from the commit history by
building the "changelog" target, i.e.,
@code
make changelog
@endcode

In case of Subversion, be aware that the generation of the ChangeLog takes
several minutes and may require the input of your user credentials for access
to the Subversion repository. Moreover, if the command
<a href="http://arthurdejong.org/svn2cl/">svn2cl</a> is installed on your system,
it will be used to format the ChangeLog. Otherwise, the plain output of the
<tt>svn log</tt> command is used.

@note Not all of the above build targets are provided by each software package.
      You can see a list of available build targets by running "make help".

@subsubsection InstallBuiltFiles 5. Install the package (optional)

First, make sure that the CMake variables INSTALL_PREFIX and
INSTALL_SINFIX are set properly by running CMake as follows:
@code
cmake -D "INSTALL_PREFIX=<prefix>" -D "INSTALL_SINFIX=ON|OFF" ~/$pkg-build
@endcode

This can be omitted if these variables were set already during the
configuration of the build tree or if the default values should be used.
On Linux, INSTALL_PREFIX is by default set to "/usr/local". Note that the
following strings can be used in the specification of this variable which
will be substituted by the corresponding package specific values.

<table>
  <tr>
    <th>Pattern</th>
    <th>Description</th>
  </tr>
  <tr>
    @tp <b>\@PROJECT_NAME\@</b> @endtp
    <td>
      The case-sensitive name of the software package.
    </td>
  </tr>
  <tr>
    @tp <b>\@PROJECT_NAME_UPPER\@</b> @endtp
    <td>
      The name of the package in uppercase only.
    </td>
  </tr>
  <tr>
    @tp <b>\@PROJECT_NAME_LOWER\@</b> @endtp
    <td>
      The name of the package in lowercase only.
    </td>
  </tr>
  <tr>
    @tp <b>\@PROJECT_VERSION\@</b> @endtp
    <td>
      The package version.
    </td>
  </tr>
  <tr>
    @tp <b>\@PROJECT_VERSION_MAJOR\@</b> @endtp
    <td>
      The major number of the package version.
    </td>
  </tr>
  <tr>
    @tp <b>\@PROJECT_VERSION_MINOR\@</b> @endtp
    <td>
      The minor number of the package version.
    </td>
  </tr>
  <tr>
    @tp <b>\@PROJECT_VERSION_PATCH\@</b> @endtp
    <td>
      The patch number of the package version.
    </td>
  </tr>
</table>

After the package was configured successfully, the executables and
auxiliary files can be installed using the either the command
@code
make install
@endcode
or
@code
make install/strip
@endcode
in the root directory of the build tree. The available install targets
copy the files intended for installation to the directories specified during
the configuration step. The install/strip target additionally strips installed
binary executable and shared object files, which can save disk space.
 
The package files are installed in the following locations:

<table>
  <tr>
    <th>Directory</th>
    <th>Installed Files</th>
  </tr>
  <tr>
    @tp <b>&lt;prefix&gt;/bin/&lt;prefix&gt;/</b> @endtp
    <td>Main executable files.</td>
  </tr>
  <tr>
    @tp <b>&lt;prefix&gt;/etc/&lt;prefix&gt;/</b> @endtp
    <td>Package configuration files.</td>
  </tr>
  <tr>
    @tp <b>&lt;prefix&gt;/include/sbia/&lt;package&gt;/</b> @endtp
    <td>
      Include files, where &lt;prefix&gt;/include/ is the directory that
      needs to be in the search path for include files.
    </td>
  </tr>
  <tr>
    @tp <b>&lt;prefix&gt;/lib/&lt;prefix&gt;/</b> @endtp
    <td>Libraries and auxiliary executables.</td>
  </tr>
  <tr>
    @tp <b>&lt;prefix&gt;/lib/python/sbia/&lt;package&gt;</b> @endtp
    <td>Python modules.</td>
  </tr>
  <tr>
    @tp <b>&lt;prefix&gt;/lib/perl5/SBIA/&lt;Package&gt;</b> @endtp
    <td>Perl modules.</td>
  </tr>
  <tr>
    @tp <b>&lt;prefix&gt;/share/&lt;sinfix&gt;/doc/</b> @endtp
    <td>Package documentation files.</td>
  </tr>
  <tr>
    @tp <b>&lt;prefix&gt;/share/&lt;sinfix&gt;/example/</b> @endtp
    <td>Files required to run example as described in the User Manual.</td>
  </tr>
  <tr>
    @tp <b>&lt;prefix&gt;/share/&lt;sinfix&gt;/man/man.1</b> @endtp
    <td>Man pages of main executables.</td>
  </tr>
  <tr>
    @tp <b>&lt;prefix&gt;/share/&lt;prefix&gt;/man/man.3</b> @endtp
    <td>Man pages of library functions.</td>
  </tr>
</table>

where &lt;prefix&gt; is the value of INSTALL_PREFIX and &lt;sinfix&gt; is an empty
string if INSTALL_SINFIX is OFF and the package name in lowercase otherwise preceded
by the common infix "sbia/" (the default).

If more than one version of a software package shall be installed,
include the package version in the &lt;prefix&gt; by setting INSTALL_PREFIX
to "/usr/local/@PROJECT_NAME_LOWER@-@PROJECT_VERSION@", for example,
and disable the use of the &lt;sinfix&gt; by setting INSTALL_SINFIX to OFF.

Additionally, if both INSTALL_SINFIX and INSTALL_LINKS are ON (the default),
the following (symbolic) links are created on UNIX-based systems:
<table>
  <tr>
    <th>Link</th>
    <th>Value</th>
  </tr>
  <tr>
     @tp <b>&lt;prefix&gt;/bin/&lt;exec&gt;</b> @endtp
     <td>&lt;prefix&gt;/bin/&lt;sinfix&gt;/&lt;exec&gt;</td>
  </tr>
  <tr>
    @tp <b>&lt;prefix&gt;/share/man/man.1/&lt;exec&gt;.1</b> @endtp
    <td>&lt;prefix&gt;/share/&lt;sinfix&gt;/man/man.1/&lt;exec&gt;.1</td>
  </tr>
  <tr>
    @tp <b>&lt;prefix&gt;/share/man/man.3/&lt;func&gt;.3</b> @endtp
    <td>&lt;prefix&gt;/share/&lt;sinfix&gt;/man/man.3/&lt;func&gt;.3</td>
  </tr>
</table>

After the successful installation, the build tree can be deleted.

@subsubsection SetupEnvironment 6. Setup your environment (optional)

In order to ease the execution of the main executable files, we suggest to
add either the path ~/$pkg-build/bin/ or &lt;prefix&gt;/bin/ to the search path
for executable files, i.e., the PATH environment variable. This is, however,
generally no requirement for the correct functioning of the software.

For example,
@code
export PATH="<prefix>/bin/:<prefix>/bin/<sinfix>/:${PATH}"
@endcode

To be able to use the Python modules of a SBIA software package in your
own Python scripts, you need to add the path &lt;prefix&gt;/python/ to the
search path for Python modules, e.g.,
@code
export PYTHONPATH="${PYTHONPATH}:<prefix>/lib/python/"
@endcode
or in your Python script
@code
#! /usr/bin/env python
import sys
sys.path.append('<prefix>/lib/python/')
from sbia.<package> import <module>
@endcode

To be able to use the Perl modules of a SBIA software package in your own
Perl scripts, you need to add the path &lt;prefix&gt;/perl5/ to the search path
for Perl modules, e.g.,
@code
export PERL5LIB="${PERL5LIB}:<prefix>/lib/perl5/"
@endcode
or in your Perl script
@code
use lib '<prefix>/lib/perl5';
use SBIA::<Package>::<Module>;
@endcode

@subsection MakeUninstall Makefile-based Deinstallation

In order to undo the installation of the package files built from the sources,
run the following command in the root directory of the build tree which was
used to install the package

@code
cd ~/$pkg-build
make uninstall
@endcode

@attention With the current implementation, this command will simply
           delete all the files which were installed during the *last*
           build of the install target ("make install").

@subsection Deinstallation Deinstallation using the Uninstaller

During the installation, a manifest of all installed files and a CMake
script which reads in this list in order to remove these files again
is generated and installed in &lt;prefix&gt;/lib/cmake/&lt;package&gt;/.

If INSTALL_SINFIX was set to ON during the installation, a shell script
named "uninstall" was written to the &lt;prefix&gt;/bin/&lt;sinfix&gt;/
directory on Unix and a corresponding Batch file on Windows. Additionally,
if INSTALL_LINKS was set to ON, a symbolic link named "uninstall-<package>"
was created in &lt;prefix&gt;/bin/. Otherwise, if INSTALL_SINFIX was set to OFF,
the uninstaller is located in &lt;prefix&gt;/bin/ and named "uninstall-<package>".

Hence, in order to remove all files installed by this package as well
as the empty directories left behind inside the installation root directory
given by &lt;prefix&gt;, run the command
@code
uninstall-<package>
@endcode
assuming that you added &lt;prefix&gt;/bin/ to your PATH environment variable.

The advantage of the uninstaller is, that the build tree is no longer
required in order to uninstall the software package. Thus, you do not
need to keep a copy of the build tree once you installed the software
only to be able to uninstall the package again.
*/
