
  Section of Biomedical Image Analysis
  Department of Radiology
  University of Pennsylvania
  3600 Market Street, Suite 380
  Philadelphia, PA 19104

  Web:   http://www.rad.upenn.edu/sbia/
  Email: sbia-software at uphs.upenn.edu

  Copyright (c) 2011, 2012 University of Pennsylvania. All rights reserved.
  See http://www.rad.upenn.edu/sbia/software/license.html or COPYING file.



INTRODUCTION
============

  This document contains the build and installation instructions.

  For general build and installation instructions which apply to any software
  developed on top of the SBIA Build system And Software Implementation
  Standard (BASIS) [1], please refer to the respective how-to guide of the
  BASIS documentation [2].



OBTAINING A COPY OF THE SOFTWARE
================================

  Please see the corresponding section of the BASIS how-to guide [2].



INSTALLING A BINARY DISTRIBUTION PACKAGE
========================================

  Please see the corresponding section of the BASIS how-to guide [2].



RUNTIME REQUIREMENTS
====================

  This software has no runtime dependencies.



BUILDING THE SOFTWARE FROM SOURCES
==================================

  Build Steps
  -----------

  The common steps to build a project based on CMake, i.e., this software,
  are as follows:

  1. Extract source files.
  2. Create build directory and change to it.
  3. Run CMake to configure the build tree.
  4. Build the software using selected build tool.
  5. Install the built files.

  On Unix-like systems with GNU Make as build tool, these build steps can be
  summarized by the following sequence of commands executed in a shell,
  where $package and $version are shell variables which represent the name
  of this package and the obtained version of the software.

  $ tar xzf $package-$version-source.tar.gz
  $ mkdir $package-$version-build
  $ cd $package-$version-build
  $ ccmake ../$package-$version-source

    - Press 'c' to configure the build system and 'e' to ignore warnings.
    - Set INSTALL_PREFIX and other CMake variables and options.
    - Continue pressing 'c' until the option 'g' is available.
    - Then press 'g' to generate the configuration files for GNU Make.

  $ make
  $ make install

  An exhaustive list of minimum build dependencies including the build tools
  along detailed step-by-step build and installation instructions can be found
  in the corresponding "Building the Software from Sources" section of the
  BASIS how-to guide on software installation [2].

  In the following, only the additional/specific build dependencies of this
  software package and the package-specific CMake settings available to
  configure the build of this software are documented.


  Build Dependencies
  ------------------

  - ITK 3.14 or greater (optional)

    Web:      http://www.itk.org
    Download: http://www.itk.org/ITK/resources/software.html
    Ubuntu:   libinsighttoolkit3.18 (maverick)

    The standalone basistest-driver executable currently makes use of the ITK,
    either version 3 or 4 and above, for the comparison of a test image to one
    or more baseline images. If no installation of this library is found, this
    executable is excluded from the build and installation. Note that many
    packages developed at SBIA make use of this executable in their tests.
    If BASIS has been built without the basistest-driver, these packages have
    to be built with BUILD_TESTING option set to OFF.

    If you install BASIS for use with different projects which depend on it
    and if you want to be flexible regarding the ITK version used by each of
    these projects, it is required to link BASIS to a static build of the ITK,
    i.e., a build where BUILD_SHARE_LIBRARIES was set to OFF during the
    configuration of the ITK build tree. Otherwise, all projects which make use
    of BASIS have to link against the same version of ITK, which is no problem
    for systems with only one version of ITK installed, however.



  CMake Options
  -------------

  Depending on which language interpreters are installed on your system,
  the following CMake options are available:

  USE_CXX            Whether to build/enable the C++ utilities.
  USE_PythonInterp   Whether to build/enable the Python utilities.
  USE_Perl           Whether to build/enable the Perl utilities.
  USE_BASH           Whether to build/enable the BASH utilities.


  Advanced CMake Options
  ----------------------

  (no additional advanced CMake options considered by this package)



REFERENCES
==========

  [1] http://www.rad.upenn.edu/sbia/software/index.html#basis

  [2] http://www.rad.upenn.edu/sbia/software/installation.html
