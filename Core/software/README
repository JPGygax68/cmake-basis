
  Section of Biomedical Image Analysis
  Department of Radiology
  University of Pennsylvania
  3600 Market Street, Suite 380
  Philadelphia, PA 19104

  Web:   https://www.rad.upenn.edu/sbia/
  Email: sbia-software -at- uphs.upenn.edu



INTRODUCTION
============

  \todo The following is the introduction to BASIS, not only the Core.

  The Build And Software Implementation Standard (BASIS) software package
  not only provides a project template which standardizes the project directory
  structure, it also accompanies this template with CMake implementations.
  These CMake implementations ease and standardize the build, testing,
  packaging, and installation of software packages developed at SBIA.
  Besides the software components, the documentation of BASIS defines the
  lab standard for various asepcts of a software development project.
  Moreover, utility source files and libraries written both at SBIA and
  external sites are integrated as components of BASIS.

  Every SBIA software project which was started after the introduction of BASIS
  in June 2011 is required to built on top of BASIS, i.e., to instantiate the
  project template and utilize the provided CMake implementations. An extensive
  documentation is provided with BASIS to ease this task as much as possible.

  The BASIS package, when build and installed once globally on the target system,
  is used for the build of dependent SBIA projects. Alternatively, if the
  package is not found, each SBIA project or superproject which is built on top
  of BASIS, retrieves and builds a local copy using CMake's ExternalProject module
  (http://www.kitware.com/products/html/BuildingExternalProjectsWithCMake2.8.html).

  Another feature of BASIS is, that it not only eases the developement and
  maintenance of separatly managed software projects, it also enables the fusion
  of these more or less independently developed software packages into so-called
  superprojects, where each software package is a component of this superproject.



PACKAGE OVERVIEW
================

  CMake Modules
  -------------

  Source package:
    - src/cmake : The top-level source directory of the BASIS CMake Modules component.

  Installation:
    - cmake : The installed BASIS CMake Modules and auxiliary files.

  The CMake modules and corresponding auxiliary files are not only used by the
  BASIS package itself, but also any SBIA project which follows BASIS for the
  configuration of the CMake-based build system. These CMake modules in
  particular define many functions which are used as replacement of CMake's
  built-in functions. For example, the function sbia_add_executable () is used
  by SBIA projects as replacement for CMake's add_executable () command.
  The SBIA CMake functions are convenient to use, extend the functionality of
  CMake's built-in functions and enable BASIS to impose the standard on the
  configured build system.


  Boost
  -----

  Source package:
    - src/boost       : The top-level source directory of the BASIS Boost component.
    - src/boost/boost : The header files of the BASIS Boost libraries.
    - src/boost/libs  : Contains one subfolder for each BASIS Boost library.

  Installation:
    - include/boost : The header files of the BASIS Boost libraries.
    - lib           : BASIS Boost libraries.

  This component consists only of the minimal required source code files of
  selected Boost libraries to reduce the size of the libraries each SBIA project
  depends on. The entire Boost collection would be too huge considering that
  only few Boost libraries are actually used by most SBIA projects.
  
  The official documentation of the Boost libraries can be found online at
  http://www.boost.org/doc/libs/.

  See LICENSE-Boost file in the project root directory for details on the
  copyright and license of the Boost source files.

  The following Boost libraries are part of the BASIS Boost component:

    program_options - The Boost.Program_options library
                      (http://www.boost.org/doc/libs/release/doc/html/program_options.html).


  Project Template
  ----------------

  Every SBIA project that wants to follow BASIS has to be derived from the BASIS
  Project Template. For convenience, a project creation script is provided which
  automates the instantiation of the template for new projects.

