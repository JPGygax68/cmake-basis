##############################################################################
# @file  @PROJECT_NAME@Settings.cmake
# @brief BASIS configuration and default CMake settings used by projects.
#
# @note The file @PROJECT_NAME@Settings.cmake is automatically generated by
#       BASIS from the template file Settings.cmake.in which is part of the
#       BASIS installation.
#
# This module defines global CMake constants and variables which are used
# by the BASIS CMake functions and macros. Hence, these values can be used
# to configure the behavior of these functions to some extent without the
# need to modify the functions themselves.
#
# @attention Be careful when caching any of the variables. Usually, this
#            file is included in the root CMake configuration file of the
#            project which may also be a module of another project and hence
#            may overwrite this project's settings. For project-wide variables
#            which are modified by the BASIS functions consider the use of
#            so-called project properties as implemented by the BASIS functions
#            basis_set_project_property() and basis_get_project_property().
#
# Variables in this file which are only set if not set previously, i.e.,
# by using basis_set_if_empty(), are set when this file is included the first
# time by a project, but not changed when it is included by a module of this
# project. This is important in order to merge the module's output files with
# the files of the project it is part of.
#
# @note As this file also sets the CMake policies to be used, it has to
#       be included using the @c NO_POLICY_SCOPE in order for these policies
#       to take effect also in the including file and its subdirectories.
#
# Copyright (c) 2011 University of Pennsylvania. All rights reserved.
# See https://www.rad.upenn.edu/sbia/software/license.html or COPYING file.
#
# Contact: SBIA Group <sbia-software at uphs.upenn.edu>
#
# @ingroup CMakeTools
##############################################################################

# ============================================================================
# CMake version and policies
# ============================================================================

cmake_minimum_required (VERSION 2.8.4)

# Add policies introduced with CMake versions newer than the one specified
# above. These policies would otherwise trigger a policy not set warning by
# newer CMake versions.

if (POLICY CMP0016)
  cmake_policy (SET CMP0016 NEW)
endif ()

if (POLICY CMP0017)
  cmake_policy (SET CMP0017 NEW)
endif ()

# ============================================================================
# system checks
# ============================================================================

# used by tests to disable these checks
if (NOT BASIS_NO_SYSTEM_CHECKS)
  include (CheckTypeSize)
  include (CheckIncludeFile)

  # check if type long long is supported
  CHECK_TYPE_SIZE ("long long" LONG_LONG)

  if (HAVE_LONG_LONG)
    set (HAVE_LONG_LONG 1)
  else ()
    set (HAVE_LONG_LONG 0)
  endif ()

  # check for presence of sstream header
  include (TestForSSTREAM)

  if (CMAKE_NO_ANSI_STRING_STREAM)
    set (HAVE_SSTREAM 0)
  else ()
    set (HAVE_SSTREAM 1)
  endif ()

  # check if tr/tuple header file is available
  CHECK_INCLUDE_FILE ("tr1/tuple" HAVE_TR1_TUPLE)

  if (HAVE_TR1_TUPLE)
    set (HAVE_TR1_TUPLE 1)
  else ()
    set (HAVE_TR1_TUPLE 0)
  endif ()

  # check for availibility of pthreads library
  # defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT
  find_package (Threads)

  if (Threads_FOUND)
    if (CMAKE_USE_PTHREADS_INIT)
      set (HAVE_PTHREAD 1)
    else  ()
      set (HAVE_PTHREAD 0)
    endif ()
  endif ()
endif ()

# ============================================================================
# constants and global settings
# ============================================================================

## @addtogroup CMakeUtilities
#  @{


## @brief List of names used for special purpose targets.
#
# Contains a list of target names that are used by the BASIS functions for
# special purposes and are hence not to be used for project targets.
set (
  BASIS_RESERVED_TARGET_NAMES
    "all"
    "bundle"
    "bundle_source"
    "changelog"
    "clean"
    "depend"
    "doc"
    "headers"
    "headers_check"
    "package"
    "package_source"
    "scripts"
    "test"
    "uninstall"
)

## @brief Default component used for library targets when no component is specified.
#
# The default component a library target and its auxiliary files
# are associated with if no component was specified, explicitly.
set (BASIS_LIBRARY_COMPONENT "Development")

## @brief Default component used for executables when no component is specified.
#
# The default component an executable target and its auxiliary files
# are associated with if no component was specified, explicitly.
set (BASIS_RUNTIME_COMPONENT "Runtime")

## @brief Specifies that the BASIS C++ utilities shall by default not be added
#         as dependency of an executable.
set (BASIS_NO_BASIS_UTILITIES FALSE)

## @brief Enable compilation of scripts if supported by the language.
#
# In particular, Python modules are compiled if this option is enabled and
# only the compiled modules are installed.
#
# @sa basis_add_script()
option (BASIS_COMPILE_SCRIPTS FALSE)
mark_as_advanced (BASIS_COMPILE_SCRIPTS)

## @brief Script used to execute a process in CMake script mode.
#
# In order to be able to assign a timeout to the execution of a custom command
# and to add some error message parsing, this script is used by some build
# rules to actually perform the build step. See for example, the build of
# executables using the MATLAB Compiler.
set (BASIS_SCRIPT_EXECUTE_PROCESS "${BASIS_MODULE_PATH}/ExecuteProcess.cmake")

## @brief Default script configuration template.
#
# This is the default template used by basis_add_script() to configure the
# script during the build step. If the file
# @c PROJECT_CONFIG_DIR/ScriptConfig.cmake.in exists, the value of this variable
# is set to its path by basis_project_initialize().
set (BASIS_SCRIPT_CONFIG_FILE "${BASIS_MODULE_PATH}/ScriptConfig.cmake.in")

## @brief File used by default as <tt>--authors</tt> file to <tt>svn2cl</tt>.
#
# This file lists all Subversion users at SBIA and is used by default for
# the mapping of Subversion user names to real names during the generation
# of changelogs.
set (BASIS_SVN_USERS_FILE "${BASIS_MODULE_PATH}/SubversionUsers.txt")

# TODO Figure how it is used and see if it can be removed or document it
basis_set_if_empty (BASIS_INSTALL_PUBLIC_HEADERS_OF_CXX_UTILITIES FALSE)

# ----------------------------------------------------------------------------
# namespace

## @brief Whether BASIS shall use fully-qualified target UIDs.
#
# If this option is OFF, the namespace of the top-level BASIS project is
# not prepended to the actual CMake build target names.
#
# For example, instead of the fully-qualified target UID
# "sbia.@PROJECT_NAME_LOWER@.target", the CMake target name will simply
# be "target". Only when the target is referenced from another project,
# the fully-qualified target UID is usually required.
basis_set_if_empty (BASIS_USE_FULLY_QUALIFIED_UIDS OFF)

## @brief Whether BASIS should use a separate namespace for each module.
#
# If this option is ON, BASIS will use a separate namespace for each module.
# Otherwise, all modules of a project reside dirctly in the namespace of the
# top-level project itself.
basis_set_if_empty (BASIS_USE_MODULE_NAMESPACES OFF)

## @brief Global namespace of BASIS projects.
if (NOT DEFINED BASIS_NAMESPACE)
  set (BASIS_NAMESPACE "SBIA")
endif ()
string (TOLOWER "${BASIS_NAMESPACE}" BASIS_NAMESPACE_LOWER)
string (TOUPPER "${BASIS_NAMESPACE}" BASIS_NAMESPACE_UPPER)

## @brief CMake namespace of top-level project.
#
# This is the common namespace of a BASIS project and its modules.
# It is the part of the namespace which is only required if the project's
# targets are referenced from another project, but not within the project.
if (NOT PROJECT_IS_MODULE)
  if (BASIS_NAMESPACE)
    set (BASIS_PROJECT_NAMESPACE_CMAKE "${BASIS_NAMESPACE_LOWER}.@PROJECT_NAME_LOWER@")
  else ()
    set (BASIS_PROJECT_NAMESPACE_CMAKE "@PROJECT_NAME_LOWER@")
  endif ()
endif ()
basis_sanitize_for_regex (
  BASIS_PROJECT_NAMESPACE_CMAKE_REGEX "${BASIS_PROJECT_NAMESPACE_CMAKE}"
)

## @brief CMake namespace of project.
#
# The CMake namespace of a BASIS project is made up of its name in lower case
# only as well as the namespace the project belongs to, i.e., the namespace of
# the project this project is a module of.
#
# Example:
# @code
# basis_make_target_uid(TARGET_UID "mycmd")
# # sets TARGET_UID to "sbia.@PROJECT_NAME_LOWER@.mycmd"
# @endcode
#
# @sa basis_make_target_uid()
# @sa basis_get_target_uid()
# @sa basis_make_test_uid()
# @sa basis_get_test_uid()
if (NOT PROJECT_IS_MODULE)
  set (PROJECT_NAMESPACE_CMAKE "${BASIS_PROJECT_NAMESPACE_CMAKE}")
else ()
  if (BASIS_USE_MODULE_NAMESPACES)
    set (PROJECT_NAMESPACE_CMAKE "${PROJECT_NAMESPACE_CMAKE}.@PROJECT_NAME_LOWER@")
  endif ()
endif ()
basis_sanitize_for_regex (PROJECT_NAMESPACE_CMAKE_REGEX "${PROJECT_NAMESPACE_CMAKE}")

## @brief C++ namespace of project.
#
# The C++ namespace of a BASIS project is made up of its name in lower case
# only as well as the namespace the project it belongs to, i.e., the namespace of
# the project this project is a module of.
#
# Example:
# @code
# namespace sbia {
# namespace @PROJECT_NAME_LOWER@ {
# // your code goes here
# }
# }
# @endcode
#
# @ingroup BasisCxxUtilities
if (NOT PROJECT_IS_MODULE)
  if (BASIS_NAMESPACE)
    set (PROJECT_NAMESPACE_CXX "${BASIS_NAMESPACE_LOWER}::@PROJECT_NAME_LOWER@")
  else ()
    set (PROJECT_NAMESPACE_CXX "@PROJECT_NAME_LOWER@")
  endif ()
else ()
  if (BASIS_USE_MODULE_NAMESPACES)
    set (PROJECT_NAMESPACE_CXX "${PROJECT_NAMESPACE_CXX}::@PROJECT_NAME_LOWER@")
  endif ()
endif ()

## @brief Java package name of project.
#
# The Java package name of a BASIS project is made up of its name in lower case
# only as well as the package name of the project it belongs to.
#
# Example:
# @code
# package sbia.@PROJECT_NAME_LOWER@;
# @endcode
#
# @ingroup BasisJavaUtilities
if (NOT PROJECT_IS_MODULE)
  if (BASIS_NAMESPACE)
    set (PROJECT_NAMESPACE_JAVA "${BASIS_NAMESPACE_LOWER}.@PROJECT_NAME_LOWER@")
  else ()
    set (PROJECT_NAMESPACE_JAVA "@PROJECT_NAME_LOWER@")
  endif ()
else ()
  if (BASIS_USE_MODULE_NAMESPACES)
    set (PROJECT_NAMESPACE_JAVA "${PROJECT_NAMESPACE_JAVA}.@PROJECT_NAME_LOWER@")
  endif ()
endif ()

## @brief Python package name of project.
#
# The Python package name of a BASIS project is made up of its name in lower case
# only as well as the package name of the project it belongs to.
#
# Example:
# @code
# import sbia.@PROJECT_NAME_LOWER@
# @endcode
#
# @ingroup BasisPythonUtilities
if (NOT PROJECT_IS_MODULE)
  if (BASIS_NAMESPACE)
    set (PROJECT_NAMESPACE_PYTHON "${BASIS_NAMESPACE_LOWER}.@PROJECT_NAME_LOWER@")
  else ()
    set (PROJECT_NAMESPACE_PYTHON "@PROJECT_NAME_LOWER@")
  endif ()
else ()
  if (BASIS_USE_MODULE_NAMESPACES)
    set (PROJECT_NAMESPACE_PYTHON "${PROJECT_NAMESPACE_PYTHON}.@PROJECT_NAME_LOWER@")
  endif ()
endif ()

## @brief Perl package name of project.
#
# The Perl package name of a BASIS project is made up of the project name which
# must be either all capital letters or mixed case starting with a captital letter.
# Note that Perl informally reserves lowercase module names for "pragma" modules
# such as <tt>integer</tt> and <tt>strict</tt>.
#
# Example:
# @code
# package SBIA::@PROJECT_NAME@;
# @endcode
#
# @ingroup BasisPerlUtilities
if (NOT PROJECT_IS_MODULE)
  if (BASIS_NAMESPACE)
    set (PROJECT_NAMESPACE_PERL "${BASIS_NAMESPACE}::@PROJECT_NAME@")
  else ()
    set (PROJECT_NAMESPACE_PERL "@PROJECT_NAME@")
  endif ()
else ()
  if (BASIS_USE_MODULE_NAMESPACES)
    set (PROJECT_NAMESPACE_PERL "${PROJECT_NAMESPACE_PERL}::@PROJECT_NAME@")
  endif ()
endif ()

## @brief BASH namespace of project.
#
# In BASH, there exists no such concept of a namespace or package. However,
# variable and function names defined in a module which is supposed to be
# sourced by other BASH scripts should use a unique prefix for variable and
# function names.
#
# The BASH module namespace of a BASIS project is made up of its name in upper
# case only to distinguish it from the actual variable or function name as well
# as the namespace of the project it belongs to.
#
# Example:
# @code
# # The project's namespace is SBIA_BASIS and the name of the module in this
# # example is shflags.sh. This gives the fully-qualified module namespace
# # SBIA_BASIS_SHFLAGS. Note that private identifiers are further prefixed
# # with an underscore '_'.
#
# # return if already loaded
# [ "${_SBIA_@PROJECT_NAME_UPPER@_MYMODULE_INCLUDED:-0}" -eq 1 ] && return 0
# _SBIA_@PROJECT_NAME_UPPER@_MYMODULE_INCLUDED=1
#
# # define private global variable
# _SBIA_@PROJECT_NAME_UPPER@_MYMODULE_verbose=0
#
# # define public function
# #
# # Note: To not complicate the use of the module, the name must not necessarily
# #       include the fully-qualified namespace identifier, but the name should
# #       chosen carefully to avoid name conflicts with other modules.
# MYMODULE_string()
# {
#     # ...
# }
# @endcode
#
# @ingroup BasisBashUtilities
if (NOT PROJECT_IS_MODULE)
  if (BASIS_NAMESPACE)
    set (PROJECT_NAMESPACE_BASH "${BASIS_NAMESPACE_UPPER}_@PROJECT_NAME_UPPER@")
  else ()
    set (PROJECT_NAMESPACE_BASH "@PROJECT_NAME_UPPER@")
  endif ()
else ()
  if (BASIS_USE_MODULE_NAMESPACES)
    set (PROJECT_NAMESPACE_BASH "${PROJECT_NAMESPACE_BASH}_@PROJECT_NAME_UPPER@")
  endif ()
endif ()

## @brief MATLAB package name of project.
#
# The MATLAB package name of a BASIS project is made up of its name in lower case
# only as well as the package name of the project it belongs to.
#
# For information on MATLAB's package and class folders, visit the following
# web page from MathWorks:
# @sa http://www.mathworks.com/help/techdoc/matlab_oop/brfynt_-1.html
#
# Example:
# @code
# import sbia.@PROJECT_NAME_LOWER@.cls
# @endcode
#
# @ingroup BasisMatlabUtilities
if (NOT PROJECT_IS_MODULE)
  if (BASIS_NAMESPACE)
    set (PROJECT_NAMESPACE_MATLAB "${BASIS_NAMESPACE_LOWER}.@PROJECT_NAME_LOWER@")
  else ()
    set (PROJECT_NAMESPACE_MATLAB "@PROJECT_NAME_LOWER@")
  endif ()
else ()
  if (BASIS_USE_MODULE_NAMESPACES)
    set (PROJECT_NAMESPACE_MATLAB "${PROJECT_NAMESPACE_MATLAB}.@PROJECT_NAME_LOWER@")
  endif ()
endif ()

## @brief Prefix for public header files.
#
# The prefix used for the output directory of the configured public header
# files in the build tree and the installation of these under the
# @c INSTALL_INCLUDE_DIR. The header files have to be included in a
# source file using the entire relative path, e.g.,
# @code
# #include <sbia/@PROJECT_NAME_LOWER@/config.h>
# @endcode
# This avoids name conflicts among projects in a more reliable way then only
# changing the order of paths in the include search path and is similar to
# prefixing the file name of header files, but at the time avoids the use
# of such prefixing of the file name itself for the developer.
#
# If this project is a module of another project, it appends its name to the
# already set include prefix. Otherwise, the include prefix is set to the
# common default prefix of BASIS projects first, i.e., "sbia", and then the
# name of the project is appended.
#
# @note If the header file is private, i.e., not required by a public library
#       and thus located in the @c PROJECT_CODE_DIR instead of the
#       @c PROJECT_INCLUDE_DIR and therefore not installed, it can be
#       included without the use of such relative path.
#
# @note The include prefix must end with a trailing slash if it is a
#       subdirectory. BASIS will not use a slash by itself to separate the
#       prefix from the header file name. This behavior eases the transition
#       to a file name prefix if ever desired.
if (NOT PROJECT_IS_MODULE)
  if (BASIS_NAMESPACE)
    set (INCLUDE_PREFIX "${BASIS_NAMESPACE_LOWER}/@PROJECT_NAME_LOWER@/")
  else ()
    set (INCLUDE_PREFIX "@PROJECT_NAME_LOWER@/")
  endif ()
else ()
  if (BASIS_USE_MODULE_NAMESPACES)
    set (INCLUDE_PREFIX "${INCLUDE_PREFIX}/@PROJECT_NAME_LOWER@/")
  endif ()
endif ()


## @}
# end of Doxygen group


# ============================================================================
# build configuration(s)
# ============================================================================

## @brief List of all available/supported build configurations.
set (
  CMAKE_CONFIGURATION_TYPES
    "Debug"
    "Coverage"
    "Release"
  CACHE STRING "Build configurations." FORCE
)

## @brief List of debug configurations.
#
# Used by the target_link_libraries() CMake command, for example,
# to determine whether to link to the optimized or debug libraries.
set (DEBUG_CONFIGURATIONS "Debug")

mark_as_advanced (CMAKE_CONFIGURATION_TYPES)
mark_as_advanced (DEBUG_CONFIGURATIONS)

if (NOT CMAKE_BUILD_TYPE MATCHES "^Debug$|^Coverage$|^Release$")
  if (NOT "${CMAKE_BUILD_TYPE}" STREQUAL "")
    message ("Invalid build type ${CMAKE_BUILD_TYPE}! Setting CMAKE_BUILD_TYPE to Release.")
  endif ()
  set (CMAKE_BUILD_TYPE "Release")
endif ()

## @brief Current build configuration for GNU Make Makefiles generator.
set (
  CMAKE_BUILD_TYPE
    "${CMAKE_BUILD_TYPE}"
  CACHE STRING
    "Current build configuration. Specify either \"Debug\", \"Coverage\", or \"Release\"."
  FORCE
)

# set the possible values of build type for cmake-gui
set_property (CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "Coverage")

# ----------------------------------------------------------------------------
# disabled configurations
# ----------------------------------------------------------------------------

# disable support for MinSizeRel and RelWithDebInfo
foreach (C MINSIZEREL RELWITHDEBINFO)
  # compiler flags
  set_property (CACHE CMAKE_C_FLAGS_${C} PROPERTY TYPE INTERNAL)
  set_property (CACHE CMAKE_CXX_FLAGS_${C} PROPERTY TYPE INTERNAL)

  # linker flags
  set_property (CACHE CMAKE_EXE_LINKER_FLAGS_${C} PROPERTY TYPE INTERNAL)
  set_property (CACHE CMAKE_MODULE_LINKER_FLAGS_${C} PROPERTY TYPE INTERNAL)
  set_property (CACHE CMAKE_SHARED_LINKER_FLAGS_${C} PROPERTY TYPE INTERNAL)
endforeach ()

# disable support for plain C
set_property (CACHE CMAKE_C_FLAGS PROPERTY TYPE INTERNAL)
foreach (C DEBUG RELEASE)
  set_property (CACHE CMAKE_C_FLAGS_${C} PROPERTY TYPE INTERNAL)
endforeach ()

unset (C)

# ----------------------------------------------------------------------------
# common
# ----------------------------------------------------------------------------

# common compiler flags
set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")

# common linker flags
set (CMAKE_EXE_LINKER_FLAGS    "${CMAKE_LINKER_FLAGS}")
set (CMAKE_MODULE_LINKER_FLAGS "${CMAKE_LINKER_FLAGS}")
set (CMAKE_SHARED_LINKER_FLAGS "${CMAKE_LINKER_FLAGS}")

# ----------------------------------------------------------------------------
# Debug
# ----------------------------------------------------------------------------

# compiler flags of Debug configuration
set (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")

# linker flags of Debug configuration
set (CMAKE_EXE_LINKER_FLAGS_DEBUG    "${CMAKE_EXE_LINKER_FLAGS_DEBUG}")
set (CMAKE_MODULE_LINKER_FLAGS_DEBUG "${CMAKE_MODULE_LINKER_FLAGS_DEBUG}")
set (CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG}")

# ----------------------------------------------------------------------------
# Release
# ----------------------------------------------------------------------------

# compiler flags of Release configuration
set (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")

# linker flags of Release configuration
set (CMAKE_EXE_LINKER_FLAGS_RELEASE    "${CMAKE_EXE_LINKER_FLAGS_RELEASE}")
set (CMAKE_MODULE_LINKER_FLAGS_RELEASE "${CMAKE_MODULE_LINKER_FLAGS_RELEASE}")
set (CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE}")

# ----------------------------------------------------------------------------
# Coverage
# ----------------------------------------------------------------------------

# compiler flags for Coverage configuration
set (CMAKE_C_FLAGS_COVERAGE "" CACHE INTERNAL "" FORCE)
set (CMAKE_CXX_FLAGS_COVERAGE "-g -O0 -Wall -W -fprofile-arcs -ftest-coverage")

# linker flags for Coverage configuration
set (CMAKE_EXE_LINKER_FLAGS_COVERAGE    "-fprofile-arcs -ftest-coverage")
set (CMAKE_MODULE_LINKER_FLAGS_COVERAGE "-fprofile-arcs -ftest-coverage")
set (CMAKE_SHARED_LINKER_FLAGS_COVERAGE "-fprofile-arcs -ftest-coverage")

# ============================================================================
# common options
# ============================================================================

## @addtogroup CMakeAPI
#  @{


## @brief Request verbose messages from BASIS functions.
option (BASIS_VERBOSE "Request BASIS functions to output verbose messages." OFF)
mark_as_advanced (BASIS_VERBOSE)

## @brief Request debugging messages from BASIS functions.
option (BASIS_DEBUG "Request BASIS functions to help debugging." OFF)
mark_as_advanced (BASIS_DEBUG)

## @brief Request build/installation of documentation.
#
# @note In case of the API documentation, enabling this option does not
#       add the 'doc' target to the 'all' build target. In order to build
#       the API documentation, the 'doc' target has to be build.
if (EXISTS "${PROJECT_DOC_DIR}")
  option (BUILD_DOCUMENTATION "Request build and/or installation of documentation." ON)
endif ()

## @brief Request build/installation of example.
if (EXISTS ${PROJECT_EXAMPLE_DIR})
  option (BUILD_EXAMPLE "Request build and/or installation of example." ON)
endif ()

## @brief Request installation of symbolic links.
#
# @note This option is not available on Windows.
if (UNIX)
  option (INSTALL_LINKS "Request installation of (symbolic) links." ON)
else ()
  set (INSTALL_LINKS OFF)
endif ()


## @}
# end of Doxygen group
