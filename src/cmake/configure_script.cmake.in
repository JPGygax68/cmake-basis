# DO NOT edit. This file was automatically generated by BASIS.
#
# @note This build script was generated by BASIS from the template file
#       configure_script.cmake.in which is part of the BASIS installation.
cmake_minimum_required (VERSION 2.8.4)

# ============================================================================
# dumped variables - include first
# ============================================================================

include ("${CMAKE_CURRENT_LIST_DIR}/variables.cmake" OPTIONAL)

# ============================================================================
# settings
# ============================================================================

set (SCRIPT_FILE             "@SCRIPT_FILE@")
set (CONFIGURED_FILE         "@CONFIGURED_FILE@")
set (CONFIGURED_INSTALL_FILE "@CONFIGURED_INSTALL_FILE@")

set (LANGUAGE "@BASIS_LANGUAGE@")
set (MODULE   "@MODULE@")
set (COMPILE  "@COMPILE@")
set (WITH_EXT "@WITH_EXT@")

set (NAME "@OUTPUT_NAME@")
string (TOUPPER "${NAME}" NAME_UPPER)
string (TOLOWER "${NAME}" NAME_LOWER)

get_filename_component (NAMESPACE "${NAME}" NAME_WE)
string (REGEX REPLACE "[^a-zA-Z0-9]" "_" NAMESPACE "${NAMESPACE}")
string (TOUPPER "${NAMESPACE}" NAMESPACE_UPPER)
string (TOLOWER "${NAMESPACE}" NAMESPACE_LOWER)

if (MODULE)
  set (BINARY_DIR  "@LIBRARY_OUTPUT_DIRECTORY@")
  set (INSTALL_DIR "@INSTALL_PREFIX@/@LIBRARY_INSTALL_DIRECTORY@")
else ()
  set (BINARY_DIR  "@RUNTIME_OUTPUT_DIRECTORY@")
  set (INSTALL_DIR "@INSTALL_PREFIX@/@RUNTIME_INSTALL_DIRECTORY@")
endif ()

# ============================================================================
# auxiliary functions
# ============================================================================

include ("@BASIS_MODULE_PATH@/CommonTools.cmake")

# ----------------------------------------------------------------------------
# function for setting of path in script configuration relative to script
function (basis_set_script_path VAR PATH)
  if (ARGC GREATER 3)
    message (FATAL_ERROR "Too many arguments given for function basis_set_script_path()")
  endif ()
  if (ARGC EQUAL 3 AND BUILD_INSTALL_SCRIPT)
    set (PREFIX "@INSTALL_PREFIX@")
    set (PATH   "${ARGV2}")
  else ()
    set (PREFIX "@PROJECT_SOURCE_DIR@")
  endif ()
  if (NOT IS_ABSOLUTE "${PATH}")
    set (PATH "${PREFIX}/${PATH}")
  endif ()
  basis_get_relative_path (PATH "${DIR}" "${PATH}")
  if (NOT PATH)
    set (PATH ".")
  endif ()
  string (REGEX REPLACE "/$" "" PATH "${PATH}")
  set (${VAR} "${PATH}" PARENT_SCOPE)
endfunction ()

# ----------------------------------------------------------------------------
# function to configure script/module
#
# This function automatically prepends the module search paths such that
# the modules of this package are found (and preferred in case of potential
# name conflict with other installation/package). Moreover, it adds/replaces
# the shebang directive on Unix or converts the script into a Windows
# Command on Windows, respectively.
#
# Note: Every line of code added will introduce a mismatch between error
#       messages of the interpreter and the original script file. To not
#       confuse/mislead developers too much, keep number of lines added
#       at a minimum.
function (basis_configure_script SCRIPT_FILE CONFIGURED_FILE)
  file (READ "${SCRIPT_FILE}" SCRIPT)
  # remove existing shebang directive, but remember interpreter
  set (INTERPRETER)
  file (STRINGS "${SCRIPT_FILE}" FIRST_LINE LIMIT_COUNT 1)
  if (FIRST_LINE MATCHES "^#!")
    if (FIRST_LINE MATCHES "^#! */usr/bin/env +([^ ]+)")
      set (INTERPRETER "${CMAKE_MATCH_1}")
    elseif (FIRST_LINE MATCHES "^#! *([^ ]+)")
      set (INTERPRETER "${CMAKE_MATCH_1}")
      get_filename_component (INTERPRETER "${INTERPRETER}" NAME)
    endif ()
    basis_sanitize_for_regex (FIRST_LINE_REGEX "${FIRST_LINE}")
    string (REGEX REPLACE "^${FIRST_LINE_REGEX}\n?" "" SCRIPT "${SCRIPT}")
  endif ()
  # replace CMake variables used in script
  if (SCRIPT_FILE MATCHES "\\.in$")
    string (CONFIGURE "${SCRIPT}" SCRIPT @ONLY)
    string (CONFIGURE "${SCRIPT}" SCRIPT @ONLY)
  endif ()
  # prepend module search path of this project
  if (NOT MODULE)
    if (LANGUAGE MATCHES "PYTHON")
      string (REGEX REPLACE "^[ \t]*\n" "" SCRIPT "${SCRIPT}")
      set (SCRIPT "import sys; import os.path; sys.path.insert(0, os.path.realpath(os.path.join(os.path.dirname(os.path.realpath(__file__)), '${_BASIS_PYTHON_LIBRARY_DIR}'))); sys.path.insert(0, os.path.realpath(os.path.join(os.path.dirname(os.path.realpath(__file__)), '${PYTHON_LIBRARY_DIR}')))\n${SCRIPT}")
    elseif (LANGUAGE MATCHES "PERL")
      string (REGEX REPLACE "^[ \t]*\n" "" SCRIPT "${SCRIPT}")
      set (SCRIPT "use Cwd qw(realpath); use File::Basename; use lib realpath(dirname(realpath(__FILE__)) . '/${_BASIS_PERL_LIBRARY_DIR}'); use lib realpath(dirname(realpath(__FILE__)) . '/${PERL_LIBRARY_DIR}'); use lib dirname(realpath(__FILE__));\n${SCRIPT}")
    elseif (LANGUAGE MATCHES "BASH")
      string (REGEX REPLACE "^[ \t]*\n" "" SCRIPT "${SCRIPT}")
      set (BASH_CODE
"BASIS_BASH_UTILITIES=\"$(cd -P -- \"$(dirname -- \"$BASH_SOURCE\")\" && pwd -P)/$(basename -- \"$BASH_SOURCE\")\"
i=0
cur=\"$BASIS_BASH_UTILITIES\"
while [ -h \"$cur\" ] && [ $i -lt 100 ]
do  dir=`dirname -- \"$cur\"`
cur=`readlink -- \"$cur\"`
cur=`cd \"$dir\" && cd $(dirname -- \"$cur\") && pwd`/`basename -- \"$cur\"`
(( i++ ))
done
if [ $i -lt 100 ]; then path=\"$cur\"; fi
BASIS_BASH_UTILITIES=\"$(dirname -- \"$BASIS_BASH_UTILITIES\")/${LIBRARY_DIR}/basis.sh\"
unset -v i dir cur"
    )
      string (REPLACE "\n" "; " BASH_CODE "${BASH_CODE}")
      set (SCRIPT "${BASH_CODE}\n${SCRIPT}")
    endif ()
  endif ()
  # add shebang directive/Windows Command code
  if (NOT MODULE AND NOT WITH_EXT)
    if (LANGUAGE MATCHES "PYTHON")
      if (INTERPRETER MATCHES "jython")
        if (JYTHON_EXECUTABLE)
          if (WIN32)
            set (SCRIPT "@setlocal enableextensions & \"${JYTHON_EXECUTABLE}\" -x \"%~f0\" %* & goto :EOF\n${SCRIPT}")
          else ()
            set (SCRIPT "#! ${JYTHON_EXECUTABLE}\n${SCRIPT}")
          endif ()
        endif ()
      else ()
        if (PYTHON_EXECUTABLE)
          if (WIN32)
            set (SCRIPT "@setlocal enableextensions & \"${PYTHON_EXECUTABLE}\" -x \"%~f0\" %* & goto :EOF\n${SCRIPT}")
          else ()
            set (SCRIPT "#! ${PYTHON_EXECUTABLE}\n${SCRIPT}")
          endif ()
        endif ()
      endif ()
    elseif (LANGUAGE MATCHES "PERL" AND PERL_EXECUTABLE)
      if (WIN32)
        set (SCRIPT "@goto = \"START_OF_BATCH\" ;\n@goto = ();\n${SCRIPT}")
        set (SCRIPT "${SCRIPT}\n\n__END__\n\n:\"START_OF_BATCH\"\n@\"${PERL_EXECUTABLE}\" -w -S \"%~f0\" %*")
      else ()
        set (SCRIPT "#! ${PERL_EXECUTABLE} -w\n${SCRIPT}")
      endif ()
    elseif (LANGUAGE MATCHES "BASH" AND BASH_EXECUTABLE)
      set (SCRIPT "#! ${BASH_EXECUTABLE}\n${SCRIPT}")
    endif ()
  endif ()
  # write configured script
  file (WRITE "${CONFIGURED_FILE}" "${SCRIPT}")
endfunction ()

# ============================================================================
# main
# ============================================================================

# build script for use in build tree
set (BUILD_INSTALL_SCRIPT FALSE)
set (DIR                  "${BINARY_DIR}")
set (FILE                 "${BINARY_DIR}/${NAME}")

include ("@BINARY_CONFIG_DIR@/BasisScriptConfig.cmake" OPTIONAL)
include ("@BINARY_CONFIG_DIR@/ScriptConfig.cmake" OPTIONAL)
include ("@BUILD_DIR@/ScriptConfig.cmake" OPTIONAL)

@COMPILE_DEFINITIONS@

basis_configure_script ("${SCRIPT_FILE}" "${CONFIGURED_FILE}")

if (MODULE AND COMPILE)
  if (LANGUAGE MATCHES "PYTHON")
    execute_process (COMMAND "@PYTHON_EXECUTABLE@" -c "import py_compile; py_compile.compile('${CONFIGURED_FILE}')")
  endif ()
elseif (NOT MODULE AND UNIX)
  execute_process (COMMAND /bin/chmod +x "@CONFIGURED_FILE@")
endif ()

# build script for installation tree (optional)
if (CONFIGURED_INSTALL_FILE)
  set (BUILD_INSTALL_SCRIPT TRUE)
  set (DIR                  "${INSTALL_DIR}")
  set (FILE                 "${INSTALL_DIR}/${NAME}")

  include ("@BINARY_CONFIG_DIR@/BasisScriptConfig.cmake" OPTIONAL)
  include ("@BINARY_CONFIG_DIR@/ScriptConfig.cmake" OPTIONAL)
  include ("@BUILD_DIR@/ScriptConfig.cmake" OPTIONAL)

  @COMPILE_DEFINITIONS@
  
  basis_configure_script ("${SCRIPT_FILE}" "${CONFIGURED_INSTALL_FILE}")

  if (MODULE AND COMPILE AND LANGUAGE MATCHES "PYTHON")
    execute_process (COMMAND "@PYTHON_EXECUTABLE@" -c "import py_compile; py_compile.compile('${CONFIGURED_INSTALL_FILE}')")
  endif ()
endif ()
