##############################################################################
# @file  ScriptConfig.cmake.in
# @brief Default script configuration.
#
# @note The file ScriptConfig.cmake.in is configured and used by BASIS to
#       generate CMake build scripts used to "build" script files.
#
# This CMake file defines CMake variables which can be used within scripts.
# If the project structure differs for the build tree and the install tree,
# the CMake variables used within the script can be set depending on the
# value of the variable BUILD_INSTALL_SCRIPT. This variable evaluates to true,
# when the script is build, i.e., configured, for the installation tree and
# to false, otherwise.
#
# Example:
# @code
# if (BUILD_INSTALL_SCRIPT)
#   set (BIN_DIR "@INSTALL_BIN_DIR@")
# else ()
#   set (BIN_DIR "@CMAKE_RUNTIME_OUTPUT_DIRECTORY@")
# endif ()
# @endcode
#
# Avoid the use of absolute paths, however! Instead, use the variable
# SCRIPT_DIR which is set to the directory of the script file to make these
# paths relative to the directory of the script file. The relative paths
# determined by the script configuration script shall be used in the script.
# Therefore, the script has to determine its directory at runtime. This can
# usually easily be done by extracting the path component from the first argument.
#
# Example:
# @code
# # /usr/bin/env bash
# @BASH_FUNCTION_get_executable_directory@
# exec_dir=$(get_executable_directory)
# data_dir=$exec_dir/@DATA_DIR@
# @endcode
#
# where DATA_DIR is the relative path determined during the script configuration.
# See documentation of basis_set_script_path_definition() for a convenience
# function which can be used just for that. This function generates the
# definition of a function which is prepended to this script configuration.
# Use this function as follows within the script configuration file.
#
# Example:
# @code
# basis_set_script_path (DATA_DIR "@PROJECT_DATA_DIR@" "@INSTALL_DATA_DIR@")
# @endcode
#
# Copyright (c) 2011 University of Pennsylvania. All rights reserved.
# See https://www.rad.upenn.edu/sbia/software/license.html or COPYING file.
#
# Contact: SBIA Group <sbia-software at uphs.upenn.edu>
#
# @ingroup CMakeTemplates
##############################################################################

# ============================================================================
# script attributes
# ============================================================================

# Note: The NAME variable is set inside the build script prior to the inclusion
#       of the configured script configuration. This is done by the function
#       basis_add_script_finalize().

string (TOUPPER "${NAME}" NAME_UPPER)
string (TOLOWER "${NAME}" NAME_LOWER)

string (REGEX REPLACE "[^a-zA-Z0-9]" "_" NAMESPACE "${NAME}")
string (TOUPPER "${NAMESPACE}" NAMESPACE_UPPER)
string (TOLOWER "${NAMESPACE}" NAMESPACE_LOWER)

# ============================================================================
# project attributes
# ============================================================================

set (PROJECT_NAME          "@PROJECT_NAME@")
set (PROJECT_NAME_UPPER    "@PROJECT_NAME_UPPER@")
set (PROJECT_NAME_LOWER    "@PROJECT_NAME_LOWER@")
set (PROJECT_VERSION       "@PROJECT_VERSION@")
set (PROJECT_VERSION_MAJOR "@PROJECT_VERSION_MAJOR@")
set (PROJECT_VERSION_MINOR "@PROJECT_VERSION_MINOR@")
set (PROJECT_VERSION_PATCH "@PROJECT_VERSION_PATCH@")
set (PROJECT_REVISION      "@PROJECT_REVISION@")

# project version in a format that can be used with $VERSION variable in Perl
set (PROJECT_VERSION_PERL "${PROJECT_VERSION_MAJOR}")
if (PROJECT_VERSION_MAJOR LESS 10)
  set (PROJECT_VERSION_PERL "${PROJECT_VERSION_PERL}.0${PROJECT_VERSION_MINOR}")
else ()
  set (PROJECT_VERSION_PERL "${PROJECT_VERSION_PERL}.${PROJECT_VERSION_MINOR}")
endif ()
if (PROJECT_VERSION_PATCH LESS 10)
  set (PROJECT_VERSION_PERL "${PROJECT_VERSION_PERL}_0${PROJECT_VERSION_PATCH}")
else ()
  set (PROJECT_VERSION_PERL "${PROJECT_VERSION_PERL}_${PROJECT_VERSION_PATCH}")
endif ()

# ============================================================================
# directories
# ============================================================================

basis_set_script_path (RUNTIME_DIR "@CMAKE_RUNTIME_OUTPUT_DIRECTORY@" "@INSTALL_RUNTIME_DIR@")
basis_set_script_path (LIBEXEC_DIR "@CMAKE_LIBRARY_OUTPUT_DIRECTORY@" "@INSTALL_LIBEXEC_DIR@")
basis_set_script_path (LIBRARY_DIR "@CMAKE_LIBRARY_OUTPUT_DIRECTORY@" "@INSTALL_LIBRARY_DIR@")
basis_set_script_path (ARCHIVE_DIR "@CMAKE_ARCHIVE_OUTPUT_DIRECTORY@" "@INSTALL_ARCHIVE_DIR@")
basis_set_script_path (DATA_DIR    "@PROJECT_DATA_DIR@"               "@INSTALL_SHARE_DIR@")

# ============================================================================
# utility implementations
# ============================================================================

# Note: Most of the utility implemenations should go into the StdAux.sh module.
#       Only code that has to be substituted within each BASH script itself,
#       should go here.

##############################################################################
# @brief Absolute path of current BASH file.
#
# @note Does not resolve symbolic links.
#
# Example:
# @code
# readonly __MYMODULE=@BASIS_BASH___FILE__@
# @endcode
set (BASIS_BASH___FILE__ "$(cd -P -- \"$(dirname -- \"\${BASH_SOURCE}\")\" && pwd -P)/$(basename -- \"$BASH_SOURCE\")")

##############################################################################
# @brief Absolute path of directory of current BASH file.
#
# @note Does not resolve symbolic links.
#
# Example:
# @code
# readonly __MYMODULE_dir=@BASIS_BASH___DIR__@
# @endcode
set (BASIS_BASH___DIR__ "$(cd -P -- \"$(dirname -- \"\${BASH_SOURCE}\")\" && pwd -P)")

##############################################################################
# @brief Definition of _get_executable_directory() function.
#
# @attention As the leading '_' indicates, this function is private and
#            not intended for direct use. Instead, the ExecutableTargetInfo
#            BASH module provides a more general get_executable_directory()
#            function which internally makes use of this function.
#            Hence, use get_executable_directory() from the
#            ExecutableTargetInfo module instead.
#
# Example:
# @code
# #! /usr/bin/env bash
# @BASH_FUNCTION__get_executable_directory@
# exec_dir=$(_get_executable_directory)
# @endcode
#
# @sa http://stackoverflow.com/questions/7665/how-to-resolve-symbolic-links-in-a-shell-script

set (BASIS_BASH_FUNCTION_realpath "
##############################################################################
# @brief Get real path of given file or directory.
#
# @note This function was substituted by BASIS for the string @BASIS_BASH_UTILITIES@
#       of @BASIS_BASH_realpath@. Its implementation can be found in the
#       default script configuration file provided by BASIS.
#
# @sa http://stackoverflow.com/questions/7665/how-to-resolve-symbolic-links-in-a-shell-script
#
# @params [in] path File or directory path.
#
# @returns Canonical path.
realpath ()
{
    local path=$1

    local linkdir=''
    local symlink=''

    while [ -h \${path} ]; do
        # 1) change to directory of the symbolic link
        # 2) change to directory where the symbolic link points to
        # 3) get the current working directory
        # 4) append the basename
        linkdir=$(dirname -- \"\${path}\")
        symlink=$(readlink \${path})
        path=$(cd \"\${linkdir}\" && cd $(dirname -- \"\${symlink}\") && pwd)/$(basename -- \"\${symlink}\")
    done

    echo -n \"$(cd -P -- \"$(dirname \"\${path}\")\" && pwd -P)/$(basename -- \"\${path}\")\"
}
"
)

##############################################################################
# @brief Common BASH code to be used at the top of each BASH script.
#
# Example:
# @code
# #! /usr/bin/env bash
# @BASIS_BASH_UTILITIES@
# exec_dir=$(get_executable_directory)
# exec_name=$(get_executable_name)
# @endcode
#
# @sa StdAux.sh
# @sa BASH_FUNCTION_realpath
#
# @ingroup BashUtilities

set (BASIS_BASH_UTILITIES "
${BASIS_BASH_FUNCTION_realpath}
readonly __${NAMESPACE_UPPER}_dir=${BASIS_BASH___DIR__}
source \"$(realpath \${__${NAMESPACE_UPPER}_dir})/${LIBRARY_DIR}/StdAux.sh\"
"
)

# ----------------------------------------------------------------------------
# Python
# ----------------------------------------------------------------------------

## @addtogroup PythonUtilities
#  @{


##############################################################################
# @brief Definition of get_executable_directory() function.
#
# Example:
# @code
# @PYTHON_FUNCTION_get_executable_directory@
# exec_dir = get_executable_directory ()
# @endcode

set (PYTHON_FUNCTION_get_executable_directory "
# ****************************************************************************
def get_executable_directory ():
    \"Get real directory of executable.\"
    import sys
    import os
    return os.path.realpath (os.path.dirname (sys.argv [0]))
"
)

##############################################################################
# @brief Definition of get_executable_name() function.
#
# Example:
# @code
# @PYTHON_FUNCTION_get_executable_name@
# exec_name = get_executable_name ()
# @endcode

set (PYTHON_FUNCTION_get_executable_name "
# ****************************************************************************
def get_executable_name ():
    \"\"\"Get name of program without path.\"\"\"
    import sys
    import os
    return os.path.basename (sys.argv [0])
"
)


## @}

# ----------------------------------------------------------------------------
# Perl
# ----------------------------------------------------------------------------

##############################################################################
# @brief Common Perl code to be used at the top of each Perl script.
#
# Example:
# @code
# #! /usr/bin/env perl
# @BASIS_PERL_UTILITIES@
# my $exec_dir  = get_executable_directory ();
# my $exec_name = get_executable_name ();
# @endcode
#
# @sa StdAux.pm
# @sa ExecutableTargetInfo.pm
#
# @ingroup PerlUtilities

set (BASIS_PERL_UTILITIES "
use strict;
use warnings;

use File::Basename;
use lib dirname (__FILE__) . \"/${LIBRARY_DIR}\";
use lib dirname (__FILE__);

use StdAux;
"
)
