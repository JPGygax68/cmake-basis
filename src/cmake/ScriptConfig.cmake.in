##############################################################################
#! @file  ScriptConfig.cmake.in
#! @brief Default script configuration.
#!
#! @note The file ScriptConfig.cmake.in is configured and used by BASIS to
#!       generate CMake build scripts used to "build" script files.
#!
#! This CMake file defines CMake variables which can be used within scripts.
#! If the project structure differs for the build tree and the install tree,
#! the CMake variables used within the script can be set depending on the
#! value of the variable BUILD_INSTALL_SCRIPT. This variable evaluates to true,
#! when the script is build, i.e., configured, for the installation tree and
#! to false, otherwise.
#!
#! Example:
#! @code
#! if (BUILD_INSTALL_SCRIPT)
#!   set (BIN_DIR "@CMAKE_INSTALL_PREFIX@/bin")
#! else ()
#!   set (BIN_DIR "\@CMAKE_RUNTIME_OUTPUT_DIRECTORY\@")
#! endif ()
#! @endcode
#!
#! Avoid the use of absolute paths, however! Instead, use the variable
#! SCRIPT_DIR which is set to the directory of the script file to make these
#! paths relative to the directory of the script file. The relative paths
#! determined by the script configuration script shall be used in the script.
#! Therefore, the script has to determine its directory at runtime. This can
#! usually easily be done by extracting the path component from the first argument.
#!
#! Example:
#! @code
#! #! /usr/bin/env bash
#! progDir=`dirname $0`
#! dataDir=$progDir/\@ETC_DIR\@
#! @endcode
#!
#! where ETC_DIR is the relative path determined during the script configuration.
#! See documentation of basis_set_script_path_definition() for a convenience
#! function which can be used just for that. This function generates the
#! definition of a function which is prepended to this script configuration.
#! Use this function as follows within this file.
#!
#! Example:
#! @code
#! basis_set_script_path (ETC_DIR "\@PROJECT_ETC_DIR\@" "\@INSTALL_ETC_DIR\@")
#! @endcode
#!
#! Copyright (c) 2011 University of Pennsylvania. All rights reserved.
#! See https://www.rad.upenn.edu/sbia/software/license.html or COPYING file.
#!
#! Contact: SBIA Group <sbia-software at uphs.upenn.edu>
#!
#! @ingroup CMakeHelpers
##############################################################################

# ============================================================================
# project attributes
# ============================================================================

set (VERSION       "@PROJECT_VERSION@")
set (VERSION_MAJOR "@PROJECT_VERSION_MAJOR@")
set (VERSION_MINOR "@PROJECT_VERSION_MINOR@")
set (VERSION_PATCH "@PROJECT_VERSION_PATCH@")
set (REVISION      "@PROJECT_REVISION@")

# ============================================================================
# directories
# ============================================================================

basis_set_script_path (RUNTIME_DIR "@CMAKE_RUNTIME_OUTPUT_DIRECTORY@" "@INSTALL_RUNTIME_DIR@")
basis_set_script_path (LIBEXEC_DIR "@CMAKE_RUNTIME_OUTPUT_DIRECTORY@" "@INSTALL_LIBEXEC_DIR@")
basis_set_script_path (LIBRARY_DIR "@CMAKE_LIBRARY_OUTPUT_DIRECTORY@" "@INSTALL_LIBRARY_DIR@")
basis_set_script_path (ARCHIVE_DIR "@CMAKE_ARCHIVE_OUTPUT_DIRECTORY@" "@INSTALL_ARCHIVE_DIR@")
basis_set_script_path (DATA_DIR    "@PROJECT_DATA_DIR@"               "@INSTALL_SHARE_DIR@")

# ============================================================================
# utility implementations
# ============================================================================

# ----------------------------------------------------------------------------
# BASH
# ----------------------------------------------------------------------------

set (BASH_FUNCTION_get_executable_directory "
# ****************************************************************************
# \\brief Get real directory of executable.
#
# \\see http://stackoverflow.com/questions/7665/how-to-resolve-symbolic-links-in-a-shell-script
get_executable_directory ()
{
    # get the absolute path of the executable
    local path=$(cd -P -- \"$(dirname -- \"$0\")\" && pwd -P) && path=$path/$(basename -- \"$0\")

    # resolve symbolic links
    while [ -h $path ]; do
        # 1) change to directory of the symbolic link
        # 2) change to directory where the symbolic link points to
        # 3) get the current working directory
        # 4) append the basename
        local linkdir=$(dirname -- \"$path\")
        local symlink=$(readlink $path)
        path=$(cd $linkdir && cd $(dirname -- \"$symlink\") && pwd)/$(basename -- \"$symlink\")
    done

    echo `cd -P \\`dirname $path\\`; pwd -P`
}
"
)

set (BASH_FUNCTION_get_executable_name "
# ****************************************************************************
# \\brief Get name of executable.
get_executable_name ()
{
    echo \${0##*/}
}
"
)

set (BASH_FUNCTION_print_version "
# ****************************************************************************
# \\brief Print version information.
print_version ()
{
    echo -n \"$(get_executable_name) (BASIS) version @PROJECT_VERSION@\"
    if [ @PROJECT_REVISION@ -gt 0 ]; then
        echo -n \" (revision @PROJECT_REVISION@)\"
    fi
    echo
    cat - << EOF-COPYRIGHT
Copyright (c) 2011 University of Pennsylvania. All rights reserved.
See COPYING file or https://www.rad.upenn.edu/sbia/software/license.html.
EOF-COPYRIGHT
}
"
)

set (BASH_FUNCTION_print_contact "
# ****************************************************************************
# \\brief Print contact information.
print_contact ()
{
    echo \"Contact:\"
    echo \"  SBIA Group <sbia-software at uphs.upenn.edu>\"
}
"
)

# ----------------------------------------------------------------------------
# Python
# ----------------------------------------------------------------------------

set (PYTHON_FUNCTION_get_executable_directory "
# ****************************************************************************
def get_executable_directory ():
    \"\"\"Get real directory of executable.\"\"\"
    import sys
    import os
    return os.path.realpath (os.path.dirname (sys.argv [0]))
"
)

set (PYTHON_FUNCTION_get_executable_name "
# ****************************************************************************
def get_executable_name ():
    \"\"\"Get name of program without path.\"\"\"
    import sys
    import os
    return os.path.basename (sys.argv [0])
"
)

# ----------------------------------------------------------------------------
# Perl
# ----------------------------------------------------------------------------

set (PERL_FUNCTION_get_executable_directory "
# ****************************************************************************
sub get_executable_directory
{
    use Cwd qw(realpath);
    use File::Basename;
    return dirname (realpath ($0));
}
"
)

set (PERL_FUNCTION_get_executable_name "
# ****************************************************************************
sub get_executable_name
{
    use File::Basename;
    return basename ($0);
}
"
)

