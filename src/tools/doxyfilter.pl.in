##############################################################################
# @file  doxyfilter.pl
# @brief Doxygen input filter.
#
# This Perl script is used as pre-processor for input files to Doxygen.
# Depending on the file extension, it invokes the corresponding Doxygen
# filters which transform the input file into something that Doxygen
# understands.
#
# Based on the Doxygen Filter from Bart Schuller and Aeby Thomas.
# @sa http://www.bigsister.ch/doxygenfilter/
#
# Copyright (c) 2011 University of Pennsylvania. All rights reserved.
# See https://www.rad.upenn.edu/sbia/software/license.html or COPYING file.
#
# Contact: SBIA Group <sbia-software at uphs.upenn.edu>
#
# @ingroup Tools
##############################################################################

# =======================================================================
# Doxygen Pre-Processor for Perl
# Copyright (C) 2002  Bart Schuller
# Copyright (C) 2006  Phinex Informatik AG
# Copyright (C) 2011  University of Pennsylvania
# All Rights Reserved
# 
# Doxygen Filter is free software; you can redistribute it and/or modify
# it under the same terms as Perl itself.
# 
# Larry Wall's 'Artistic License' for perl can be found in
# http://www.perl.com/pub/a/language/misc/Artistic.html
# 
# =======================================================================
# 
# Author: Aeby Thomas, Phinex Informatik AG,
# 	  Based on DoxygenFilter from Bart Schuller
# E-Mail: tom.aeby@phinex.ch
# 
# Phinex Informatik AG
# Thomas Aeby
# Kirchweg 52
# 1735 Giffers
# 
# =======================================================================

@BASIS_PERL_UTILITIES@

use Cwd qw(realpath);
use SBIA::BASIS::DoxyGen::PerlFilter;
use Getopt::Long;

$Getopt::Long::ignorecase = 0;  
my $verbose;
my $help;

unless (GetOptions( "verbose" => \$verbose, "v" => \$verbose,
	  "help" => \$help, "h" => \$help ) && $ARGV[0]) {
    $help = 1;
}

if ($help) {
    my $prog = $0;
    $prog =~ s#.*/##;
    print STDERR <<END;
Usage: $prog [-v] filename

Pre-processes Perl code in file <filename> and outputs
something doxygen does understand.

END
    exit 1;
}

open (FILE, "<$ARGV[0]") or die "Failed to open file $ARGV[0]\n";
my $filehead = "";
for (my $line = 0; ($line < 3) && ($_ = <FILE>); $line++) {
    $filehead .= $_;
}
close FILE;

my $ext = '';
if ($ARGV[0] =~ /\.([a-z]+)$/i) {
    $ext = lc ($1);
}

my $filter = undef;

# Perl
if (grep ($_ eq $ext, "pl", "pm", "perl") || $filehead =~ /^#!\s*(\/usr\/bin\/perl|\/bin\/perl|\/usr\/bin\/env\s+perl)/) {
    print STDERR "treating file as Perl\n" if ($verbose);
    $filter = SBIA::BASIS::DoxyGen::PerlFilter->new (\*STDOUT);
# Python
} elsif ($ext eq "py" || $filehead =~ /^#!\s*(\/usr\/bin\/python|\/bin\/python|\/usr\/bin\/env\s+python)/) {
    print STDERR "Treating file as Python\n" if ($verbose);
    unshift (@ARGV, 'doxyfilter-python');
    push (@ARGV, '-f');
# BASH
} elsif ($ext eq "sh" || $filehead =~ /^#!\s*(\/usr\/bin\/bash|\/bin\/bash|\/usr\/bin\/env\s+bash)/) {
    print STDERR "Treating file as BASH\n" if ($verbose);
    unshift (@ARGV, 'doxyfilter-bash');
# CMake
} elsif ($ext eq "cmake" or $ext eq "ctest") {
    print STDERR "Treating file as CMake\n" if ($verbose);
    unshift (@ARGV, 'doxyfilter-cmake');
# otherwise
} else {
    print STDERR "passing file through\n" if ($verbose);
    print <>;
    exit 0;
}

# execute filter instance or external command
if ($filter) {
    $filter->filter ($ARGV [0]);
} else {
    Basis::execute_process (\@ARGV);
}
