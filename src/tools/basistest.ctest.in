##############################################################################
# @file  basistest.ctest
# @brief CTest script used to test BASIS projects.
#
# To display the help of this CTest script, run:
# @code
# ctest -S basistest.ctest,help
# @endcode
#
# Copyright (c) 2011 University of Pennsylvania. All rights reserved.
# See https://www.rad.upenn.edu/sbia/software/license.html or COPYING file.
#
# Contact: SBIA Group <sbia-software at uphs.upenn.edu>
#
# @ingroup Tools
##############################################################################

if (POLICY CMP0007)
  cmake_policy(SET CMP0007 NEW)
endif ()

# ============================================================================
# constants - define at first
# ============================================================================

# names of options whose name will be added to CTEST_TEST_OPTIONS
# instead of CTEST_CMAKE_OPTIONS
set (KNOWN_CTEST_TEST_OPTIONS
  START
  END
  STRIDE
  INCLUDE
  INCLUDE_LABEL
  EXCLUDE
  EXCLUDE_LABEL
  PARALLEL_LEVEL
)

# ============================================================================
# help
# ============================================================================

# ----------------------------------------------------------------------------
## @brief Print usage section of usage information and help screen.
#
# @param [in] ARGN Not used.
#
# @returns Nothing.

function (print_usage)
  message ("Usage:
  ctest [ctest options] -S @NAME@[,option[=value]]*

  Note: No commas or equality signs are allowed inside of option values even
        if the value is enclosed by quotation marks.")
endfunction ()

# ----------------------------------------------------------------------------
## @brief Print options section of usage information and help screen.
#
# @param [in] ARGN Not used.
#
# @returns Nothing.

function (print_options)
  message (
"  <variable>=<value>     Passes -D<variable>=<value> on to CMake for the
                         configuration of the build tree if the variable
                         name is not named in the following.

                         The values of the following variables are passed on
                         to the proper CTest scripting commands:")
  foreach (V IN LISTS KNOWN_CTEST_TEST_OPTIONS)
    message ("                           - ${V}")
  endforeach ()
  message ("
  project=<project>      Name of the BASIS project to test. If not given, this
                         script skips the update step. In this case, the srcdir
                         and bindir options have to be given, or the current
                         working directory must be the root of an already
                         configured build tree.
  basedir=<path>         Base path of both source and binary directory.
                         Default: \"${HOME}/comp_space/testing\".
  srcdir=<path>          Source directory. This option is required if this script
                         is executed in a build directory which has not been
                         configured yet and if the project option was not specified.
                         If it is run in the root directory of an already configured
                         build tree, however, the value of this option is read from
                         the CMakeCache.txt file. Otherwise, if the project option
                         was specified, it is set to
                         \"<basedir>/<model>/<project>-source/<branch>/\".
  bindir=<path>          Binary directory (i.e., root of build tree).
                         This option defaults to the current working directory
                         if the project option was not specified. Otherwise,
                         it defaults to
                         \"<basedir>/<model>/<site>/<project>-build/<branch>/\".
  url=<url>              Base URL of the project's SVN repository.
                         Only used if the project option was specified.
                         Default: \"https://sbia-svn/projects/<project>\".
  branch=<name>          Name of the SVN branch to test, e.g., \"tags/1.0.0\".
                         Default: \"trunk\".
  model=<model>          Name of the dashboard model, i.e., one of
                         \"Nightly\", \"Continuous\", and \"Experimental\".
                         Default: \"Experimental\".
  memcheck               Perform memory check. Requires valgrind.
                         No memory checks are performed by default.
  coverage               Perform coverage analysis. Requires gcov.
                         No coverage analysis is performed by default.
  install                Perform installation after successful test execution.
                         Set CMAKE_INSTALL_PREFIX to change the default installation
                         prefix used by the project (or CMake). Moreover, the
                         DESTDIR environment variable can be set to change the
                         root directory used for installations.
                         Note: Currently this script just executes \"make install\",
                               i.e., it only works with the CMake Makefile generator.
  doxygen[=<path>]       If specified, the API documentation is build
                         and the built HTML documentation copied to the
                         specified directory. If this option is given without
                         argument, the default web server location at SBIA is used,
                         i.e., \"/sbia/web/software/doxygen/<project>/<branch>\".
  shared-source          Specify that each test site should use the same copy of
                         the sources. By default, each test site uses its own copy.
  common-site=<prefix>   Do not distinguish between different sites with a common
                         prefix in the name. Useful when the test jobs are executed
                         on a commonly configured cluster.
  site=<site>            Use given site name no matter on which actual machine
                         the test is executed.
  force-build            Force build even if no files were updated.
  force-test             Force test even if no files were updated.
  force                  Alias for options force-build, and force-test.
  tmpbin                 Delete binary directory on completion (also if not successful).
  help                   Prints help and exits without performing any test.
  helpshort              Prints short help and exits without performing any test.
  helpoptions            Prints help on options and exists without performing any test.
  version                Prints version information and exits.")
endfunction ()

# ----------------------------------------------------------------------------
## @brief Print contact section of usage information and help screen.
#
# @param [in] ARGN Not used.
#
# @returns Nothing.

function (print_contact)
  message ("
Contact:
  SBIA Group <sbia-software at uphs.upenn.edu>")
endfunction ()

# ----------------------------------------------------------------------------
## @brief Print help screen.
#
# @param [in] ARGN Not used.
#
# @returns Nothing.

function (print_help)
  print_usage ()
  message ("
Description:
  This CTest script is used at SBIA for nightly testing of software projects.
  Nightly tests are scheduled by a cron job, for example, every night once.
  Contrary to continous testing, does the nightly testing job not loop for
  a certain time of iterations and look for changes actively. The nightly
  testing job will only perform one test run and then exit.

  Note: Due to a bug in CTest 2.8.2, the first test will fail because of
        a missing CTestConfig.cmake file if the source tree is not checked
        out already. Therefore, the use of CTest 2.8.4 is recommened.

Dashboard models:
  By default, the dashboard models \"Nightly\", \"Continuous\", and \"Experimental\"
  are configured as follows. These default configurations can be modified by
  supplying the available options listed below.
  
    Nightly        Performs all test stages even if the project has not been
                   updated since the last test run.
    Continuous     Performs an update of the project's working copy and
                   exits without submission of any test results if no files
                   were updated. Otherwise, it performs all test stages.
    Experimental   Performs all test stages even if the project has not been
                   updated since the last test run.
 
  Attention: For each model, only one test process may be running for each
             project on each site at one time.
             
Build configurations:
  By default, the Release configuration is used. If the coverage option is
  given, the Coverage configuration is used. If the memcheck option is given
  instead, the MemCheck configuration is used. If both coverage and memcheck
  options are given, the Coverage configuration is chosen because it generally
  can also be used to perform memory checks, while the reported line numbers
  may be incorrect in this case, however. Use the CMAKE_BUILD_TYPE variable
  to explicitly specify a build configuration.")
  message ("
Options:")
  print_options ()
  message ("
Example:
  ctest -V -S basistest.ctest

    Run this command in the root directory of an already configured build tree
    to test this project.

  ctest -V -S basistest.ctest,coverage

    Run this command in the root directory of an already configured build tree
    to test this project and include coverage analysis results in the test report.

  ctest -V -S basistest.ctest,project=BASIS,model=Experimental,coverage,memcheck

    Performs an experimental nightly test of the main development branch of
    BASIS itself, including coverage analysis and memory checks.
    The -V option of ctest enables more verbose output of CTest.
    Even more verbose output can be requested using -VV.")
  print_contact ()
endfunction ()

# ----------------------------------------------------------------------------
## @brief Print usage information.
#
# @param [in] ARGN Not used.
#
# @returns Nothing.

function (print_helpshort)
  print_usage ()
  message ("
Options:")
  print_options ()
  print_contact ()
endfunction ()

# ----------------------------------------------------------------------------
## @brief Print version information.
#
# @param [in] ARGN Not used.
#
# @returns Nothing.

function (print_version)
  set (VERSION_INFO "version @PROJECT_VERSION@")
  if (@PROJECT_REVISION@ GREATER 0) # project revision > 0
    set (VERSION_INFO "${VERSION_INFO} (revision @PROJECT_REVISION@)")
  endif ()
  message ("CTest script @NAME@ (@PROJECT_NAME@) ${VERSION_INFO}")
  message ("Copyright (c) 2011 University of Pennsylvania. All rights reserved.")
  message ("See COPYING file or https://www.rad.upenn.edu/sbia/software/license.html.")
endfunction ()

# ============================================================================
# helpers
# ============================================================================

# ----------------------------------------------------------------------------
## @brief Read value from CMake cache.
#
# @param [in, out] VAR  Name of CMake variable.
# @param [in]      ARGN Not used.
#
# @returns Sets @p VAR to the value of the cached variable @p VAR.
function (read_cmake_cache_value VAR)
  file (STRINGS "${CTEST_BINARY_DIRECTORY}/CMakeCache.txt" ENTRY REGEX "${VAR}:.*=(.*)")
  string (REGEX REPLACE "${VAR}:.*=(.*)" "\\1" VALUE "${ENTRY}")
  set (${VAR} "${VALUE}" PARENT_SCOPE)
endfunction ()

# ============================================================================
# settings
# ============================================================================

set (MANUAL_MODE FALSE) # whether this script is running in manual mode, i.e.,
                        # executed in the build tree of an existing project
                        # instead of run by a cron job

# ----------------------------------------------------------------------------
# general
set (CTEST_BASE_DIRECTORY   "$ENV{HOME}/comp_space/testing")
set (CTEST_SOURCE_DIRECTORY "")
set (CTEST_BINARY_DIRECTORY "")
set (CTEST_MODEL            "Experimental")
set (SHARED_SOURCE          FALSE)
set (COMMON_SITE_PREFIXES)

# ----------------------------------------------------------------------------
# project attributes
set (CTEST_PROJECT_NAME "")
set (CTEST_SVN_URL      "https://sbia-svn/projects/\@CTEST_PROJECT_NAME\@")
set (CTEST_SVN_BRANCH   "trunk")

# ----------------------------------------------------------------------------
# build configuration
set (CTEST_CMAKE_GENERATOR "Unix Makefiles")
set (CTEST_BUILD_TYPE      "")
set (CTEST_CMAKE_OPTIONS)

set (WITH_MEMCHECK FALSE) # whether to perform memory checks
set (WITH_COVERAGE FALSE) # whether to perform coverage analysis

#set (CTEST_MEMORYCHECK_SUPPRESSIONS_FILE "config/valgrind.sup")

# ----------------------------------------------------------------------------
# test execution
set (CTEST_TEST_OPTIONS)

set (FORCE_BUILD    FALSE)
set (FORCE_TEST     FALSE)

# ----------------------------------------------------------------------------
# installation directories

# install project files after successful test execution
set (WITH_INSTALL FALSE)
# output directory for built Doxygen documentation
set (INSTALL_DOXYGEN_DIR)

# ============================================================================
# options
# ============================================================================

macro (set_bool_option VAR)
  if (VALUE)
    set (FAILURE TRUE)
  else ()
    set (${VAR} TRUE)
  endif ()
endmacro ()

macro (set_option VAR)
  if (VALUE)
    set (${VAR} "${VALUE}")
  else ()
    set (FAILURE TRUE)
  endif ()
endmacro ()

macro (append_option VAR)
  if (VALUE)
    list (APPEND ${VAR} "${VALUE}")
  else ()
    set (FAILURE TRUE)
  endif ()
endmacro ()

string (REPLACE "," ";" ARGV "${CTEST_SCRIPT_ARG}")
foreach (ARG ${ARGV})
  set (FAILURE FALSE)
  set (OPTION "")
  set (VALUE  "")

  string (REPLACE "=" ";" PARTS "${ARG}")
  list (LENGTH PARTS LEN)

  if (LEN EQUAL 1)
    set (OPTION "${PARTS}")
  elseif (LEN EQUAL 2)
    list (GET PARTS 0 OPTION)
    list (GET PARTS 1 VALUE)
  endif ()
 
  if (OPTION)
    if (${OPTION} STREQUAL "project")
      set_option (CTEST_PROJECT_NAME)
    elseif (${OPTION} STREQUAL "model")
      set_option (CTEST_MODEL)
    elseif (${OPTION} STREQUAL "basedir")
      set_option (CTEST_BASE_DIRECTORY)
    elseif (${OPTION} STREQUAL "srcdir")
      set_option (CTEST_SOURCE_DIRECTORY)
    elseif (${OPTION} STREQUAL "bindir")
      set_option (CTEST_BINARY_DIRECTORY)
    elseif (${OPTION} STREQUAL "url")
      set_option (CTEST_SVN_URL)
    elseif (${OPTION} STREQUAL "branch")
      set_option (CTEST_SVN_BRANCH)
    elseif (${OPTION} STREQUAL "memcheck")
      set_bool_option (WITH_MEMCHECK)
    elseif (${OPTION} STREQUAL "coverage")
      set_bool_option (WITH_COVERAGE)
    elseif (${OPTION} STREQUAL "tmpbin")
      set_bool_option (TMPBIN)
    elseif (${OPTION} STREQUAL "install")
      set_bool_option (WITH_INSTALL)
    elseif (${OPTION} STREQUAL "doxygen")
      if (VALUE)
        set_option (INSTALL_DOXYGEN_DIR)
      else ()
        set (INSTALL_DOXYGEN_DIR "/sbia/web/software/doxygen/\@CTEST_PROJECT_NAME_LOWER\@/\@CTEST_SVN_BRANCH\@")
      endif ()
    elseif (${OPTION} STREQUAL "shared-source")
      set_bool_option (SHARED_SOURCE)
    elseif (${OPTION} STREQUAL "common-site")
      append_option (COMMON_SITE_PREFIXES)
    elseif (${OPTION} STREQUAL "site")
        set_option (CTEST_SITE)
    elseif (${OPTION} STREQUAL "force")
      set_bool_option (FORCE_BUILD)
      set_bool_option (FORCE_TEST)
    elseif (${OPTION} STREQUAL "force-build")
      set_bool_option (FORCE_BUILD)
    elseif (${OPTION} STREQUAL "force-test")
      set_bool_option (FORCE_TEST)
    elseif (${OPTION} STREQUAL "version")
      print_version ()
      return ()
    elseif (${OPTION} STREQUAL "help")
      print_help ()
      return ()
    elseif (${OPTION} STREQUAL "helpshort")
      print_helpshort ()
      return ()
    elseif (${OPTION} STREQUAL "helpoptions")
      print_options ()
      return ()
    else ()
      if (NOT VALUE)
        set (FAILURE TRUE)
      else ()
        string (TOUPPER "${OPTION}" OPTION_UPPER)
        list (FIND KNOWN_CTEST_TEST_OPTIONS "${OPTION_UPPER}" IDX)
        if (IDX EQUAL -1)
          if (OPTION MATCHES "^CMAKE_BUILD_TYPE$")
            set (CTEST_BUILD_TYPE "${VALUE}")
          else ()
            set (CTEST_CMAKE_OPTIONS "${CTEST_CMAKE_OPTIONS} \"-D${OPTION}=${VALUE}\"")
          endif ()
        else ()
          list (APPEND CTEST_TEST_OPTIONS "${OPTION_UPPER}" "${VALUE}")
        endif ()
      endif ()
    endif ()
  else ()
    set (FAILURE TRUE)
  endif ()

  if (FAILURE)
    message (FATAL_ERROR "Invalid options: ${CTEST_SCRIPT_ARG}
Failed to parse argument \"${ARG}\" (option: ${OPTION}, value: ${VALUE})")
  endif ()
endforeach ()

if (NOT CTEST_PROJECT_NAME)
  set (MANUAL_MODE TRUE)
  # automatically set binary directory if not specified
  if (NOT CTEST_BINARY_DIRECTORY)
    if (UNIX)
      find_program (PWD pwd)
    else ()
      find_program (PWD cd)
    endif ()
    execute_process (
      COMMAND "${PWD}"
      RESULT_VARIABLE RT
      OUTPUT_VARIABLE CWD
      OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if (RT EQUAL 0)
      set (CTEST_BINARY_DIRECTORY "${CWD}")
    else ()
      message (FATAL_ERROR "Failed to get current working directory! Try using the bindir option instead.")
    endif ()
  endif ()
  # set project name from CMake cache
  if (EXISTS "${CTEST_BINARY_DIRECTORY}/CMakeCache.txt")
    read_cmake_cache_value (CMAKE_PROJECT_NAME)
    if (NOT CMAKE_PROJECT_NAME)
      message (FATAL_ERROR "Failed to read project name from ${CTEST_BINARY_DIRECTORY}/CMakeCache.txt!")
    endif ()
    set (CTEST_PROJECT_NAME "${CMAKE_PROJECT_NAME}")
  endif ()
  # automatically set source directory if not specified
  if (NOT CTEST_SOURCE_DIRECTORY)
    if (NOT EXISTS "${CTEST_BINARY_DIRECTORY}/CMakeCache.txt")
      message (FATAL_ERROR "Missing CMakeCache.txt file! Either specify source directory using the srcdir option or initialize the build tree.")
    endif ()
    read_cmake_cache_value (${CTEST_PROJECT_NAME}_SOURCE_DIR)
    if (NOT ${CTEST_PROJECT_NAME}_SOURCE_DIR)
      message (FATAL_ERROR "Failed to read source directory from ${CTEST_BINARY_DIRECTORY}/CMakeCache.txt!")
    endif ()
    set (CTEST_SOURCE_DIRECTORY "${${CTEST_PROJECT_NAME}_SOURCE_DIR}")
  endif ()
endif ()

if (NOT CTEST_BINARY_DIRECTORY)
  set (CTEST_BINARY_DIRECTORY "${CTEST_SOURCE_DIRECTORY}")
endif ()

string (TOLOWER "${CTEST_PROJECT_NAME}" CTEST_PROJECT_NAME_LOWER)
string (TOUPPER "${CTEST_PROJECT_NAME}" CTEST_PROJECT_NAME_UPPER)

if (CTEST_MODEL MATCHES "Nightly|Experimental")
  set (FORCE_BUILD TRUE)
  set (FORCE_TEST  TRUE)
endif ()

# ============================================================================
# initialization
# ============================================================================

# ----------------------------------------------------------------------------
# testing tools
find_program (
  CTEST_SVN_COMMAND
  NAMES basistest-svn
  HINTS "${CMAKE_CURRENT_LIST_DIR}/@RUNTIME_DIR@"
)
find_program (CTEST_SVN_COMMAND         NAMES svn)
find_program (CTEST_COVERAGE_COMMAND    NAMES gcov)
find_program (CTEST_MEMORYCHECK_COMMAND NAMES valgrind)

if (NOT CTEST_SVN_COMMAND)
  message (FATAL_ERROR "Could not find \"basistest-svn\" or \"svn\" command!")
endif ()

if (NOT CTEST_COVERAGE_COMMAND AND WITH_COVERAGE)
  message (FATAL_ERROR "Cannot perform coverage analysis without gcov")
endif ()
if (NOT CTEST_MEMORYCHECK_COMMAND AND WITH_MEMCHECK)
  message (FATAL_ERROR "Cannot perform memory checks without valgrind")
endif ()

# ----------------------------------------------------------------------------
# site information
if (NOT CTEST_SITE)
  site_name (CTEST_SITE)

  # remove ".local" or ".uphs.upenn.edu" suffix from site name
  string (REGEX REPLACE "\\.local$|\\.uphs\\.upenn\\.edu$" "" CTEST_SITE "${CTEST_SITE}")

  # common site name
  if (COMMON_SITE_PREFIXES)
    foreach (P ${COMMON_SITE_PREFIXES})
      if (CTEST_SITE MATCHES "^${P}")
        set (CTEST_SITE "${P}")
        break ()
      endif ()
    endforeach ()
  endif ()
endif ()

# ----------------------------------------------------------------------------
# build information
if (NOT CTEST_BUILD_TYPE)
  if (WITH_COVERAGE)
    set (CTEST_BUILD_TYPE "Coverage")
  elseif (WITH_MEMCHECK)
    set (CTEST_BUILD_TYPE "MemCheck")
  else ()
    set (CTEST_BUILD_TYPE "Release")
  endif ()
endif ()

# Note: The build name given in the .xml files will be replaced by this script
#       before the submission once the used compiler could be determined.
set (CTEST_BUILD_NAME "${CMAKE_SYSTEM_NAME}-${CTEST_BUILD_TYPE}-<compiler>")

# ----------------------------------------------------------------------------
# directories
if (NOT MANUAL_MODE)
  if (NOT CTEST_SOURCE_DIRECTORY)
    if (SHARED_SOURCE)
      set (CTEST_SOURCE_DIRECTORY "${CTEST_BASE_DIRECTORY}/${CTEST_MODEL}/shared/${CTEST_PROJECT_NAME}-source/${CTEST_SVN_BRANCH}")
    else ()
      set (CTEST_SOURCE_DIRECTORY "${CTEST_BASE_DIRECTORY}/${CTEST_MODEL}/${CTEST_SITE}/${CTEST_PROJECT_NAME}-source/${CTEST_SVN_BRANCH}")
    endif ()
  endif ()
  if (NOT CTEST_BINARY_DIRECTORY)
    set (CTEST_BINARY_DIRECTORY "${CTEST_BASE_DIRECTORY}/${CTEST_MODEL}/${CTEST_SITE}/${CTEST_PROJECT_NAME}-build/${CTEST_SVN_BRANCH}/${CTEST_BUILD_TYPE}")
  endif ()
endif ()

string (CONFIGURE "${INSTALL_DOXYGEN_DIR}" INSTALL_DOXYGEN_DIR)

if (MANUAL_MODE)
  set (CTEST_START_WITH_EMPTY_BINARY_DIRECTORY FALSE)
else ()
  set (CTEST_START_WITH_EMPTY_BINARY_DIRECTORY TRUE)
endif ()

# ----------------------------------------------------------------------------
# memory check suppressions file
if (CTEST_MEMORYCHECK_SUPPRESSIONS_FILE AND NOT IS_ABSOLUTE "${CTEST_MEMORYCHECK_SUPPRESSIONS_FILE}")
  set (
    CTEST_MEMORYCHECK_SUPPRESSIONS_FILE
      "${CTEST_SOURCE_DIRECTORY}/${CTEST_MEMORYCHECK_SUPPRESSIONS_FILE}"
  )
endif ()

# ----------------------------------------------------------------------------
# test commands
string (CONFIGURE "${CTEST_SVN_URL}" CTEST_SVN_URL @ONLY)

if (NOT EXISTS "${CTEST_SOURCE_DIRECTORY}")
  file (MAKE_DIRECTORY "${CTEST_SOURCE_DIRECTORY}")
  set (CTEST_CHECKOUT_COMMAND "${CTEST_SVN_COMMAND} co \"${CTEST_SVN_URL}/${CTEST_SVN_BRANCH}\" ${CTEST_SOURCE_DIRECTORY}")
endif ()

set (CTEST_UPDATE_COMMAND "${CTEST_SVN_COMMAND}")

set (CTEST_CONFIGURE_COMMAND "\"${CMAKE_COMMAND}\"")
if (CTEST_BUILD_TYPE)
  set (CTEST_CONFIGURE_COMMAND "${CTEST_CONFIGURE_COMMAND} -DCMAKE_BUILD_TYPE:STRING=${CTEST_BUILD_TYPE}")
endif ()
set (CTEST_CONFIGURE_COMMAND "${CTEST_CONFIGURE_COMMAND} -DBUILD_TESTING:BOOL=ON")
if (INSTALL_DOXYGEN_DIR)
  set (CTEST_CONFIGURE_COMMAND "${CTEST_CONFIGURE_COMMAND} -DBUILD_DOCUMENTATION:BOOL=ON")
else ()
  set (CTEST_CONFIGURE_COMMAND "${CTEST_CONFIGURE_COMMAND} -DBUILD_DOCUMENTATION:BOOL=OFF")
endif ()
if (CTEST_CMAKE_OPTIONS)
  set (CTEST_CONFIGURE_COMMAND "${CTEST_CONFIGURE_COMMAND} ${CTEST_CMAKE_OPTIONS}")
endif ()
set (CTEST_CONFIGURE_COMMAND "${CTEST_CONFIGURE_COMMAND} \"-G${CTEST_CMAKE_GENERATOR}\"")
set (CTEST_CONFIGURE_COMMAND "${CTEST_CONFIGURE_COMMAND} \"${CTEST_SOURCE_DIRECTORY}\"")

# ============================================================================
# testing
# ============================================================================

set (CONFIGURE_RESULT 1)   # whether configuration was successful (0 if it was)
set (BUILD_RESULT     1)   # whether build was successful (0 if it was)

set (SUBMIT_RESULTS FALSE) # whether to submit the results to the dashboard

# ----------------------------------------------------------------------------
# empty the binary directory
if (CTEST_START_WITH_EMPTY_BINARY_DIRECTORY)
  ctest_empty_binary_directory ("${CTEST_BINARY_DIRECTORY}")
endif ()

# ----------------------------------------------------------------------------
# start a new test run
ctest_start ("${CTEST_MODEL}")

# get tag, i.e., subdirectory name required later to update build name
if (EXISTS "${CTEST_BINARY_DIRECTORY}/Testing/TAG")
  file (STRINGS "${CTEST_BINARY_DIRECTORY}/Testing/TAG" TAG LIMIT_COUNT 1)
else ()
  set (TAG ".")
endif ()

# ----------------------------------------------------------------------------
# update working copy
set (UPDATED_FILES TRUE)

if (NOT MANUAL_MODE)
  ctest_update (RETURN_VALUE NUM_FILES)

  if (NUM_FILES EQUAL -1)
    set (SUBMIT_RESULTS TRUE)
  elseif (NOT CTEST_CHECKOUT_COMMAND AND NUM_FILES EQUAL 0)
    set (UPDATED_FILES FALSE)
  endif ()
endif ()

# perform other test stages and submit results only if required
if (FORCE_BUILD OR UPDATED_FILES)

  set (SUBMIT_RESULTS TRUE)

  # --------------------------------------------------------------------------
  # configure build

  # Note: Also in manual mode to enforce the selected build configuration!
  ctest_configure (RETURN_VALUE CONFIGURE_RESULT)

  if (CONFIGURE_RESULT EQUAL 0)
    ctest_read_custom_files ("${CTEST_BINARY_DIRECTORY}")
  endif ()

  # --------------------------------------------------------------------------
  # build project
  if (CONFIGURE_RESULT EQUAL 0)
    ctest_build (RETURN_VALUE BUILD_RESULT)
  endif ()

  # --------------------------------------------------------------------------
  # build and install API documentation
  if (CONFIGURE_RESULT EQUAL 0 AND INSTALL_DOXYGEN_DIR)
    message (STATUS "Build documentation")
    ctest_build (TARGET doc RETURN_VALUE RT)
    if (RT EQUAL 0)
      if (EXISTS "${CTEST_BINARY_DIRECTORY}/doc/api/html")
        execute_process (
          COMMAND "${CMAKE_COMMAND}" -E copy_directory
                      "${CTEST_BINARY_DIRECTORY}/doc/api/html"
                      "${INSTALL_DOXYGEN_DIR}/html"
        )
        message (STATUS "Copied API documentation to ${INSTALL_DOXYGEN_DIR}.")
      else ()
        message (STATUS "Directory ${CTEST_BINARY_DIRECTORY}/doc/api/html/ does not exist.")
        message (STATUS "Skipped copying of API documentation.")
      endif ()
    endif ()
  endif ()

  # perform tests only if required
  if (BUILD_RESULT EQUAL 0 AND (FORCE_TEST OR UPDATED_FILES))

    # ------------------------------------------------------------------------
    # run tests
    if (WITH_COVERAGE OR NOT WITH_MEMCHECK)
      ctest_test (${CTEST_TEST_OPTIONS} RETURN_VALUE TEST_RESULT)
    endif ()

    # --------------------------------------------------------------------------
    # perform coverage analysis
    if (WITH_COVERAGE AND CTEST_COVERAGE_COMMAND)
      ctest_coverage ()
    endif ()

    # --------------------------------------------------------------------------
    # perform memory checks
    if (WITH_MEMCHECK AND CTEST_MEMORYCHECK_COMMAND)
      ctest_memcheck (${CTEST_TEST_OPTIONS})
    endif ()

    # ---------------------------------------------------------------------------
    # perform installation
    if (WITH_INSTALL AND TEST_RESULT EQUAL 0)
      message (STATUS "Install project files")

      execute_process (
        COMMAND           make install
        WORKING_DIRECTORY "${CTEST_BINARY_DIRECTORY}"
        TIMEOUT           1800 # 30 minutes
        RESULT_VARIABLE   INSTALL_RESULT
        OUTPUT_FILE       "${CTEST_BINARY_DIRECTORY}/install.log"
        ERROR_FILE        "${CTEST_BINARY_DIRECTORY}/install.log"
      )

      if (NOT INSTALL_RESULT EQUAL 0 AND COMMAND ctest_upload)
        ctest_upload (FILES "${CTEST_BINARY_DIRECTORY}/install.log")
      endif ()
    endif ()

  endif ()

endif ()

if (SUBMIT_RESULTS)

  # --------------------------------------------------------------------------
  # adjust build name

  # get compiler name
  if (WIN32)
    set (NAME_COMPONENT "NAME_WE")
  else ()
    set (NAME_COMPONENT "NAME")
  endif ()
  if (UNIX OR BORLAND)
    read_cmake_cache_value (CMAKE_CXX_COMPILER)
    get_filename_component (COMPILER_NAME "${CMAKE_CXX_COMPILER}" ${NAME_COMPONENT})
  else ()
    read_cmake_cache_value (CMAKE_BUILD_TOOL)
    get_filename_component (COMPILER_NAME "${CMAKE_BUILD_TOOL}" ${NAME_COMPONENT})
  endif ()

  if (COMPILER_NAME MATCHES "msdev")
    set (COMPILER_NAME "vs60")
  elseif (COMPILER_NAME MATCHES "devenv")
    read_cmake_cache_value (CMAKE_GENERATOR)
    string (REGEX REPLACE "Visual Studio ([0-9][0-9]?)($|.*)" "\\1" NUMBER "${CMAKE_GENERATOR}") 
    if ("${CMAKE_GENERATOR}" MATCHES "Visual Studio 7 .NET 2003")
      set (COMPILER_NAME "vs71")
    else ()
      set (COMPILER_NAME "vs${NUMBER}")
    endif ()
  endif ()

  # assemble desired build name
  set (BUILDNAME "${CMAKE_SYSTEM_NAME}-${CTEST_BUILD_TYPE}-${COMPILER_NAME}")

  # replace intermediate build name
  if (NOT "${BUILDNAME}" STREQUAL "${CTEST_BUILD_NAME}")
    message (STATUS "Change the build name to ${BUILDNAME}")
    # glob XML files
    file (GLOB_RECURSE FILES "" "${CTEST_BINARY_DIRECTORY}/Testing/${TAG}/*.xml")
    # replace build name
    foreach (FILENAME ${FILES})
      file (READ "${FILENAME}" XML)
      string (REGEX REPLACE "BuildName=\"${CTEST_BUILD_NAME}\"" "BuildName=\"${BUILDNAME}\"" XML "${XML}")
      string (REGEX REPLACE "<BuildName>${CTEST_BUILD_NAME}</BuildName>" "<BuildName>${BUILDNAME}</BuildName>" XML "${XML}")
      file (WRITE "${FILENAME}" "${XML}")
    endforeach ()
  endif ()

  # ---------------------------------------------------------------------------
  # submit results
  ctest_submit (RETURN_VALUE SUBMIT_RESULT)

endif ()

# -----------------------------------------------------------------------------
# remove temporary build tree
if (TMPBIN)
  file (REMOVE_RECURSE "${CTEST_BINARY_DIRECTORY}")
endif ()
