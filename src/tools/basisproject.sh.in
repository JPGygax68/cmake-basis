#! /usr/bin/env bash

##############################################################################
# @file  basisproject.sh
# @brief Project tool used to create and/or modify a BASIS project.
#
# Copyright (c) 2011 University of Pennsylvania. All rights reserved.
# See https://www.rad.upenn.edu/sbia/software/license.html or COPYING file.
#
# Contact: SBIA Group <sbia-software at uphs.upenn.edu>
#
# @ingroup Tools
##############################################################################
 
@BASIS_BASH_UTILITIES@


# ============================================================================
# executable information
# ============================================================================

get_executable_directory _EXEC_DIR
get_executable_name      _EXEC_NAME

# ============================================================================
# usage / help / version
# ============================================================================

# ----------------------------------------------------------------------------
## @brief Print options.
#
# @returns Nothing.
function print_options
{
    cat -- << EOF_OPTIONS
Required Options:
  --name, -n <Project>        Name of the new project.
  --description, -d <arg>     Brief project description.
  --root, -r <arg>            Specify root directory of new project or directory
                              of existing project. When creating a new project
                              by giving the --name and --description options,
                              this option is optional and a directory named after
                              the project is created under the current working
                              directory by default. In order to modify an existing
                              project, this option is required and has to specify
                              the root directory of a previously created project.
                              The --name and --description options must not be
                              given in this case.

Template Options:
  --minimal                   Choose minimal project template. Corresponds to not
                              selecting any
                              of the additional template files.
  --standard                  Choose standard project template. This is the default
                              project template if no template was selected explicitly.
                              Corresponds to:
                                --doc
                                --example
                                --noconfig
                                --nodata
                                --test
  --full                      Choose full project template.
                              Corresponds to selecting all files.

  --[no]config                Whether to include all config/ files. Corresponds to:
                                --[no]config-components
                                --[no]config-find
                                --[no]config-find-version
                                --[no]config-generate
                                --[no]config-package
                                --[no]config-script
                                --[no]config-settings
                                --[no]config-test
                                --[no]config-use
  --[no]config-components     Whether to include custom Components.cmake file.
  --[no]config-find           Whether to include custom Config.cmake.in file.
  --[no]config-find-version   Whether to include custom ConfigVersion.cmake.in file.
  --[no]config-package        Whether to include custom Package.cmake file.
  --[no]config-script         Whether to include custom ScriptConfig.cmake.in file.
  --[no]config-settings       Whether to include custom Settings.cmake file.
  --[no]config-test           Whether to include custom CTestCustom.cmake file.
  --[no]config-use            Whether to include custom ConfigUse.cmake.in file.
  --[no]data                  Whether to include support of auxiliary data files.
  --[no]example               Whether to include support of example.
  --[no]include               Whetehr to include support of public header files.
  --[no]test                  Whether to include support for testing.

Dependencies Options:"
  --use <arg>                 Name of external package used by this project.
                              Note that the package name is case sensitive.
  --useopt <arg>              Name of external package optionally used by this project.
                              Note that the package name is case sensitive.

Other Options:
  --clean                     Remove backup and other temporary files left behind.
  --clean-all                 Remove not only backup and other temporary files,
                              but also the hidden '.basis' directory with copies
                              of the template files.
  --force                     Force deletion of modified template files and
                              non-empty directories.
  --[no]update                Do not update existing files. Only add new files.
                              By default, in case of existing files, the project
                              file is updated by merging changes of the possibly
                              newer template and the existing file.
  --[no]backup                Do not backup project files before updating them.
                              By default, before any existing project file is
                              modified, it is copied to a file with extension
                              '~' before. The creation of these backup files is
                              disabled by this option.
  --template, -t <arg>        Root directory of project template. Defaults to
                              the project template of this BASIS installation.

  --verbose, -v               Increases verbosity of output messages.
                              Can be given multiple times.
  --help, -h                  Displays help and exit.
  --helpshort                 Displays short help and exits.
  --version                   Displays version information and exits.
EOF_OPTIONS
}

# ----------------------------------------------------------------------------
## @brief Print usage information.
#
# @returns Nothing.
function print_helpshort
{
    echo "Usage:"
	echo "  $_EXEC_NAME [options]"
    echo
    print_options
    echo
    print_contact
}

# ----------------------------------------------------------------------------
## @brief Print help.
#
# @returns Nothing.
function print_help
{
    echo "Usage:"
	echo "  $_EXEC_NAME [options]"
    echo
    cat -- << EOF_DESCRIPTION
Description:
  This command-line tool, also referred to as project tool, can be used to
  create a new project from the BASIS project template version @TEMPLATE_VERSION@ or to modify a
  previously created BASIS project.

  Depending on the grade of customization or optional inclusion of template
  components, different subsets of the fully featured project template can be
  selected. Additional template files and folders can be added to an existing
  project at any time. Further, if the --no* options are given explicitly,
  project files previously copied from the template are deleted. Files are,
  however, only deleted if they were not modified by the project developer since
  their creation and hence do not contain project related changes. Similarly are
  directories deleted by this tool only if empty. The deletion of modified files
  can be forced by using the --force option. Non-empty directories are yet kept
  and have to be deleted manually.

  An additional feature of this tool is, that it can upgrade an existing project
  to a newer project template version, given that the existing directory structure
  and file names were preserved. User changes to previously added template files
  are preserved and merged with the changes of the template using a so-called
  three-way diff using diff3 similar to the Subversion tool svn. Therefore, copies
  of the template files which a project file was created from are stored in the hidden
  '.basis' subdirectory. This directory should be kept and commited to the version
  control system if it is intended to manage the project files using this tool in
  the future, e.g., to upgrade to a newer template version. Otherwise, the option
  --clean-all can be used to have this tool delete this directory from the project.

  Besides the name of the new project and a brief description, names of external
  packages required or optionally used by this project can be specified. For each
  such package, an entry in the list of dependencies given as argument to the
  DEPENDS or DEPENDS_OPTIONAL option, respectively, of the basis_project() command
  is added.
EOF_DESCRIPTION
    echo
	print_options
    echo
    echo "Examples:"
	echo "  $_EXEC_NAME --name MyProject --description \"Novel image analysis method.\""
    echo "    Create a new project named 'MyProject' under the current working"
    echo "    directory using the default project template."
    echo
	echo "  $_EXEC_NAME --name MyProject --description \"Novel image analysis method.\" --use VTK"
    echo "    Create new project using C/C++ and Python with dependency on the package 'VTK'."
    echo
    echo "  $_EXEC_NAME --root /path/to/existing/project --test --config-test"
    echo "    Add full testing support to existing project."
    echo
    echo "  $_EXEC_NAME --root /path/to/existing/porject --use ITK --useopt MATLAB"
    echo "    Add dependencies on ITK (mandatory) and MATLAB (optional) to existing project."
    echo
    print_contact
}

# ============================================================================
# helpers
# ============================================================================

# ----------------------------------------------------------------------------
## @brief Make path absolute.
#
# This function returns the absolute path via command substitution, i.e.,
# use it as follows:
#
# @code
# abspath=$(make_absolute $relpath)
# @endcode
#
# @param [in] path The (relative) path of a file or directory
#                  (does not need to exist yet).
#
# @returns Prints the absolute path of the specified file or directory to
#          @c STDOUT via @c echo.
#
# @retval 0 Success.
# @retval 1 Failure.
function make_absolute
{
    local path="$1"

    if [ -z "$path" ]; then
        echo "make_absolute(): Argument missing!" 1>&2
        return 1
    else
        [ "${path/#\//}" != "$path" ] || path="$(pwd)/$path"
    fi

    echo "$path"
    return 0
}

# ----------------------------------------------------------------------------
## @brief Extract project name from existing project.
#
# @returns Extracted project name via @c echo.
function get_project_name
{
    local active=0
    local name=''

    while read -r line; do
        match "$line" '^ *basis_project *\(.*'
        if [ $? -eq 0 ]; then
            active=1
        fi
        if [ $active -ne 0 ]; then
            name=$(echo $line | grep 'NAME[ ]\+' | sed 's/.*\"\(.*\)\".*/\1/')
            if [ ! -z "$name" ]; then
                break
            fi
            match "$line" '[^#]*\)'
            if [ $? -eq 0 ]; then
                active=0
                break
            fi
        fi
    done < "$root/BasisProject.cmake"
    echo $name
}

# ============================================================================
# options
# ============================================================================

# if called without arguments, print short help
if [ $# -eq 0 ]; then
    print_help
    exit 1
fi

# ----------------------------------------------------------------------------
# default options
# ----------------------------------------------------------------------------

# root directory of project template
template="$_EXEC_DIR/@TEMPLATE_DIR@"

root=""              # root directory of new project (defaults to `pwd`/$name)
name=""              # name of the project to create
description=""       # project description
verbosity=0          # verbosity level of output messages
dependencies=()     # names of packages the new project depends on
dependency_required=()  # whether the package at the same index in dependencies
                     # is required or optional
dependencies_num=0   # length of arrays dependencies and dependency_required
update=1             # whether to update existing files
force=0              # whether to force update or removal of files
backup=1             # whether to backup project files before updating them
clean=0              # whether to remove backup and other temporary files
clean_all=0          # whether to remove all additional files

conf_settings=0      # add/remove project settings file
conf_components=0    # add/remove components configuration file
conf_package=0       # add/remove package configuration file
conf_find=0          # add/remove find package configuration file
conf_find_version=0  # add/remove find package configuration version file
conf_script=0        # add/remove script configuration file
conf_tests=0         # add/remove testing configuration file
conf_use=0           # add/remove unit testing
data=0               # add/remove auxiliary data files
doc=0                # add/remove doc folder
example=0            # add/remove example
include=0            # add/remove public includes tree
tests=0              # add/remove testing tree

# ----------------------------------------------------------------------------
# select minimal project template
function use_minimal_template
{
    conf_settings=-1
    conf_components=-1
    conf_package=-1
    conf_find=-1
    conf_find_version=-1
    conf_script=-1
    conf_tests=-1
    conf_use=-1
    data=-1
    doc=-1
    example=-1
    include=-1
    tests=-1
}

# ----------------------------------------------------------------------------
# select standard project template
function use_standard_template
{
    local overwrite=${1:-1}

    if [ $overwrite -eq 1 -o $conf_settings -eq 0 ]; then conf_settings=-1; fi
    if [ $overwrite -eq 1 -o $conf_components -eq 0 ]; then conf_components=-1; fi
    if [ $overwrite -eq 1 -o $conf_package -eq 0 ]; then conf_package=-1; fi
    if [ $overwrite -eq 1 -o $conf_find -eq 0 ]; then conf_find=-1; fi
    if [ $overwrite -eq 1 -o $conf_find_version -eq 0 ]; then conf_find_version=-1; fi
    if [ $overwrite -eq 1 -o $conf_script -eq 0 ]; then conf_script=-1; fi
    if [ $overwrite -eq 1 -o $conf_tests -eq 0 ]; then conf_tests=-1; fi
    if [ $overwrite -eq 1 -o $conf_use -eq 0 ]; then conf_use=-1; fi
    if [ $overwrite -eq 1 -o $data -eq 0 ]; then data=-1; fi
    if [ $overwrite -eq 1 -o $doc -eq 0 ]; then doc=1; fi
    if [ $overwrite -eq 1 -o $example -eq 0 ]; then example=1; fi
    if [ $overwrite -eq 1 -o $include -eq 0 ]; then include=-1; fi
    if [ $overwrite -eq 1 -o $tests -eq 0 ]; then tests=1; fi
}

# ----------------------------------------------------------------------------
# select full project template
function use_full_template
{
    conf_settings=1
    conf_components=1
    conf_package=1
    conf_find=1
    conf_find_version=1
    conf_script=1
    conf_tests=1
    conf_use=1
    data=1
    doc=1
    example=1
    include=1
    tests=1
}

# ----------------------------------------------------------------------------
# select default options
function use_default_template
{
    if [ $mode -eq 1 ]; then
        if [ -e "$root/config" ]; then
            if [ $conf_components   -eq 0 -a -e "$root/config/Components.cmake" ]; then conf_components=1; fi
            if [ $conf_find         -eq 0 -a -e "$root/config/Config.cmake.in" ]; then conf_find=1; fi
            if [ $conf_find_version -eq 0 -a -e "$root/config/ConfigVersion.cmake.in" ]; then conf_find_version=1; fi
            if [ $conf_tests        -eq 0 -a -e "$root/config/CTestCustom.cmake.in" ]; then conf_tests=1; fi
            if [ $conf_package      -eq 0 -a -e "$root/config/Package.cmake" ]; then conf_package=1; fi
            if [ $conf_script       -eq 0 -a -e "$root/config/ScriptConfig.cmake.in" ]; then conf_script=1; fi
            if [ $conf_settings     -eq 0 -a -e "$root/config/Settings.cmake" ]; then conf_settings=1; fi
            if [ $conf_use          -eq 0 ] && [ -e "$root/config/ConfigUse.cmake.in" -o -e "$root/config/Use.cmake.in" ]; then conf_use=1; fi
        fi
        if [ $data    -eq 0 -a -e "$root/data"    ]; then data=1; fi
        if [ $doc     -eq 0 -a -e "$root/doc"     ]; then doc=1; fi
        if [ $example -eq 0 -a -e "$root/example" ]; then example=1; fi
        if [ $include -eq 0 -a -e "$root/include" ]; then include=1; fi
        if [ $tests   -eq 0 -a -e "$root/test"    ]; then tests=1; fi
    else
        use_standard_template 0 # do not overwrite command-line options
    fi
}

# ----------------------------------------------------------------------------
# parse options
# ----------------------------------------------------------------------------

while [ $# -gt 0 ]
do
	case "$1" in
		--helpshort)
			print_helpshort
			exit 0
			;;

		-h|--help)
			print_help
			exit 0
			;;

		--version)
			print_version "@NAME@"
			exit 0
			;;

        -v|--verbose)
            ((verbosity++))
            ;;

        -t|--template)
            shift
            if [ $# -gt 0 ]; then
                template=$(make_absolute $1)
            else
                echo "Option --template requires an argument!" 1>&2
                exit 1
            fi
            ;;
 
        -r|--root)
            if [ ! -z "$root" ]; then
                echo "Option --root may only be given once!" 1>&2
                exit 1
            fi
            shift
            if [ $# -gt 0 ]; then
                root=$(make_absolute $1)
            else
                echo "Option --root requires an argument!" 1>&2
                exit 1
            fi
            ;;

        -n|--name)
            if [ ! -z "$name" ]; then
                echo "Option --name may only be given once!" 1>&2
                exit 1
            fi
            shift
            if [ $# -gt 0 ]; then
                name="$1"
            else
                echo "Option --name requires an argument!" 1>&2
                exit 1
            fi
            ;;

        -d|--description)
            if [ ! -z "$description" ]; then
                echo "Option --description may only be given once!" 1>&2
                exit 1
            fi
            shift
            if [ $# -gt 0 ]; then
                description="$1"
            else
                echo "Option --description requires an argument!" 1>&2
                exit 1
            fi
            ;;

        --update)
            update=1
            ;;
        --noupdate)
            update=0
            ;;

        --force)
            force=1
            ;;

        --use)
            shift
            if [ $# -gt 0 ]; then
                dependencies[$dependencies_num]="$1"
                dependency_required[$dependencies_num]='true'
                ((dependencies_num++))
            else
                echo "Option --use requires an argument!" 1>&2
                exit 1
            fi
            ;;

        --useopt|--optuse)
            shift
            if [ $# -gt 0 ]; then
                dependencies[$dependencies_num]="$1"
                dependency_required[$dependencies_num]='false'
                ((dependencies_num++))
            else
                echo "Option --useopt requires an argument!" 1>&2
                exit 1
            fi
            ;;

        --minimal)
            use_minimal_template
            ;;

        --standard)
            use_standard_template
            ;;

        --full)
            use_full_template
            ;;

        --config)
            conf_settings=1
            conf_components=1
            conf_package=1
            conf_find=1
            conf_find_version=1
            conf_script=1
            conf_tests=1
            conf_use=1
            ;;

        --noconfig)
            conf_settings=-1
            conf_components=-1
            conf_package=-1
            conf_find=-1
            conf_find_version=-1
            conf_script=-1
            conf_tests=-1
            conf_use=-1
            ;;

        --conf-settings|--config-settings)
            conf_settings=1
            ;;
        --noconf-settings|--noconf-settings)
            conf_settings=-1
            ;;

        --conf-components|--config-components)
            conf_components=1
            ;;
        --noconf-components|--noconf-components)
            conf_components=-1
            ;;

        --conf-package|--config-package)
            conf_package=1
            ;;
        --noconf-package|--noconf-package)
            conf_package=-1
            ;;

        --conf-find|--config-find)
            conf_find=1
            ;;
        --noconf-find|--noconf-find)
            conf_find=-1
            ;;

        --conf-find-version|--config-find-version)
            conf_find_version=1
            ;;
        --noconf-find-version|--noconf-find-version)
            conf_find_version=-1
            ;;

        --conf-script|--config-script)
            conf_script=1
            ;;
        --noconf-script|--noconf-script)
            conf_script=-1
            ;;

        --conf-test|--config-test)
            conf_tests=1
            ;;
        --noconf-test|--noconf-test)
            conf_tests=-1
            ;;

        --conf-use|--config-use)
            conf_use=1
            ;;
        --noconf-use|--noconf-use)
            conf_use=-1
            ;;

        --data)
            data=1
            ;;
        --nodata)
            data=-1
            ;;

        --doc)
            doc=1
            ;;
        --nodoc)
            doc=-1
            ;;

        --example)
            example=1
            ;;
        --noexample)
            example=-1
            ;;

        --include)
            include=1
            ;;
        --noinclude)
            include=-1
            ;;

        --test)
            tests=1
            ;;
        --notest)
            tests=-1
            ;;

        -*)
            echo "Invalid option $1!" 1>&2
            exit 1
            ;;

        *)
            echo "Invalid argument $1" 1>&2
            exit 1
            ;;
	esac
    shift
done

# simplify template path
cwd=$(pwd)
cd $template
if [ $? -ne 0 ]; then
    echo "Invalid project template!"
    exit 1
fi
template=$(pwd)
cd $cwd

# request to create new project
if [ ! -z "$name" ]; then
    mode=0
    if [ -z "$root" ]; then
        root="$(pwd)/$name"
    fi
    if [ -e "$root" ]; then
        echo "Directory or file of name $root exists already." 1>&2
        echo "Please choose another project name or root directory using the --root option." 1>&2
        echo "If you want to modify an existing project, please provide the root directory using the --root option." 1>&2
        exit 1
    fi
    if [ -z "$description" ]; then
        echo "No project description given!"
        exit 1
    fi
# request to modify existing project
elif [ -n "$root" ]; then
    mode=1
    # remove trailing slashes from root
    root=`echo "$root" | sed 's/\/*$//'`
    root=`echo "$root" | sed 's/\\*$//'`
    # check existence of root directory
    if [ ! -d "$root" ]; then
        echo "Project directory $root does not exist!" 1>&2
        echo "If you want to create a new project, please specify a project name." 1>&2
        exit 1
    fi
    # is project a BASIS project?
    if [ ! -f "${root}/BasisProject.cmake" ]; then
        echo "Could not find a BasisProject.cmake file in ${root}! Are you sure this is a BASIS project?" 1>&2
        exit 1
    fi
    # notify user that --description option is invalid
    if [ -n "$description" ]; then
        echo "Cannot modify description of existing project. Please edit root CMakeLists.txt file manually." 1>&2
        echo "Do not use option --description when attempting to modify an existing project." 1>&2
        exit 1
    fi
    if [ -z "$name" ]; then
        name=$(get_project_name "$root")
    fi
    if [ -z "$name" ]; then
        echo "Failed to determine project name! Expected to find expression 'NAME[ ]\+\"<project name>\"' in BasisProject.cmake file." 1>&2
        exit 1
    fi
# invalid usage
else
    echo "Either project name or project root must be specified!" 1>&2
    exit 1
fi

# verify that project name is valid
if [[ ! $name =~ ^[a-zA-Z0-9]+$ ]]; then
    echo "Invalid project name: $name" 1>&2
    echo "Project name may only consist of alphanumeric characters!" 1>&2
    echo "If you are attempting to modify an existent project, check whether the" 1>&2
    echo "project name is correctly extracted from the root CMakeLists.txt file." 1>&2
    exit 1
fi

# print template and root path
if [ $verbosity -gt 0 ]; then
    echo
    echo "Root directories:"
    echo "  Project:  $root"
    echo "  Template: $template"
    echo
fi

# ============================================================================
# main
# ============================================================================

# return value
retval=0

# name in lowercase only
name_lower=`echo $name | awk '{print tolower($0)}'`

# sanitize project description for use in regular expression
description=${description//\//\\\/}
description=${description//\\/\\\\}
description=${description//"/\\"}
description=`echo -ne "$description" | tr '\n' ' '`

# default template
use_default_template

# ----------------------------------------------------------------------------
## @brief Alter template file.
function alter
{
    cat "$1" \
        | sed "s/ReplaceByProjectName/$name/g" \
        | sed "s/ReplaceByProjectDescription/$description/g" \
        | sed "s/ReplaceByTemplateVersion/@TEMPLATE_VERSION@/g" \
        > "$2"
}

# ----------------------------------------------------------------------------
## @brief Add or modify project directory or file.
#
# Only the named directory or file is added or modified.
#
# @param [in] path        The path of the directory or file relative to the template
#                         or project root, respectively.
# @param [in] path_is_dir Whether @p path is a directory path that does not have a
#                         corresponding template file.
#
# @returns Nothing.
function add
{
    local path="$1"
    local path_is_dir=${2:-1}

    # check existence of template
    if [ $path_is_dir -ne 0 ] && [ ! -e $template/$path ]; then
        echo "E $root/$path - template missing"
        return 1
    fi

    # handle case that path in project exists already
    if [ -e $root/$path ]; then
        if [ $path_is_dir -eq 0 -o -d $template/$path ]; then
            if [ ! -d $root/$path ]; then
                # template is directory, but there is a file in the project
                echo "E $root/$path - not a directory"
                return 1
            else
                # directory already exists, nothing to do
                return 0
            fi
        elif [ -f $template/$path ]; then
            if [ ! -f $root/$path ]; then
                # template is file, but there is a directory in the project
                echo "E $root/$path - not a file"
                return 1
            fi
            # skip file if update of existing files is disabled
            if [ $update -eq 0 ]; then
                echo "S $root/$path"
                return 0
            fi
        fi
    fi

    # create (intermediate) directory
    local dir=''
 
    if [ $path_is_dir -eq 0 -o -d "$template/$path" ]; then
        dir="$path"
    else
        dir="`dirname $root/$path`"
        dir="${dir#$root}"
        dir="${dir#/}"
    fi

    if [ ! -d "$root/$dir" ]; then
        mkdir -p "$root/$dir"
        if [ $? -ne 0 ]; then
            echo "E $root/$dir - failed to make directory"
            return 1
        else
            echo "A $root/$dir"
        fi
    fi

    # add/update file
    if [ -f "$template/$path" ]; then
        # project file does not exist yet
        if [ ! -f "$root/$path" ]; then
            # copy template and store copy of template required for update later
            if [ $verbosity -gt 0 ]; then
                cp "$template/$path" "$root/$path"
            else
                cp "$template/$path" "$root/$path" &> /dev/null
            fi
            if [ $? -ne 0 ]; then
                echo "E $root/$path - failed to add file"
                return 1
            else
                mkdir -p "$root/.basis/$dir"
                if [ $verbosity -gt 0 ]; then
                    cp "$template/$path" "$root/.basis/$path"
                else
                    cp "$template/$path" "$root/.basis/$path" &> /dev/null
                fi
                if [ $? -ne 0 ]; then
                    echo "W $root/$path - file added, but failed to copy template to '.basis' (will not be able to update file later)"
                else
                    echo "A $root/$path"
                fi
            fi
            # alter project file, e.g., substitute for project name
            alter "$root/$path" "$root/$path.temp"
            if [ -f "$root/$path.temp" ]; then
                diff "$root/$path" "$root/$path.temp" &> /dev/null
                if [ $? -ne 0 ]; then
                    mv "$root/$path.temp" "$root/$path"
                    echo "M $root/$path"
                else
                    rm -f "$root/$path.temp"
                fi
            fi
        # update project file if backup of template used for creation exists
        elif [ -f "$root/.basis/$path" ]; then
            # merge new template with project file using three-way diff
            if [ $verbosity -gt 0 ]; then
                diff3 -m "$root/$path" "$root/.basis/$path" "$template/$path" > "$root/$path.update"
            else
                diff3 -m "$root/$path" "$root/.basis/$path" "$template/$path" > "$root/$path.update" 2> /dev/null
            fi
            if [ $? -ne 0 ]; then
                echo "W $root/$path - failed to merge changes"
                cp "$template/$path" "$root/$path.template" &> /dev/null
                return 1
            fi
            # check if anything has changed at all
            diff "$root/$path" "$root/$path.update" &> /dev/null
            if [ $? -ne 0 ]; then
                # backup current project file
                if [ $backup -ne 0 ]; then
                    if [ $verbosity -gt 0 ]; then
                        cp -f "$root/$path" "$root/$path~"
                    else
                        cp -f "$root/$path" "$root/$path~" &> /dev/null
                    fi
                    if [ $? -ne 0 ]; then
                        echo "S $root/$path - failed to backup file"
                        return 1
                    fi
                fi
                # replace project file by merged file
                if [ $verbosity -gt 0 ]; then
                    mv -f "$root/$path.update" "$root/$path"
                else
                    mv -f "$root/$path.update" "$root/$path" &> /dev/null
                fi
                if [ $? -ne 0 ]; then
                    echo "E $root/$path - failed to update file"
                    return 1
                fi
                # replace hidden template file
                if [ $verbosity -gt 0 ]; then
                    cp -f "$template/$path" "$root/.basis/$path"
                    if [ $? -ne 0 ]; then
                        echo "U $root/$path - updated file, but failed to update hidden template"
                    else
                        echo "U $root/$path"
                    fi
                else
                    cp -f "$template/$path" "$root/.basis/$path" &> /dev/null
                    echo "U $root/$path"
                fi
            else
                rm -f "$root/$path.update" &> /dev/null
            fi
        # cannot update files without copy of template used to create it
        else
            echo "S $root/$path - missing previous template"
            return 1
        fi
    fi

    return 0
}

# ----------------------------------------------------------------------------
## @brief Delete file or empty directory.
#
# @param [in] path        Path relative to template or project root, respectively.
# @param [in] path_is_dir Whether @p path is a directory path that does not have a
#                         corresponding template file.
#
# @returns Nothing.
function del
{
    local path=$1
    local path_is_dir=${2:-1}

    # check existence of template
    if [ $path_is_dir -ne 0 ] && [ ! -e $template/$path ]; then
        echo "E $root/$path - template missing"
        return 1
    fi

    # delete existing directory if empty only
    if [ -d "$root/$path" ]; then
        if [ $force -eq 0 ]; then
            if [ $verbosity -gt 0 ]; then
                rmdir "$root/$path"
            else
                rmdir "$root/$path" &> /dev/null
            fi
        else
            if [ $verbosity -gt 0 ]; then
                rm -rf "$root/$path"
            else
                rm -rf "$root/$path" &> /dev/null
            fi
        fi
        if [ $? -ne 0 ]; then
            echo "E $root/$path - failed to remove directory; use --force to force deletion of non-empty directory"
            return 1
        else
            echo "D $root/$path"
        fi
    # delete existing file and copy of template
    elif [ -f "$root/$path" ]; then
        # check if project file differs from template
        diff "$root/$path" "$template/$path" > /dev/null
        if [ $? -ne 0 -a $force -eq 0 ]; then
            echo "S $root/$path - file was modified; use --force to force deletion"
            return 1
        fi
        # delete copy of template and '.basis' directory if then empty
        local dir

        dir="`dirname $root/$path`"
        dir="${dir#$root}"
        dir="${dir#/}"

        rm -f "$root/.basis/$path" &> /dev/null
        if [[ $(ls "$root/.basis/$dir" 2>&1) == '' ]]; then
            rm -rf "$root/.basis/$dir" # there might be hidden subdirectories from the RCS
        fi
        if [[ $(ls "$root/.basis" 2>&1) == '' ]]; then
            rm -rf "$root/.basis" # there might be hidden subdirectories from the RCS
        fi
        # delete project file
        if [ $verbosity -gt 0 ]; then
            rm -f "$root/$path"
        else
            rm -f "$root/$path" &> /dev/null
        fi
        if [ $? -ne 0 ]; then
            echo "E $root/$path - failed to remove file"
            return 1
        else
            echo "D $root/$path"
        fi
    fi

    return 0
}

# ----------------------------------------------------------------------------
## @brief Add or delete file depending on option given.
#
# @param [in] switch Switch option. If > 0, the file is added or updated.
#                    If < 0, the file is deleted. Otherwise, nothing is done.
# @param [in] path   File path relative to tempate or project root, respectively.
#
# @returns Nothing.
function addordel
{
    local switch=$1
    local path=$2
    local path_is_dir=${3:-1}

    if [ $switch -gt 0 ]; then
        add $path $path_is_dir || return 1
    elif [ $switch -lt 0 ]; then
        del $path $path_is_dir || return 1
    fi

    return 0
}

# ----------------------------------------------------------------------------
# modify project files
if [ $mode -eq 1 ]; then
    msg="Modifying project"
else
    msg="Creating project"
fi
echo "$msg..."

# minimal project structure
add "AUTHORS.txt"        || retval=1
add "README.txt"         || retval=1
add "INSTALL.txt"        || retval=1
add "COPYING.txt"        || retval=1
add "BasisProject.cmake" || retval=1
add "CMakeLists.txt"     || retval=1
add "src/CMakeLists.txt" || retval=1

# additional configuration files
addordel $conf_settings     "config/Settings.cmake"         || retval=1
addordel $conf_components   "config/Components.cmake"       || retval=1
addordel $conf_package      "config/Package.cmake"          || retval=1
addordel $conf_find         "config/Config.cmake.in"        || retval=1
addordel $conf_find         "config/ConfigSettings.cmake"   || retval=1
addordel $conf_find_version "config/ConfigVersion.cmake.in" || retval=1
addordel $conf_script       "config/ScriptConfig.cmake.in"  || retval=1
addordel $conf_tests        "config/CTestCustom.cmake.in"   || retval=1
addordel $conf_use          "config/ConfigUse.cmake.in"     || retval=1

if [ -d "$root/config" ]; then
    if [[ $(ls "$root/config" 2>&1) == '' ]]; then
        rm -rf "$root/config" &> /dev/null
    fi
fi

# software configuration data
addordel $data "data/CMakeLists.txt" || retval=1
addordel $data "data" 0              || retval=1 # for deletion of directory

# documentation
addordel $doc "doc/CMakeLists.txt" || retval=1
addordel $doc "doc" 0              || retval=1 # for deletion of directory

# public includes
addordel $include "include" 0 || retval=1 # for deletion of directory

# testing tree
addordel $tests "CTestConfig.cmake"   || retval=1
addordel $tests "test/CMakeLists.txt" || retval=1
addordel $tests "test" 0              || retval=1 # for deletion of directory

# example
addordel $example "example/CMakeLists.txt" || retval=1
addordel $example "example" 0              || retval=1 # for deletion of directory

# ----------------------------------------------------------------------------
# add dependencies to basis_project() command in BasisProject.cmake file
if [ ${dependencies_num} -gt 0 ]; then
    config_file="${root}/BasisProject.cmake"
    idx=0
    while [ $idx -lt $dependencies_num ]; do
        dependency="${dependencies[$idx]}"
        required=${dependency_required[$idx]}
        # Attention: The -i option of sed differs for Darwin and Linux version.
        # Note: The actual newline in the expression is intended.
        if [ "X${required}" == 'Xtrue' ]; then
            sed "s/#AddDependencyHere/\"${dependency}\" #AddDependencyHere/g" "${config_file}" > "${config_file}.temp" || retval=1
        else
            sed "s/#AddOptionalDependencyHere/\"${dependency}\" #AddOptionalDependencyHere/g" "${config_file}" > "${config_file}.temp" || retval=1
        fi
        if [ $? -eq 0 ]; then
            mv "${config_file}.temp" "${config_file}" || retval=1
        else
            rm -f "${config_file}.temp"
        fi
        ((idx++))
    done
    echo "M ${config_file} - Added dependencies"
fi

# ----------------------------------------------------------------------------
# done
if [ $retval -ne 0 ]; then
    echo "$msg... - errors occurred"
else
    echo "$msg... - done"
fi

# ============================================================================
# clean up
# ============================================================================

# ----------------------------------------------------------------------------
## @brief Clean temporary files.
#
# @returns Nothing.
function clean_temp_files
{
    # *.template
    for file in $(find "$root" -type f -name '*.template'); do
        rm -f "$file"
    done
    # *.update
    for file in $(find "$root" -type f -name '*.update'); do
        rm -f "$file"
    done
}

# ----------------------------------------------------------------------------
## @brief Remove hidden copies of template files.
#
# @returns Nothing.
function clean_hidden_files
{
    # .basis
    for dir in $(find "$root" -type d -name '.basis'); do
        rm -rf "$dir"
    done
}

# ----------------------------------------------------------------------------
# do the clean up

if [ $clean -ne 0 -o $clean_all -ne 0 ]; then
    msg="Cleaning up"
    echo "$msg..."
fi

if [ $clean -ne 0 -o $clean_all -ne 0 ]; then
    clean_temp_files
fi
if [ $clean_all -ne 0 ]; then
    clean_hidden_files
fi

if [ $clean -ne 0 -o $clean_all -ne 0 ]; then
    echo "$msg... - done"
fi

# ============================================================================
# done
# ============================================================================

echo
if [ $mode -eq 1 ]; then
    msg="Project \"$name\" modified"
else
    msg="Project \"$name\" created"
fi
if [ $retval -ne 0 ]; then
    echo "$msg with errors" 1>&2
else
    echo "$msg successfully"
fi

exit $retval
