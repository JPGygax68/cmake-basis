##############################################################################
# @file  executabletargetinfo.py
# @brief Provides information about executables built by BASIS.
#
# @note The executabletargetinfo.py module is automatically created by
#       BASIS from the template file executabletargetinfo.py.in which is
#       part of the BASIS installation.
#
# Copyright (c) 2011, 2012 University of Pennsylvania. All rights reserved.<br />
# See http://www.rad.upenn.edu/sbia/software/license.html or COPYING file.
#
# Contact: SBIA Group <sbia-software at uphs.upenn.edu>
#
# @ingroup BasisPythonUtilities
##############################################################################

"""
Provides information about executables built by BASIS.

Copyright (c) 2011, 2012 University of Pennsylvania. All rights reserved.
See COPYING file or https://www.rad.upenn.edu/sbia/software/license.html.

Contact: SBIA Group <sbia-software at uphs.upenn.edu>

"""

# ============================================================================
# globals
# ============================================================================

import os.path

_module_dir = os.path.realpath(os.path.dirname(__file__))
_locations  = None

# ============================================================================
# public
# ============================================================================

## @addtogroup BasisPythonUtilities
# @{


# ----------------------------------------------------------------------------
def get_target_uid(target):
    """
    Get UID of build target.

    The UID of a build target is its name prepended by a namespace identifier
    which should be unique for each project.

    This function further initializes the dictionaries storing the information
    about the executable targets upon the first invocation. Reason to do it
    here is that every access to the dictionaries first calls this function
    to get the UID of a build target. Moreover, also this function needs to
    have the already initialized dictionaries to ensure that an already valid
    target identifier is not modified.

    """
    global _locations
    # initialize module if not done yet - this is only done here because
    # whenever information is looked up about an executable target, this
    # function is invoked first
    if _locations is None: _initialize()
    # handle invalid arguments
    if target is None or target == "": return None
    # in case of a leading namespace separator, do not modify target name
    if target.startswith('.'): return target
    # project namespace
    prefix = '@PROJECT_NAMESPACE_CMAKE@'
    # try prepending namespace or parts of it until target is known
    separator = '.'
    while True:
        if separator.join([prefix, target]) in _locations:
            return separator.join([prefix, target])
        parts = prefix.split(separator, 1)
        if len(parts) == 1: break
        prefix = parts[0]
    # otherwise, return target name unchanged
    return target

# ----------------------------------------------------------------------------
def is_known_target(target):
    """Determine whether a given build target is known by this module."""
    global _locations
    uid = get_target_uid(target)
    if uid is None or uid == "":
        return False
    if uid.startswith('.'):
        uid = uid[1:]
    return uid in _locations

# ----------------------------------------------------------------------------
def get_executable_path(target):
    """
    Get absolute path of file built by specified executable build target.

    This function determines the absolute file path of an executable built
    by the specified executable build target. If the given argument is not a
    known build target name, None is returned.

    """
    uid = get_target_uid(target)
    if uid is None: return None
    if uid.startswith('.'): uid = uid[1:]
    global _locations
    global _module_dir
    path = os.path.normpath(os.path.join(_module_dir, _locations[uid]))
    if '$(IntDir)' in path:
        for intdir in ['Release', 'Debug', 'RelWithDebInfo', 'MinSizeRel']:
            tmppath = path.replace('$(IntDir)', intdir)
            if os.path.exists(tmppath):
                path = tmppath
                break
        path = path.replace('$(IntDir)', '')
    return path

# ----------------------------------------------------------------------------
def get_executable_name(target=None):
    """Get name of executable file built by specified target."""
    path = get_executable_path(target)
    if path is None: return None
    return os.path.basename(path)

# ----------------------------------------------------------------------------
def get_executable_directory(target=None):
    """Get directory of executable file built by specified target."""
    path = get_executable_path(target)
    if path is None: return None
    return os.path.dirname(path)


## @}
# end of Doxygen group

# ============================================================================
# private
# ============================================================================

# ----------------------------------------------------------------------------
def _initialize():
    """Initialize dictionaries with information about executable targets."""
    global _locations
    @EXECUTABLE_TARGET_INFO@
