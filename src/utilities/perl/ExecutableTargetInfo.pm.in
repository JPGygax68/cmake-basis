##############################################################################
# @file  ExecutableTargetInfo.pm
# @brief Provides information about executables built by BASIS.
#
# @note The ExecutableTargetInfo.pm module is automatically created by
#       BASIS from the template file ExecutableTargetInfo.pm.in which is
#       part of the BASIS installation.
#
# Copyright (c) 2011, University of Pennsylvania. All rights reserved.<br />
# See http://www.rad.upenn.edu/sbia/software/license.html or COPYING file.
#
# Contact: SBIA Group <sbia-software at uphs.upenn.edu>
#
# @ingroup BasisPerlUtilities
##############################################################################

package SBIA::@PROJECT_NAME@::ExecutableTargetInfo;

use strict;
use warnings;

# ============================================================================
# exports
# ============================================================================

our ($VERSION, @ISA, @EXPORT, @EXPORT_OK, %EXPORT_TAGS);

BEGIN {
    use Exporter ();

    $VERSION = @PROJECT_VERSION_PERL@;
    @ISA     = qw (Exporter);

    %EXPORT_TAGS = (
        default => [qw (
            get_executable_name
            get_executable_directory
            get_executable_path
        )],

        everything => [qw (
            get_executable_name
            get_executable_directory
            get_executable_path
            get_target_uid
            is_known_target
        )]
    );

    Exporter::export_ok_tags ('everything');
}

# ============================================================================
# modules
# ============================================================================

use Cwd            qw(realpath);
use File::Basename qw(dirname basename);
use File::Spec     qw(rel2abs);

use SBIA::BASIS::File::Which;

# ============================================================================
# private data
# ============================================================================

## @brief Maps build target names to executable file paths relative to module.
my $_location = undef;

# ============================================================================
# public functions
# ============================================================================

## @addtogroup BasisPerlUtilities
# @{


# ----------------------------------------------------------------------------
## @brief Get UID of build target.
#
# This function prepends the default namespace of used for targets build as
# part of the project this module belongs to if the given target name is yet
# neither known nor fully-qualified, i.e., in the form <namespace>::<target>.
#
# @note This function does not check whether the returned fully-qualified
#       target name is known to this class.
#
# @param [in] targe Name of build target.
#
# @returns Fully-qualified build target name.
sub get_target_uid
{
    my $target = $_[0];
    # initialize module if not done yet - this is only done here because
    # whenever information is looked up about an executable target, this
    # function is invoked first
    defined $_location or initialize ();
    # handle invalid arguments
    defined $target or return undef;
    length ($target) > 0 or return undef;
    # in case of a leading namespace separator, do not modify target name
    $target !~ /^\./ or return $target;
    # project namespace
    my $prefix='@PROJECT_NAMESPACE_CMAKE@.DUMMY';
    # try prepending namespace or parts of it until target is known
    while ($prefix =~ s/(.*)\.[^.]*/$1/) {
        if (exists $_location->{$prefix . '.' . $target}) {
            return $prefix . '.' . $target;
        }
    }
    # otherwise, return target name unchanged
    return $target;
}

# ----------------------------------------------------------------------------
## @brief Determine whether a given target is known.
#
# @param [in] target Name/UID of build target.
#
# @returns Whether the given build target is known by this module.
sub is_known_target
{
    my $uid = get_target_uid ($_[0]);
    defined $uid or return 0;
    $uid =~ s/^[.]?(.*)/$1/;
    exists $_location->{$uid};
}

# ----------------------------------------------------------------------------
## @brief Get name part of executable file path.
#
# @param [in] target Name/UID of build target.
#
# @returns Name part of executable file path.
sub get_executable_name
{
    my $path = get_executable_path (@_);
    defined $path or return undef;
    return basename ($path);
}

# ----------------------------------------------------------------------------
## @brief Get directory part of executable file path.
#
# @param [in] target Name/UID of build target.
#
# @returns Directory part of executable file path.
sub get_executable_directory
{
    my $path = get_executable_path (@_);
    defined $path or return undef;
    return dirname ($path);
}

# ----------------------------------------------------------------------------
## @brief Get absolute path of executable file.
#
# This function determines the absolute file path of an executable. If no
# arguments are given, the absolute path of this executable is returned.
# If the given argument is a known build target name, the absolute path
# of the executable built by this target is returned. Otherwise, the named
# command is searched in the system PATH and it's absolute path returned
# if found. If the given argument is neither the name of a known build target
# nor an executable found on the PATH, undef is returned.
#
# @param [in] target Name/UID of build target.
#
# @returns Absolute file path of executable.
sub get_executable_path
{
    my $path = undef;
    if (@_ == 0) {
        $path = realpath ($0);
    } else {
        my $uid = get_target_uid ($_[0]);
        defined $uid and $uid =~ s/^[.]?(.*)/$1/;
        if (defined $uid and exists $_location->{$uid}) {
            $path = $_location->{$uid};
            if ($path =~ m/\$\(IntDir\)/) {
                my $tmppath = '';
                my $intdir = '';
                foreach $intdir ('Release', 'Debug', 'RelWithDebInfo', 'MinSizeRel') {
                    $tmppath = $path;
                    $tmppath =~ s/\$\(IntDir\)/$intdir/g;
                    if (-e $tmppath) {
                        $path = $tmppath;
                        last;
                    }
                }
                $path =~ s/\$\(IntDir\)//g;
            }
            $path = File::Spec->rel2abs ($path, dirname (__FILE__));
            # the realpath() function only works for existing paths
            $path = realpath ($path) if -e $path;
        } else {
            $path = which ($_[0])
        }
    }
    return $path;
}


## @}
# end of Doxygen group

# ============================================================================
# protected/private functions
# ============================================================================

# ----------------------------------------------------------------------------
## @brief Initialize executable target information.
#
# This function initializes the structures of information about the executable
# build targets. In order to reduce the start-up time of applications that do
# not make use of this module, the initialization is only performed on demand.
#
# The initialization is done in get_target_uid() as this function is always
# called first before any lookup of information.
#
# @returns Nothing.
sub initialize
{
    $_location = {
    @EXECUTABLE_TARGET_INFO@
    };
}


1; # indicate success of module loading
