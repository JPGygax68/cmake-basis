#! /usr/bin/env bash

##############################################################################
# @file  ExecutableTargetInfo.sh
# @brief Provides information about the executables built by BASIS.
#
# Copyright (c) 2011 University of Pennsylvania. All rights reserved.
# See https://www.rad.upenn.edu/sbia/software/license.html or COPYING file.
#
# Contact: SBIA Group <sbia-software at uphs.upenn.edu>
#
# @ingroup BashUtilities
##############################################################################

# return if already loaded
[ "${__SBIA_@PROJECT_NAME_UPPER@_EXECUTABLETARGETINFO_INCLUDED:-0}" -eq 1 ] && return 0
__SBIA_@PROJECT_NAME_UPPER@_EXECUTABLETARGETINFO_INCLUDED=1


# ============================================================================
# constants
# ============================================================================

## @brief Canonical path of directory containing ExecutableTargetInfo module
readonly __EXECUTABLETARGETINFO_dir=@BASIS_BASH___DIR__@

## @brief Default namespace used to convert target name to target UID.
readonly __EXECUTABLETARGETINFO_namespace='@PROJECT_NAME_LOWER@'

# ============================================================================
# public functions
# ============================================================================

## @addtogroup BashUtilities
#  @{


##############################################################################
# @brief Get UID of build target.
#
# @param [in] target Name/UID of build target.
#
# @returns UID of build target.
get_target_uid ()
{
    local target=$(_executabletargetinfo_sanitize "$1")
    if [ -z $(_executabletargetinfo_get ${target} LOCATION) ] && [[ "${target//__/}" == "${target}" ]]; then
        echo -n "${__EXECUTABLETARGETINFO_namespace}__${target}"
    else
        echo -n "${target}"
    fi
}

##############################################################################
# @brief Get name of executable file.
#
# @param [in] target Name/UID of build target. If no argument is given,
#                    the name of the calling executable is returned instead.
#
# @returns The name of the executable.
get_executable_name ()
{
    # if called without arguments, return name of calling executable
    if [ $# -eq 0 ]; then
        echo ${0##*/}
    # otherwise, lookup name of executable corresponding to this build target
    else
        basename "$(get_executable_path $1)"
    fi
}

##############################################################################
# @brief Get directory of executable file.
#
# @param [in] target Name/UID of build target. If no argument is given,
#                    the directory where the file of the calling executable
#                    is located is returned.
#
# @returns The directory part of the executable file path.
get_executable_directory ()
{
    dirname "$(get_executable_path $1)"
}

##############################################################################
# @brief Get canonical path of executable file.
#
# @param [in] target Name/UID of build target. If no argument is given,
#                    the file path of the calling executable is returned.
#
# @returns The canonical file path of the executable.
get_executable_path ()
{
    # if called without arguments, return path of calling executable
    if [ $# -eq 0 ]; then
        realpath $0
    # otherwise, lookup name of executable corresponding to this build target
    else
        # initialize module on demand, only when called first
        _executabletargetinfo_initialize
        # retrieve information about executable file location
        local uid=$(get_target_uid "$1")
        local path=$(_executabletargetinfo_get ${uid} 'LOCATION')
        _executabletargetinfo_to_absolute_path ${path} ${__EXECUTABLETARGETINFO_dir}
    fi
}


## @}
# Doxygen group BashUtilities

# ============================================================================
# private helpers
# ============================================================================

##############################################################################
# @brief Sanitize string for use in variable name.
#
# @param [in] str String to be sanitized.
#
# @returns Sanitized string that can be used as variable name.
_executabletargetinfo_sanitize ()
{
    echo -n "$1" | tr [:space:] '_' | tr -C [:alpha:] '_'
}

##############################################################################
# @brief Add (key, value) pair to executable target info "hash".
#
# @sa _executabletargetinfo_get()
#
# @param [in] key   Hash key.
# @param [in] name  Name of the hash table.
# @param [in] value Value associated with the given hash key.
#
# @returns Sets a readonly variable that represents the (key, value) entry.
_executabletargetinfo_add ()
{
    local key=$(_executabletargetinfo_sanitize "$1")
    local name=$(_executabletargetinfo_sanitize "$2")
    eval readonly '__EXECUTABLETARGETINFO_'"${name}"'_'"${key}"='$3'
}

##############################################################################
# @brief Get value from executable target info "hash".
#
# @sa _executabletargetinfo_add()
#
# @param [in] key  Hash key.
# @param [in] name Name of the hash table.
#
# @returns Value stored under the given key in the hash table or an empty
#          string if the hash table does not exist or the key is unknown.
_executabletargetinfo_get ()
{
    local key=$(_executabletargetinfo_sanitize "$1")
    local name=$(_executabletargetinfo_sanitize "$2")
    eval echo -n '${__EXECUTABLETARGETINFO_'"${name}"'_'"${key}"'}'
}

##############################################################################
# @brief Make relative path absolute.
#
# @attention The directory referred to by the directory part of the path must exist.
#
# @todo Implement this function without the use of cd such that non-existent
#       paths can be simplified as well.
#
# @param [in] path Absolute or relative path.
# @param [in] base Base path used for relative paths.
#
# @returns Simplified absolute path.
_executabletargetinfo_to_absolute_path ()
{
    local path=$1
    local base=${2:-$(pwd)}
    local dir=$(dirname ${path})

    if [ -d "${base}" -a -d "${dir}" ]; then
        echo -n $(cd ${base}; cd ${dir}; pwd)/$(basename ${path})
    else
        echo -n ${path}
    fi
}

##############################################################################
# @brief Initialize executable target information.
#
# This function initializes the structures of information about the executable
# build targets. If this function is executed another time, it does nothing
# because the structures are initialized already. In order to reduce the start
# time of applications that do not make use of this module, the initialization
# is only performed on demand.
#
# @sa get_executable_path()
#
# @returns Nothing.
_executabletargetinfo_initialize ()
{
    [ -n "${__EXECUTABLETARGETINFO_initialized}" ] && return 0
    __EXECUTABLETARGETINFO_initialized=1

    @EXECUTABLE_TARGET_INFO@
}
