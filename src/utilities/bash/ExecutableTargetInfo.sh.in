#! /usr/bin/env bash

##############################################################################
# @file  ExecutableTargetInfo.sh
# @brief Provides information about the executables built by BASIS.
#
# Copyright (c) 2011 University of Pennsylvania. All rights reserved.
# See https://www.rad.upenn.edu/sbia/software/license.html or COPYING file.
#
# Contact: SBIA Group <sbia-software at uphs.upenn.edu>
#
# @ingroup BashUtilities
##############################################################################

# return if already loaded
[ "${__SBIA_@PROJECT_NAME_UPPER@_EXECUTABLETARGETINFO_INCLUDED:-0}" -eq 1 ] && return 0
__SBIA_@PROJECT_NAME_UPPER@_EXECUTABLETARGETINFO_INCLUDED=1


# ============================================================================
# constants
# ============================================================================

## @brief Absolute directory path of ExecutableTargetInfo.sh module.
readonly __EXECUTABLETARGETINFO_dir=@BASIS_BASH___DIR__@

## @brief Default namespace used to convert target name to target UID.
readonly __EXECUTABLETARGETINFO_namespace='@PROJECT_NAME_LOWER@'

# ============================================================================
# modules
# ============================================================================

source "${__EXECUTABLETARGETINFO_dir}/@BASIS_LIBRARY_DIR@/Core.sh" # upvar()

# ============================================================================
# public functions
# ============================================================================

## @addtogroup BashUtilities
#  @{


##############################################################################
# @brief Get UID of build target.
#
# @param [out] uid    UID of build target.
# @param [in]  target Name/UID of build target.
#
# @returns Nothing.
#
# @retval 0 On success.
# @retval 1 On failure.
get_target_uid ()
{
    [ $# -eq 2 ] || return 1

    local target="$2"
    # empty string as input remains unchanged
    [ -z "${target}" ] && local "$1" && upvar $1 '' && return 0
    # initialize module if not done yet - this is only done here because
    # whenever information is looked up about an executable target, this
    # function is invoked first
    if [ -z "${__EXECUTABLETARGETINFO_initialized}" ]; then
        _executabletargetinfo_initialize || return 1
    fi
    # convert target name to target UID
    local path && _executabletargetinfo_get path "${target}" LOCATION
    if [ -z "${path}" ] && [[ "${target//::/}" == "${target}" ]]; then
        target="${__EXECUTABLETARGETINFO_namespace}::${target}"
    fi

    local "$1" && upvar $1 "${target}"
}

##############################################################################
# @brief Determine whether a given target is known.
#
# @param [in] target Name/UID of build target.
#
# @returns Whether the given build target is known by this module.
is_known_target ()
{
    local path && _executabletargetinfo_get path "$1" LOCATION
    [ -n "${path}" ]
}

##############################################################################
# @brief Get name of executable file.
#
# @param [out] name   Name of the executable or an empty string if unknown.
# @param [in]  target Name/UID of build target. If no argument is given,
#                     the name of the calling executable is returned instead.
#
# @returns Nothing.
#
# @retval 0 On success.
# @retval 1 On failure.
get_executable_name ()
{
    [ $# -eq 1 ] || [ $# -eq 2 ] || return 1

    local name

    # if no target name given, get name of this executable
    if [ $# -lt 2 ]; then
        name="${0##*/}"
    # otherwise, get name of executable built by named target
    else
        local path && get_executable_path path "$2"
        [ $? -eq 0 ] || return 1
        name="$(basename "${path}")"
        [ $? -eq 0 ] || return 1
    fi

    local "$1" && upvar $1 "${name}"
}

##############################################################################
# @brief Get directory of executable file.
#
# @param [out] dir    Absolute directory of executable file.
# @param [in]  target Name/UID of build target. If no argument is given,
#                     the directory where the file of the calling executable
#                     is located is returned.
#
# @returns Nothing.
#
# @retval 0 On success.
# @retval 1 On failure.
get_executable_directory ()
{
    [ $# -eq 1 ] || [ $# -eq 2 ] || return 1

    local path

    # if no target name given, get path of this executable
    if [ $# -lt 2 ]; then
        get_executable_path path
    # otherwise, get path of executable of named target
    else
        get_executable_path path "$2"
    fi
    [ $? -eq 0 ] || return 1
    # get directory component of path
    local dir="$(dirname "${path}")"

    local "$1" && upvar $1 "${dir}"
}

##############################################################################
# @brief Get absolute path of executable file.
#
# @param [out] path   Absolute path of executable file.
# @param [in]  target Name/UID of build target. If no argument is given,
#                     the file path of the calling executable is returned.
#
# @returns Nothing.
#
# @retval 0 On success.
# @retval 1 On failure.
get_executable_path ()
{
    [ $# -eq 1 ] || [ $# -eq 2 ] || return 1

    local path

    # if no target name given, get path of this executable
    if [ $# -lt 2 ]; then
        path="$(realpath "$0")"
    # otherwise, get path of executable built by named target
    else
        # get UID of target
        local uid && get_target_uid uid "$2"
        [ -n "${uid}" ] || return 1
        # get path relative to this module
        _executabletargetinfo_get path "${uid}" LOCATION
        [ -n "${path}" ] || return 1
        # make path absolute
        _executabletargetinfo_to_absolute_path path "${path}" "${__EXECUTABLETARGETINFO_dir}"
        [ $? -eq 0 ] || return 1
    fi

    local "$1" && upvar $1 "${path}"
}


## @}
# Doxygen group BashUtilities

# ============================================================================
# private helpers
# ============================================================================

##############################################################################
# @brief Sanitize string for use in variable name.
#
# @param [out] out Sanitized string.
# @param [in]  str String to be sanitized.
#
# @returns Nothing.
#
# @retval 0 On success.
# @retval 1 On failure.
_executabletargetinfo_sanitize ()
{
    [ $# -eq 2 ] || return 1
    [ -z "$2" ] && upvar $1 ''
    local sane="$(echo -n "$2" | tr [:space:] '_' | tr -c [:alpha:] '_')"
    [ -n "${sane}" ] || {
        echo "_executabletargetinfo_sanitize(): Failed to sanitize string" 1>&2
        exit 1
    }
    local "$1" && upvar $1 "${sane}"
}

##############################################################################
# @brief Add (key, value) pair to executable target info "hash".
#
# @sa _executabletargetinfo_get()
#
# @param [in] key   Hash key.
# @param [in] name  Name of the hash table.
# @param [in] value Value associated with the given hash key.
#
# @returns Sets a readonly variable that represents the (key, value) entry.
_executabletargetinfo_add ()
{
    [ $# -eq 3 ] || return 1

    local key  && _executabletargetinfo_sanitize key  "$1"
    local name && _executabletargetinfo_sanitize name "$2"
    eval "readonly __EXECUTABLETARGETINFO_${name}_${key}='$3'"
}

##############################################################################
# @brief Get value from executable target info "hash".
#
# @sa _executabletargetinfo_add()
#
# @param [out] value Value corresponding to given @p key
#                    or an empty string if key is unknown.
# @param [in]  key   Hash key.
# @param [in]  name  Name of the hash table.
#
# @returns Nothing.
#
# @retval 0 On success.
# @retval 1 On failure.
_executabletargetinfo_get ()
{
    [ $# -eq 3 ] || return 1

    local key  && _executabletargetinfo_sanitize key  "$2"
    local name && _executabletargetinfo_sanitize name "$3"
    eval "local value=\${__EXECUTABLETARGETINFO_${name}_${key}}"

    local "$1" && upvar $1 "${value}"
}

##############################################################################
# @brief Make relative path absolute.
#
# @attention The directory component of the path must be an existent directory.
#
# @todo Implement this function without the use of cd such that non-existent
#       paths can be simplified as well.
#
# @param [out] simplified Simplified @p path.
# @param [in]  path       Absolute or relative path.
# @param [in]  base       Base path used for relative paths.
#
# @returns Nothing.
#
# @retval 0 On success.
# @retval 1 On failure.
_executabletargetinfo_to_absolute_path ()
{
    [ $# -eq 2 ] || [ $# -eq 3 ] || return 1

    local path="$2"
    local base="$3"

    [ -n "${path}" ] || return 1

    local dir="$(dirname "${path}")"

    if [ -d "${base}" -a -d "${dir}" ]; then
        path="$(cd ${base}; cd ${dir}; pwd)"
        [ $? -eq 0 ] || return 1
        path="${path}/$(basename ${path})"
        [ $? -eq 0 ] || return 1
    fi

    local "$1" && upvar $1 "${path}"
}

##############################################################################
# @brief Initialize executable target information.
#
# This function initializes the structures of information about the executable
# build targets. If this function is executed another time, it does nothing
# because the structures are initialized already. In order to reduce the start
# time of applications that do not make use of this module, the initialization
# is only performed on demand.
#
# The initialization is done in get_target_uid() as this function is always
# called first before any lookup of information.
#
# @returns Nothing.
#
# @retval 0 On success.
# @retval 1 On failure.
_executabletargetinfo_initialize ()
{
    [ $# -eq 0 ] || return 1

    @EXECUTABLE_TARGET_INFO@

    __EXECUTABLETARGETINFO_initialized=1
    return 0
}

# ============================================================================
# aliases (optional)
# ============================================================================

if [ -z "${basis_enable_target_aliases}" ] || [ ${basis_enable_target_aliases} -eq 0 ]; then
    return
fi

# define aliases of build target names to executable file paths
@EXECUTABLE_ALIASES@

# enable expansion of aliases also in non-interactive shells
shopt -s expand_aliases
