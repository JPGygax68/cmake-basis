#! /usr/bin/env bash

##############################################################################
# @file  stdaux.sh
# @brief Standard auxiliary functions for BASH.
#
# Copyright (c) 2011 University of Pennsylvania. All rights reserved.
# See https://www.rad.upenn.edu/sbia/software/license.html or COPYING file.
#
# Contact: SBIA Group <sbia-software at uphs.upenn.edu>
#
# @ingroup BashUtilities
##############################################################################

# return if already loaded
[ "${_@PROJECT_NAME_UPPER@_STDAUX_INCLUDED:-0}" -eq 1 ] && return 0
_@PROJECT_NAME_UPPER@_STDAUX_INCLUDED=1

## @addtogroup BashUtilities
#  @{

# ============================================================================
# constants
# ============================================================================

## @brief Absolute path of directory of StdAux.sh module
declare -r stdaux_dir=$(cd `dirname ${BASH_SOURCE}` && pwd -P)

# ============================================================================
# version / help
# ============================================================================

# include command-line parsing library
source "${stdaux_dir}/Flags.sh"

##############################################################################
# @brief Get name of executable.
#
# @returns Prints name of BASH script to @c STDOUT.
get_executable_name ()
{
    echo ${0##*/}
}

##############################################################################
# @brief Print version information.
#
# @param [in] name      Name of program. Give a constant expression here,
#                       @b not the name of the executable as extracted from
#                       the first command-line argument or similar! By default,
#                       the executable name is extracted from the first
#                       command-line argument. This is @b not recommended.
# @param [in] copyright Copyright and license notice. Defaults to official
#                       SBIA software license.
#
# @returns Nothing.
print_version ()
{
    local name=${1:-$(get_executable_name)}
    local copyright=${2:-}
    if [ -z "${copyright}" ]; then
        copyright="Copyright (c) 2011 University of Pennsylvania. \
All rights reserved.\n\
See https://www.rad.upenn.edu/sbia/software/license.html or COPYING file."
    fi
    echo -n "${name} (@PROJECT_NAME@) version @PROJECT_VERSION@"
    if [ @PROJECT_REVISION@ -gt 0 ] # project revision > 0
    then
        echo -n " (revision @PROJECT_REVISION@)"
    fi
    echo
    echo -e "${copyright}"
}

##############################################################################
# @brief Print contact information.
#
# @param [in] contact Contact name. Defaults to
#                     "SBIA Group <sbia-software at uphs.upenn.edu>".
#
# @returns Nothing.
print_contact ()
{
    echo "Contact:"
    if [ $# -gt 0 ]; then
        echo -e "  $1"
    else
        echo "  SBIA Group <sbia-software at uphs.upenn.edu>"
    fi
}

# ============================================================================
# paths
# ============================================================================

##############################################################################
# @brief Make relative path absolute.
#
# @attention The directory referred to by the directory part of the path must exist.
#
# @todo Implement this function without the use of cd such that non-existent
#       paths can be simplified as well.
#
# @param [in] path Absolute or relative path.
# @param [in] base Base path used for relative paths.
#
# @returns Prints simplified absolute path to @c STDOUT.
to_absolute_path ()
{
    local path=$1
    if [ -n "$2" ]; then
        local base=$2
    else
        local base=$(pwd)
    fi
    local dir=$(dirname "${path}")

    if [ -d "${base}" -a -d "${dir}" ]; then
        echo "$(cd ${base}; cd ${dir}; pwd)/$(basename ${path})"
    else
        echo ${path}
    fi
}

# ============================================================================
# main
# ============================================================================

# define aliases of build target names to executable file paths
@EXECUTABLE_ALIASES@

# enable expansion of aliases also in non-interactive shells
shopt -s expand_aliases

## @}
