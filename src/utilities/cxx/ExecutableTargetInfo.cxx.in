/**
 * @file  ExecutableTargetInfo.cxx
 * @brief Implementation of ExecutableTargetInfo module.
 *
 * @note The file ExecutableTargetInfo.cxx is automatically generated by BASIS
 *       from the template file ExecutableTargetInfo.cxx.in which is part of BASIS.
 *
 * Copyright (c) 2011 University of Pennsylvania. All rights reserved.
 * See https://www.rad.upenn.edu/sbia/software/license.html or COPYING file.
 *
 * Contact: SBIA Group <sbia-software at uphs.upenn.edu>
 *
 * @ingroup CppUtilities
 */


#include <sbia/basis/path.h>

#include "ExecutableTargetInfo.h"


using namespace std;
using namespace SBIA_BASIS_NAMESPACE;


SBIA_@PROJECT_NAME_UPPER@_NAMESPACE_BEGIN


// ===========================================================================
// static members
// ===========================================================================

ExecutableTargetInfo *ExecutableTargetInfo::_instance = NULL;

// ===========================================================================
// construction / destruction
// ===========================================================================

// ***************************************************************************
ExecutableTargetInfo
::ExecutableTargetInfo ()
{
    @EXECUTABLE_TARGET_INFO@
}

// ***************************************************************************
ExecutableTargetInfo
::~ExecutableTargetInfo ()
{
}

// ===========================================================================
// public interface
// ===========================================================================

// ***************************************************************************
string
ExecutableTargetInfo
::GetTargetUID (const char *target) const
{
    if (target == NULL || *target == '\0') return "";
    if (_execNames.find (target) == _execNames.end () && strstr (target, "::") == NULL) {
        return cProjectNameLower + "::" + target;
    }
    return target;
}

// ***************************************************************************
bool
ExecutableTargetInfo
::IsKnownTarget (const char *target) const
{
    return _execNames.find (GetTargetUID (target)) != _execNames.end ();
}

// ***************************************************************************
string
ExecutableTargetInfo
::GetExecutableName (const char *target) const
{
    string uid = GetTargetUID (target);
    MapIterator it = _execNames.find (uid);
    if (it == _execNames.end ()) return "";
    return it->second;
}

// ***************************************************************************
string
ExecutableTargetInfo
::GetBuildDirectory (const char *target) const
{
    string uid = GetTargetUID (target);
    MapIterator it = _buildDirs.find (uid);
    if (it == _buildDirs.end ()) return "";
    return it->second;
}

// ***************************************************************************
string
ExecutableTargetInfo
::GetInstallationDirectory (const char *target) const
{
    string uid = GetTargetUID (target);
    MapIterator it = _installDirs.find (uid);
    if (it == _installDirs.end ()) return "";
#ifdef LIBEXEC
    return JoinPaths (JoinPaths (GetExecutableDirectory (), cLibexecPathPrefix), it->second);
#else
    return JoinPaths (JoinPaths (GetExecutableDirectory (), cRuntimePathPrefix), it->second);
#endif
}


SBIA_@PROJECT_NAME_UPPER@_NAMESPACE_END
