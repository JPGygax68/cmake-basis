/**
 * @file  stdaux.h
 * @brief Standard auxiliary functions.
 *
 * @note The file stdaux.h is automatically generated by BASIS from the
 *       file stdaux.h.in which is part of BASIS.
 *
 * Copyright (c) 2011 University of Pennsylvania. All rights reserved.
 * See https://www.rad.upenn.edu/sbia/software/license.html or COPYING file.
 *
 * Contact: SBIA Group <sbia-software at uphs.upenn.edu>
 *
 * @ingroup CppUtilities
 */

#pragma once
#ifndef SBIA_@PROJECT_NAME_UPPER@_STDAUX_H_
#define SBIA_@PROJECT_NAME_UPPER@_STDAUX_H_


#include <string>
#include <map>


SBIA_@PROJECT_NAME_UPPER@_NAMESPACE_BEGIN


/// @addtogroup CppUtilities
/// @{


// ===========================================================================
// executable information
// ===========================================================================

/**
 * @brief Print version information including copyright notice.
 *
 * @param [in] name      Program name. Defaults to GetExecutableName().
 * @param [in] copyright Copyright and license notices. Defaults to the
 *                       official SBIA license. If an empty string is provided,
 *                       i.e., copyright = "", only the version information
 *                       itself is output. Otherwise, the version information
 *                       is followed by a newline and the given copyright
 *                       string. The output ends in a newline in any case.
 */
void PrintVersion (const char *name = NULL, const char *copyright = NULL);

/**
 * @brief Print contact information.
 *
 * @param [in] contact Name of the contact. Defaults to
 *                     "SBIA Group <sbia-software at uphs.upenn.edu>".
 */
void PrintContact (const char *contact = NULL);

// ===========================================================================
// installation directories
// ===========================================================================

/**
 * @brief Whether the executable was executed from within the build tree.
 *
 * @return Whether the executable was executed from within the build tree.
 */
bool ExecutingInBuildTree ();

/**
 * @brief Get absolute path of installation directory.
 *
 * This function returns the absolute path of the installation prefix path.
 * If the installation was not moved after a "make install", the returned
 * directory corresponds to the value of the INSTALL_PREFIX CMake variable
 * as specified during the build of the executable file. Note, however,
 * that even when the installation tree was moved after the configuration
 * and build of the software, the correct path is returned as long as the
 * relative directory structure of the installation tree is maintained.
 * This is because the path is determined relative to the directory of the
 * executable itself, knowning in which path this executable is located
 * relative to the INSTALL_PREFIX.
 *
 * @note If the executable is executed from within the build tree, the
 *       returned path will not be correct. Therefore, only use this
 *       function when ExecutingInBuildTree() returns false. Otherwise,
 *       the configured absolute paths which are valid for the build tree
 *       have to be used. Note that the build tree is not supposed to be
 *       relocatable in any case as it is only a temporary directory tree
 *       and CMake requires it to be not moved anywhere else.
 *
 * @return Absolute path of top directory of installation tree.
 */
std::string GetInstallationPrefix ();

/**
 * @brief Get absolute path of directory containing runtime executables.
 *
 * @return Absolute path of directory containing runtime executables.
 */
std::string GetRuntimeDirectory ();

/**
 * @brief Get absolute path of directory containing auxiliary executables.
 *
 * @return Absolute path of directory containing auxiliary executables.
 */
std::string GetLibexecDirectory ();

/**
 * @brief Get absolute path of directory containing libraries.
 *
 * @return Absolute path of directory containing libraries.
 */
std::string GetLibraryDirectory ();

/**
 * @brief Get absolute path of directory containing auxiliary data.
 *
 * @return Absolute path of directory containing auxiliary data.
 */
std::string GetDataDirectory ();

// ===========================================================================
// information about executable targets
// ===========================================================================

/**
 * @brief Provides information for executable build targets required to
 *        identify built executable in either the build tree or the installation.
 *
 * Within source code of a BASIS project, other SBIA executables are called
 * only indirectly using the build target name which must be fixed and unique
 * within the lab. The name of the output executable file of these targets may
 * however vary and be finally set by BASIS, for example, depending on
 * whether the project is build as part of a superproject or not. Therefore,
 * each BASIS CMake function may adjust the output name in order to resolve
 * name conflicts with other targets or SBIA executables.
 *
 * The idea is that a target name is supposed to be stable and known to the
 * developer as soon as the target is added to a CMakeLists.txt file, while
 * the name of the actual executable file is not known a priori as it is set
 * by the BASIS CMake functions during the configure step. Thus, the developer
 * should not rely on a particular name of the executable file. Instead, they
 * can rely on the name of the corresponding build target which was chosen by
 * themselves when adding the target to the build configuration.
 *
 * In order to get the actual file path of the built executable file, the
 * function GetExecutableFile() is provided by this module. This function
 * uses the static singleton instance of this class in order to map the given
 * build target name to the name of the built and optionally installed
 * executable. The code which initializes the required maps is generated
 * automatically during the configuration of the build system by BASIS.
 *
 * @note This class is not intended to be subclassed.
 *
 * @sa GetExecutableFile()
 */
class ExecutableTargetInfo
{
    // -----------------------------------------------------------------------
    // typedefs
    // -----------------------------------------------------------------------

private:

    typedef std::map <std::string, std::string> MapType;
    typedef MapType::const_iterator             MapIterator;

    // -----------------------------------------------------------------------
    // construction / destruction
    // -----------------------------------------------------------------------

private:

    /**
     * @brief Constructor.
     *
     * Initializes the map. The constructor definition is in particular
     * generated by BASIS during the configuration of the build system.
     */
    ExecutableTargetInfo ();

    /// @brief Destructor.
    ~ExecutableTargetInfo ();

    // -----------------------------------------------------------------------
    // public interface
    // -----------------------------------------------------------------------

public:

    /**
     * @brief Get static instance of this module.
     *
     * @return Static instance of this class.
     */
    static const ExecutableTargetInfo &GetInstance ()
    {
        return _instance;
    }

    /**
     * @brief Get UID of build target.
     *
     * In order to be able to distinguish build targets with identical name
     * but which are built as part of different BASIS projects, the UID of
     * a build target is composed of the build target name as given as
     * argument to the basis_add_* CMake functions and a namespace identifier
     * (i.e., the project name in lowercase letters). If the specified build
     * target name is neither known by this module nor a build target UID yet,
     * this method prepends the namespace identifier corresponding to the
     * project this module was built from, assuming that the caller refers
     * to another target within the same project.
     *
     * @param [in] target Name/UID of build target.
     *
     * @returns UID of build target.
     */
    std::string GetTargetUID (const std::string &target) const;

    /**
     * @brief Determine whether a given build target is known.
     *
     * @param [in] target Name/UID of build target.
     *
     * @returns Whether the given build target is known by this module.
     */
    bool IsKnownTarget (const std::string &target) const;

    /**
     * @brief Get name of executable file without path.
     *
     * @param [in] target Name/UID of build target.
     *
     * @return Name of built executable file without path.
     */
    std::string GetExecutableName (const std::string &target) const;

    /**
     * @brief Get absolute path of output directory of executable in build tree.
     *
     * @param [in] target Name/UID of build target.
     *
     * @return Absolute path of build tree directory where built executable is
     *         located or an empty string if build target is not known.
     */
    std::string GetBuildDirectory (const std::string &target) const;

    /**
     * @brief Get absolute path of directory where built executable is installed.
     *
     * @param [in] target Name/UID of build target.
     *
     * @return Absolute path of executable's installation directory or
     *         an empty string if build target is not known.
     */
    std::string GetInstallationDirectory (const std::string &target) const;

    // -----------------------------------------------------------------------
    // unsupported methods
    // -----------------------------------------------------------------------

private:

    /**
     * @brief Copy constructor.
     *
     * @note Intentionally not implemented.
     */
    ExecutableTargetInfo (const ExecutableTargetInfo &);

    /**
     * @brief Assignment operator.
     *
     * @note Intentionally not implemented.
     */
    void operator= (const ExecutableTargetInfo &);

    // -----------------------------------------------------------------------
    // members
    // -----------------------------------------------------------------------

private:

    /// Maps build target names to executable file names.
    MapType _execNames;
    /// Maps build target names to output directories in build tree.
    MapType _buildDirs;
    /// Maps build target names to installation directories relative to
    /// installation prefix as returned by GetInstallationPrefix().
    MapType _installDirs;

    /// Static instance.
    static ExecutableTargetInfo _instance;

}; // class ExecutableTargetInfo

// ===========================================================================
// mapping of build target name to executable file path
// ===========================================================================

/**
 * @brief Get canoncial path of executable file.
 *
 * This function uses the static instance of the class ExecutableTargetInfo
 * in order to obtain the required information to be able to determine the
 * absolute path of the executable file which was built and/or installed as
 * the specified build target.
 *
 * @note The BASIS path module provides a function also named GetExecutablePath()
 *       which can be used to get the canonical path of the calling executable.
 *
 * @sa ExecutableTargetInfo
 *
 * @param [in] target Name/UID of build target.
 *
 * @return Absolute path of executable file or an empty string if the build
 *         target is not known.
 */
std::string GetExecutablePath (const std::string &target);


/// @}
// Doxygen group CppUtilities


SBIA_@PROJECT_NAME_UPPER@_NAMESPACE_END


#endif // SBIA_@PROJECT_NAME_UPPER@_STDAUX_H_

