/**
 * @file  testdriver.hxx
 * @brief Default test driver implementation.
 *
 * Copyright (c) 2011 University of Pennsylvania. All rights reserved.
 * See https://www.rad.upenn.edu/sbia/software/license.html or COPYING file.
 *
 * Contact: SBIA Group <sbia-software at uphs.upenn.edu>
 *
 * @ingroup CppUtilities
 */

#pragma once
#ifndef _SBIA_BASIS_TESTDRIVER_HXX
#define _SBIA_BASIS_TESTDRIVER_HXX


#include <sbia/basis/path.h>
#include <sbia/basis/CmdLine.h>

#if HAVE_ITK
#  include "testdriver-itk.hxx"
#endif


// acceptable in .cxx file of test driver
using namespace sbia::basis;


// ===========================================================================
// help
// ===========================================================================

// ---------------------------------------------------------------------------
void print_usage()
{
    string exec_name = get_executable_name();
    cout << "Usage:" << endl;
    cout << "  " << exec_name << " [options] <command> [arguments]" << endl;
    cout << "  " << exec_name << " [options] --no-process" << endl;
}

// ---------------------------------------------------------------------------
void print_options()
{

    cout << "Optional arguments:" << endl;
    cout << "  --[no]process" << endl;
    cout << "      The test driver will not invoke any process." << endl;
    cout << endl;
    cout << "  --with-threads THREADS" << endl;
    cout << "      Use at most THREADS threads." << endl;
    cout << endl;
    cout << "  --without-threads" << endl;
    cout << "      Use at most one thread." << endl;
    cout << endl;
    cout << "  --full-output" << endl;
    cout << "      Causes the full output of the test to be passed to CDash." << endl;
    cout << endl;
    cout << "  --redirect-output <file>" << endl;
    cout << "      Redirects the test output to the specified file." << endl;
    cout << endl;
    cout << "  --" << endl;
    cout << "      The options after -- are not interpreted by this program and passed" << endl;
    cout << "      directly to the test program." << endl;
    cout << endl;
    cout << "Standard arguments:" << endl;
    cout << "  --verbose, -v" << endl;
    cout << "      Increase verbosity of output messages." << endl;
    cout << "      This option can be used several times." << endl;
    cout << endl;
    cout << "  --help, -h" << endl;
    cout << "      Print help and exit." << endl;
    cout << endl;
    cout << "  --helpshort" << endl;
    cout << "      Print short help and exit." << endl;
    cout << endl;
    cout << "  --version" << endl;
    cout << "      Print version information and exit." << endl;
}

// ---------------------------------------------------------------------------
void print_help()
{
    print_usage();
    cout << endl;
    cout << "Description:" << endl;
    cout << "  This command alters the environment, runs a test program and " << endl;
    cout << "  compares the output image to one or more baseline images." << endl;
    cout << endl;
    print_options();
    cout << endl;
    cout << "Contact:" << endl;
    cout << "  SBIA Group <sbia-software at uphs.upenn.edu>" << endl;
}

// ---------------------------------------------------------------------------
void print_helpshort()
{
    print_usage();
    cout << endl;
    print_options();
}

// ===========================================================================
// initialization
// ===========================================================================

// ---------------------------------------------------------------------------
void testdriversetup(int* argc, char** argv[])
{
    try {
        // -------------------------------------------------------------------
        // define command-line arguments

        // environment
        MultiStringArg add_before_libpath(
                "", "add-before-libpath",
                "Add a path to the library path environment. This option takes"
                " care of choosing the right environment variable for your system."
                " This option can be used several times.",
                false, "<dir>");

        MultiStringArg add_before_env(
                "", "add-before-env",
                "Add an environment variable named <name> with the given value."
                " The seperator used is the default one on the system."
                " This option can be used several times.",
                false, "<name>=<value>");

        // regression testing
        SwitchArg compare(
                "", "compare",
                "Compare the image specified using the --image option to the baseline"
                " images specified using the --baseline option.",
                false);

        StringArg testimage(
                "", "image",
                "Test image generated by the test.",
                false, "", "<image>");

        MultiStringArg baseline(
                "", "baseline",
                "Baseline image for regression test. You can use this option several"
                " times to add alternative baseline images.",
                false, "<image>");

        DoubleArg intensity_tolerance(
                "", "intensity-tolerance",
                "The accepted maximum difference between image intensities.",
                false, 2.0, "<float>");

        UIntArg max_number_of_differences(
                "", "max-number-of-differences",
                "When comparing images with --compare, allow the given number"
                " of image elements to differ.",
                false, 0, "<n>");

        UIntArg tolerance_radius(
                "", "tolerance-radius",
                "At most one image element in the neighborhood specified by the"
                " given radius has to fulfill the test criteria.",
                false, 0, "<int>");

        // test execution
        StringArg redirect_output(
                "", "redirect-output",
                "Redirects the test output to the specified file.",
                false, "", "<file>");

        UIntArg max_number_of_threads(
                "", "max-number-of-threads",
                "Use at most <n> threads. Set explicitly to n=1 to disable"
                " multi-threading. Note that the test itself still may use"
                " more threads, but the regression tests will not.",
                false, 0, "<n>");

        SwitchArg full_output(
                "", "full-output",
                "Causes the full output of the test to be passed to CDash.",
                false);

        PositionalArg testname(
                "testname",
                "The name of the test to run. Displays a list of available tests"
                " if this argument is omitted and waits for the user to input"
                " the number of the test to run and exist with error if an"
                " invalid test number was specified.",
                false, "", "<test>");

        // -------------------------------------------------------------------
        // construct command-line
        CmdLine cmd("basistest-driver", cProjectName,
                "This program alters the environment, runs a test and "
                "compares the output image to one or more baseline images.",
                "EXECNAME GaussFilter --compare --image output.nii --baseline baseline.nii\n"
                "Runs the test named GaussFilter which writes the gaussian filtered"
                " image to the image file output.nii. Compares the image produced by"
                " the test to the reference image named baseline.nii with default"
                " intensity tolerance.",
                cVersionAndRevision,
                "Copyright (c) 2011 University of Pennsylvania. "
                "All rights reserved.");

        cmd.add(add_before_libpath);
        cmd.add(add_before_env);
        cmd.add(compare);
        cmd.add(testimage);
        cmd.add(baseline);
        cmd.add(max_number_of_differences);
        cmd.add(intensity_tolerance);
        cmd.add(tolerance_radius);
        cmd.add(redirect_output);
        cmd.add(max_number_of_threads);
        cmd.add(full_output);
        cmd.add(testname);

        // -------------------------------------------------------------------
        // parse command-line
        cmd.parse(*argc, *argv);

        // -------------------------------------------------------------------
        // leave only test name in argv[]
        if (testname.getValue().empty()) {
            *argc = 1;
            (*argv[1]) = NULL;
        } else {
            int i = 0;
            while (i < (*argc) && testname.getValue() != (*argv)[i]) i++;
            *argc = 2;
            (*argv)[1] = (*argv)[i];
            (*argv)[2] = NULL;
        }

    // -----------------------------------------------------------------------
    // catch unhandled exceptions - parse errors are already taken care of
    } catch (CmdLineException& e) {
        // invalid command-line specification
        cerr << e.error() << endl;
        exit(1);
    }

#if HAVE_ITK
    RegisterRequiredFactories();
#endif
}

// ===========================================================================
// image regression testing
// ===========================================================================

// ---------------------------------------------------------------------------
int image_regression_test(const char*  imagefile,
                          const char*  baseline,
                          double       intensity_tolerance,
                          unsigned int max_number_of_differences,
                          unsigned int tolerance_radius,
                          int          report)
{
#if HAVE_ITK
    return RegressionTestImage(imagefile,
                               baseline,
                               report,
                               intensity_tolerance,
                               max_number_of_differences,
                               tolerance_radius);
#else
    BASIS_THROW(runtime_error, "Not implemented yet! Use ITK implementation instead.");
#endif
}


#endif // _SBIA_BASIS_TESTDRIVER_HXX
