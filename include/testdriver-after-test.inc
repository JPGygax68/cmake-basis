/**
 * @file  testdriver-before-test.h
 * @brief Default implementation of test driver.
 *
 * This file is included in the test driver generated by the CMake command
 * <a href="http://www.cmake.org/cmake/help/cmake-2-8-docs.html#command:create_test_sourcelist">
 * create_test_sourcelist()</a> directly after the call to the test main function.
 * It performs regression testing if requested.
 *
 * This file is a modified version of the itkTestDriverBeforeTest.inc file
 * which is part of the TestKernel module of the ITK 4 project.
 *
 * Copyright (c) 2011 University of Pennsylvania.<br />
 * Copyright Insight Software Consortium.<br />
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Contact: SBIA Group <sbia-software at uphs.upenn.edu>
 *
 * @ingroup CppUtilities
 */

//int main(int, char*)
//{
    // #include <sbia/basis/testdriver-before-test.inc> -> try {
        // [...]

        // revert redirection of output
        if (arguments.redirect) {
            cout.rdbuf(oldcoutbuf);
            redirectstream.close();
        }
        // perform regression tests of output image(s)
        for (size_t i = 0; i < arguments.compare_imagepairs.size(); i++) {
            const char* baseline_filename = arguments.compare_imagepairs[i].first;
            const char* test_filename     = arguments.compare_imagepairs[i].second;
            vector<string> baselines = get_baseline_filenames(baseline_filename);
            string bestmatch;
            int    beststatus = numeric_limits<int>::max();
            for (size_t i = 0; i < baselines.size(); i++) {
                int status = image_regression_test(
                        test_filename,
                        baselines[i].c_str(),
                        arguments.compare_intensity_tolerance,
                        arguments.compare_max_number_of_differences,
                        arguments.compare_tolerance_radius);
                if (status < beststatus) {
                    bestmatch  = baselines[i];
                    beststatus = status;
                }
                if (beststatus == 0) {
                    // perfect test result
                    break;
                }
            }
            // if the best we can do still has errors, generate the error images
            if (beststatus != 0) {
                image_regression_test(
                        test_filename,
                        baselines[0].c_str(),
                        arguments.compare_intensity_tolerance,
                        arguments.compare_max_number_of_differences,
                        arguments.compare_tolerance_radius,
                        true); // generate error images
            }
            // output the matching baseline for submission to the dashboard
            cout << "<DartMeasurement name=\"BaselineImageName\" type=\"text/string\">";
            cout << get_file_name(bestmatch);
            cout << "</DartMeasurement>" << std::endl;

            result += beststatus;
        }

    // catch any exceptions
    } catch (const exception& e) {
        cerr << "ITK test driver caught an exception:\n";
        cerr << e.what() << "\n";
        result = -1;
    } catch (...) {
        cerr << "ITK test driver caught an unknown exception!!!\n";
        result = -1;
    }
    return result;
//} end of main()
