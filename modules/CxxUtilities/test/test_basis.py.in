#! /usr/bin/env python

##############################################################################
# @file  test_cxxutilities.py
# @brief Test C++ utilities.
#
# This test first builds the test project which is based on BASIS and then
# triggers the execution of the separate test cases which are built as part
# of this test project.
#
# Copyright (c) 2011, 2012 University of Pennsylvania. All rights reserved.<br />
# See http://www.rad.upenn.edu/sbia/software/license.html or COPYING file.
#
# Contact: SBIA Group <sbia-software at uphs.upenn.edu>
##############################################################################

import sys

from testaux import *

# ============================================================================
# main
# ============================================================================

# ----------------------------------------------------------------------------
if __name__ == '__main__':
    # parse arguments
    verbose = 0
    opts = parse_arguments()
    for o, a in opts:
        if o in ['--verbose', '-v']: verbose = verbose + 1
        else: assert False, "Unhandled option " + o
    # create project
    create_project('CxxUtilitiesTest', description='Test of BASIS Utilities for C++.')
    # copy files to project
    add_file('helloworld.cxx', prefix='src') # example executable
    add_file('test_ExecutableTargetInfo.cxx.in', prefix='test')
    add_file('test_stdaux.cxx.in', prefix='test')
    # edit CMakeLists.txt files
    add_cmake_code('src/CMakeLists.txt',  'basis_add_executable(helloworld.cxx)')
    add_cmake_code('test/CMakeLists.txt', 'basis_add_test(test_ExecutableTargetInfo.cxx UNITTEST)')
    add_cmake_code('test/CMakeLists.txt', 'basis_add_test(test_stdaux.cxx UNITTEST)')
    # build project
    build_project(verbose)
    # run tests
    run_tests(verbose)
